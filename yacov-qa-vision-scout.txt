Directory structure:
└── yacov-qa-vision-scout/
    ├── README.md
    ├── bun.lockb
    ├── components.json
    ├── eslint.config.js
    ├── index.html
    ├── package.json
    ├── postcss.config.cjs
    ├── tailwind.config.ts
    ├── testhub-tracker.md
    ├── tsconfig.app.json
    ├── tsconfig.json
    ├── tsconfig.node.json
    ├── tsconfig.test.json
    ├── vite.config.ts
    ├── vitest.config.ts
    ├── vitest.setup.ts
    ├── .cursorrules
    ├── .env.example
    ├── .env.test
    ├── .windsurfrules
    ├── Docs/
    │   ├── app_flow_document.md
    │   ├── backend_structure_document.md
    │   ├── browserstackAPI.md
    │   ├── file_structure_document.md
    │   ├── frontend_guidelines_document.md
    │   ├── project_requirements_document.md
    │   ├── system_prompts_document.md
    │   ├── tech_stack_document.md
    │   ├── testing_framework.md
    │   ├── browserstack/
    │   │   ├── api-endpoints.md
    │   │   ├── api-objects.md
    │   │   └── installation.md
    │   ├── browserstack-api/
    │   │   ├── error-handling.md
    │   │   ├── http-verbs.md
    │   │   └── overview.md
    │   └── tasks/
    │       └── CHART-001.md
    ├── public/
    ├── src/
    │   ├── App.css
    │   ├── App.tsx
    │   ├── index.css
    │   ├── main.tsx
    │   ├── vite-env.d.ts
    │   ├── vite.config.ts
    │   ├── components/
    │   │   ├── comparison/
    │   │   │   ├── ComparisonForm.tsx
    │   │   │   ├── ConfigSelection.tsx
    │   │   │   ├── ResultsDialog.tsx
    │   │   │   ├── TestResultsTable.tsx
    │   │   │   ├── UrlInputs.tsx
    │   │   │   └── types.ts
    │   │   ├── settings/
    │   │   │   ├── BrowserstackConfigForm.tsx
    │   │   │   ├── ConfigurationsList.tsx
    │   │   │   ├── DesktopFields.tsx
    │   │   │   ├── MobileFields.tsx
    │   │   │   ├── PredefinedConfigs.tsx
    │   │   │   ├── types.ts
    │   │   │   ├── configurations-list/
    │   │   │   │   ├── ConfigurationRow.tsx
    │   │   │   │   ├── ConfigurationsTable.tsx
    │   │   │   │   ├── ValidationDialog.tsx
    │   │   │   │   ├── hooks.ts
    │   │   │   │   ├── index.tsx
    │   │   │   │   ├── types.ts
    │   │   │   │   └── useConfigurationsList.ts
    │   │   │   └── predefined-configs/
    │   │   │       ├── ConfigCard.tsx
    │   │   │       ├── EditConfigDialog.tsx
    │   │   │       ├── EditConfigForm.tsx
    │   │   │       ├── index.tsx
    │   │   │       ├── types.ts
    │   │   │       ├── usePredefinedConfigs.ts
    │   │   │       └── hooks/
    │   │   │           ├── index.ts
    │   │   │           ├── useConfigEditing.ts
    │   │   │           ├── useConfigMutations.ts
    │   │   │           ├── useConfigSelection.ts
    │   │   │           ├── usePredefinedConfigs.ts
    │   │   │           └── useValidationDialog.ts
    │   │   └── ui/
    │   │       ├── accordion.tsx
    │   │       ├── alert-dialog.tsx
    │   │       ├── alert.tsx
    │   │       ├── aspect-ratio.tsx
    │   │       ├── avatar.tsx
    │   │       ├── badge.tsx
    │   │       ├── breadcrumb.tsx
    │   │       ├── button.tsx
    │   │       ├── calendar.tsx
    │   │       ├── card.tsx
    │   │       ├── carousel.tsx
    │   │       ├── chart.tsx
    │   │       ├── checkbox.tsx
    │   │       ├── collapsible.tsx
    │   │       ├── command.tsx
    │   │       ├── context-menu.tsx
    │   │       ├── dialog.tsx
    │   │       ├── drawer.tsx
    │   │       ├── dropdown-menu.tsx
    │   │       ├── form.tsx
    │   │       ├── hover-card.tsx
    │   │       ├── input-otp.tsx
    │   │       ├── input.tsx
    │   │       ├── label.tsx
    │   │       ├── menubar.tsx
    │   │       ├── navigation-menu.tsx
    │   │       ├── pagination.tsx
    │   │       ├── popover.tsx
    │   │       ├── progress.tsx
    │   │       ├── radio-group.tsx
    │   │       ├── resizable.tsx
    │   │       ├── scroll-area.tsx
    │   │       ├── select.tsx
    │   │       ├── separator.tsx
    │   │       ├── sheet.tsx
    │   │       ├── sidebar.tsx
    │   │       ├── skeleton.tsx
    │   │       ├── slider.tsx
    │   │       ├── sonner.tsx
    │   │       ├── switch.tsx
    │   │       ├── table.tsx
    │   │       ├── tabs.tsx
    │   │       ├── textarea.tsx
    │   │       ├── toast.tsx
    │   │       ├── toaster.tsx
    │   │       ├── toggle-group.tsx
    │   │       ├── toggle.tsx
    │   │       ├── tooltip.tsx
    │   │       └── use-toast.ts
    │   ├── hooks/
    │   │   ├── use-mobile.tsx
    │   │   └── use-toast.ts
    │   ├── integrations/
    │   │   └── supabase/
    │   │       ├── client.ts
    │   │       └── types.ts
    │   ├── lib/
    │   │   └── utils.ts
    │   └── pages/
    │       ├── Comparison.tsx
    │       ├── Index.tsx
    │       └── Settings.tsx
    └── supabase/
        ├── config.toml
        └── functions/
            ├── tsconfig.json
            ├── types.d.ts
            ├── _shared/
            │   └── cors.ts
            ├── browserstack-screenshots/
            │   ├── README.md
            │   ├── browser-validation.ts
            │   ├── browserstack-api.ts
            │   ├── config.toml
            │   ├── database.ts
            │   ├── index.ts
            │   ├── logger.ts
            │   ├── os-config.ts
            │   ├── package-lock.json
            │   ├── package.json
            │   ├── postcss.config.js
            │   ├── rate-limiter.ts
            │   ├── request-validator.ts
            │   ├── run-tests.mjs
            │   ├── tsconfig.json
            │   ├── types.ts
            │   ├── vitest.config.ts
            │   ├── vitest.setup.ts
            │   ├── .env.example
            │   ├── .env.test
            │   ├── __mocks__/
            │   │   ├── deno.ts
            │   │   └── _shared/
            │   │       └── cors.ts
            │   ├── __tests__/
            │   │   ├── browserstack-api.integration.test.ts
            │   │   ├── browserstack-api.test.ts
            │   │   ├── index.test.ts
            │   │   ├── setup.ts
            │   │   ├── test-utils.ts
            │   │   ├── types.d.ts
            │   │   └── types.ts
            │   ├── coverage/
            │   ├── errors/
            │   │   └── browserstack-error.ts
            │   ├── types/
            │   │   ├── api-types.ts
            │   │   ├── deno.d.ts
            │   │   ├── global.d.ts
            │   │   └── vitest.d.ts
            │   └── utils/
            │       └── api-utils.ts
            └── validate-browserstack-config/
                └── index.ts

================================================
File: /README.md
================================================
# BrowserStack Screenshots API Tests

This project contains tests for the BrowserStack Screenshots API implementation.

## Setup

1. Install dependencies:
```bash
npm install
```

2. Create a `.env.test` file:
```bash
cp .env.example .env.test
```

3. Update `.env.test` with your BrowserStack credentials:
- Get your credentials from https://www.browserstack.com/accounts/settings
- Update `BROWSERSTACK_USERNAME` and `BROWSERSTACK_ACCESS_KEY` in `.env.test`

## Running Tests

Run all tests:
```bash
npm test
```

Run tests in watch mode:
```bash
npm run test:watch
```

## Test Configuration

The following environment variables can be configured in `.env.test`:

- `BROWSERSTACK_USERNAME`: Your BrowserStack username
- `BROWSERSTACK_ACCESS_KEY`: Your BrowserStack access key
- `TEST_URL`: URL to test screenshot generation (default: https://example.com)
- `TEST_TIMEOUT`: Timeout for long-running tests in milliseconds (default: 120000)

## Test Coverage

The test suite includes:

1. Authentication Tests
   - Successful authentication
   - Failed authentication

2. Browser Configuration Tests
   - Fetching available browsers
   - Validating browser configurations

3. Screenshot Generation Tests
   - Successful screenshot generation
   - Error handling for invalid URLs
   - Error handling for invalid browser configurations
   - Error handling for invalid resolutions

4. Rate Limiting Tests
   - Verifying rate limit enforcement (1600 requests per 5 minutes)
   - Rate limit error handling

5. Job Status Tests
   - Polling for job completion
   - Verifying screenshot URLs
   - Error handling for failed jobs

## Notes

- The tests use Vitest and TypeScript
- Rate limiting is implemented to respect BrowserStack's API limits
- Tests include retry logic for transient failures
- Environment variables are loaded from `.env.test`
- Test timeouts are configurable for long-running operations


================================================
File: /components.json
================================================
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "default",
  "rsc": false,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "src/index.css",
    "baseColor": "slate",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  }
}

================================================
File: /eslint.config.js
================================================
import js from "@eslint/js";
import globals from "globals";
import reactHooks from "eslint-plugin-react-hooks";
import reactRefresh from "eslint-plugin-react-refresh";
import tseslint from "typescript-eslint";

export default tseslint.config(
  { ignores: ["dist", "node_modules", "coverage"] },
  {
    extends: [
      js.configs.recommended,
      ...tseslint.configs.recommended,
      ...tseslint.configs.strictTypeChecked,
      ...tseslint.configs.stylisticTypeChecked
    ],
    files: ["**/*.{ts,tsx}"],
    languageOptions: {
      ecmaVersion: 2020,
      globals: {
        ...globals.browser,
        ...globals.es2020,
        React: "readonly"
      },
      parserOptions: {
        project: true,
        tsconfigRootDir: import.meta.dirname,
      },
    },
    plugins: {
      "react-hooks": reactHooks,
      "react-refresh": reactRefresh,
    },
    rules: {
      ...reactHooks.configs.recommended.rules,
      "react-refresh/only-export-components": [
        "warn",
        { allowConstantExport: true },
      ],
      "@typescript-eslint/no-unused-vars": ["warn", { 
        "argsIgnorePattern": "^_",
        "varsIgnorePattern": "^_",
        "destructuredArrayIgnorePattern": "^_"
      }],
      "@typescript-eslint/no-explicit-any": "error",
      "@typescript-eslint/explicit-function-return-type": ["warn", {
        allowExpressions: true,
        allowTypedFunctionExpressions: true
      }],
      "@typescript-eslint/consistent-type-imports": ["warn", {
        prefer: "type-imports",
        fixStyle: "inline-type-imports"
      }],
      "@typescript-eslint/no-floating-promises": "error",
      "@typescript-eslint/no-misused-promises": "error",
      "@typescript-eslint/await-thenable": "error",
      "@typescript-eslint/no-unnecessary-type-assertion": "error",
      "@typescript-eslint/prefer-nullish-coalescing": "warn",
      "@typescript-eslint/prefer-optional-chain": "warn"
    },
  }
);

================================================
File: /index.html
================================================
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>qa-vision-scout</title>
    <meta name="description" content="Lovable Generated Project" />
    <meta name="author" content="Lovable" />
    <meta property="og:image" content="/og-image.png" />
  </head>

  <body>
    <div id="root"></div>
    <script src="https://cdn.gpteng.co/gptengineer.js" type="module"></script>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>

================================================
File: /package.json
================================================
{
  "name": "visualtest",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "test": "cd supabase/functions/browserstack-screenshots && npm run test",
    "build": "tsc",
    "start": "node dist/index.js",
    "build:dev": "vite build --mode development"
  },
  "dependencies": {
    "@hookform/resolvers": "^3.9.1",
    "@radix-ui/react-checkbox": "^1.1.3",
    "@radix-ui/react-collapsible": "^1.1.2",
    "@radix-ui/react-dialog": "^1.1.4",
    "@radix-ui/react-label": "^2.1.1",
    "@radix-ui/react-radio-group": "^1.2.2",
    "@radix-ui/react-scroll-area": "^1.2.2",
    "@radix-ui/react-slot": "^1.1.1",
    "@radix-ui/react-toast": "^1.2.4",
    "@supabase/supabase-js": "^2.47.10",
    "@tanstack/react-query": "^5.62.11",
    "@vitejs/plugin-react-swc": "^3.7.2",
    "class-variance-authority": "^0.7.1",
    "lovable-tagger": "^1.0.19",
    "lucide-react": "^0.469.0",
    "react-hook-form": "^7.54.2",
    "react-router-dom": "^7.1.1",
    "tailwind-merge": "^2.6.0",
    "uuid": "^9.0.0",
    "zod": "^3.24.1"
  },
  "devDependencies": {
    "@types/node": "^18.15.11",
    "@types/node-fetch": "^2.6.12",
    "@types/react": "^19.0.2",
    "@types/react-dom": "^19.0.2",
    "@types/uuid": "^9.0.0",
    "@vitest/coverage-v8": "^1.6.0",
    "autoprefixer": "^10.0.0",
    "cross-env": "^7.0.3",
    "dotenv": "^16.4.7",
    "node-fetch": "^3.3.2",
    "postcss": "^8.0.0",
    "tailwindcss": "^3.0.0",
    "tailwindcss-animate": "^1.0.7",
    "typescript": "^5.0.3",
    "vite": "^5.0.0",
    "vitest": "^1.6.0"
  }
}


================================================
File: /postcss.config.cjs
================================================
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}


================================================
File: /tailwind.config.ts
================================================
import type { Config } from "tailwindcss";

export default {
	darkMode: ["class"],
	content: [
		"./pages/**/*.{ts,tsx}",
		"./components/**/*.{ts,tsx}",
		"./app/**/*.{ts,tsx}",
		"./src/**/*.{ts,tsx}",
	],
	prefix: "",
	theme: {
		container: {
			center: true,
			padding: '2rem',
			screens: {
				'2xl': '1400px'
			}
		},
		extend: {
			colors: {
				border: 'hsl(var(--border))',
				input: 'hsl(var(--input))',
				ring: 'hsl(var(--ring))',
				background: 'hsl(var(--background))',
				foreground: 'hsl(var(--foreground))',
				primary: {
					DEFAULT: 'hsl(var(--primary))',
					foreground: 'hsl(var(--primary-foreground))'
				},
				secondary: {
					DEFAULT: 'hsl(var(--secondary))',
					foreground: 'hsl(var(--secondary-foreground))'
				},
				destructive: {
					DEFAULT: 'hsl(var(--destructive))',
					foreground: 'hsl(var(--destructive-foreground))'
				},
				muted: {
					DEFAULT: 'hsl(var(--muted))',
					foreground: 'hsl(var(--muted-foreground))'
				},
				accent: {
					DEFAULT: 'hsl(var(--accent))',
					foreground: 'hsl(var(--accent-foreground))'
				},
				popover: {
					DEFAULT: 'hsl(var(--popover))',
					foreground: 'hsl(var(--popover-foreground))'
				},
				card: {
					DEFAULT: 'hsl(var(--card))',
					foreground: 'hsl(var(--card-foreground))'
				},
				sidebar: {
					DEFAULT: 'hsl(var(--sidebar-background))',
					foreground: 'hsl(var(--sidebar-foreground))',
					primary: 'hsl(var(--sidebar-primary))',
					'primary-foreground': 'hsl(var(--sidebar-primary-foreground))',
					accent: 'hsl(var(--sidebar-accent))',
					'accent-foreground': 'hsl(var(--sidebar-accent-foreground))',
					border: 'hsl(var(--sidebar-border))',
					ring: 'hsl(var(--sidebar-ring))'
				}
			},
			borderRadius: {
				lg: 'var(--radius)',
				md: 'calc(var(--radius) - 2px)',
				sm: 'calc(var(--radius) - 4px)'
			},
			keyframes: {
				'accordion-down': {
					from: {
						height: '0'
					},
					to: {
						height: 'var(--radix-accordion-content-height)'
					}
				},
				'accordion-up': {
					from: {
						height: 'var(--radix-accordion-content-height)'
					},
					to: {
						height: '0'
					}
				}
			},
			animation: {
				'accordion-down': 'accordion-down 0.2s ease-out',
				'accordion-up': 'accordion-up 0.2s ease-out'
			}
		}
	},
	plugins: [require("tailwindcss-animate")],
} satisfies Config;


================================================
File: /testhub-tracker.md
================================================
# TestHub Project Changes Tracker

## Project State Overview

### Implementation Status

#### Core Infrastructure
- [x] Project initialization with Next.js 14
- [x] TypeScript setup
- [x] Tailwind CSS integration
- [ ] Supabase backend setup
- [x] Environment configuration

#### Authentication & User Management
- [ ] Supabase Auth integration
- [ ] User roles implementation
  - [ ] QA Tester role
  - [ ] Departmental Manager role
  - [ ] Customer Support role
  - [ ] Administrator role
- [ ] Protected routes
- [ ] User profile management

#### Dashboard & UI
- [x] Main dashboard layout
- [x] Navigation system
- [ ] Visualization components
  - [x] Three.js integration
  - [x] D3.js integration
  - [x] P5.js integration
  - [ ] Chart component type system improvements (CHART-001)
- [x] shadcn/ui components integration
- [x] Lucide Icons implementation

#### Core Features
- [ ] Webpage Comparison Module
  - [x] URL input interface
  - [x] Browserstack API integration
    - [x] Screenshot capture API
    - [x] Device configuration API
    - [x] Error handling and retries
    - [x] Rate limiting implementation
    - [x] Type system improvements
  - [ ] Screenshot comparison
  - [ ] AI-powered analysis
- [ ] Device Responsiveness Tester
  - [x] Device configuration interface
  - [ ] Real-time testing implementation
  - [ ] Results visualization
- [ ] Report Generation
  - [ ] PDF export
  - [ ] CSV export
  - [ ] Asana integration

#### Database & API Integration
- [ ] Supabase database schema
- [ ] REST API endpoints
- [x] Browserstack API integration
  - [x] Screenshot capture API
  - [x] Device configuration API
  - [x] Error handling and retries
  - [x] Rate limiting implementation
- [ ] AI model integration (Gemini, Claude, GPT)

#### Testing Implementation
- [x] Vitest setup for unit tests
- [ ] Cypress setup for E2E tests
- [ ] Test coverage reporting
- [ ] CI/CD pipeline

### Current Technical Stack
- Next.js 14 (App Router)
- TypeScript 5.x
- Tailwind CSS
- shadcn/ui & Radix UI
- Lucide Icons
- Three.js
- D3.js
- P5.js
- Supabase
- Browserstack API
- Vitest & Cypress

## Directory Structure
```
src/
├── app/                # Next.js app router pages
├── components/         # React components
│   ├── comparison/    # Webpage comparison components
│   ├── dashboard/     # Dashboard components
│   ├── reports/       # Report generation components
│   └── ui/           # Shared UI components
├── lib/               # Utility functions
├── hooks/             # Custom React hooks
├── styles/            # Global styles
└── types/             # TypeScript definitions
```

## Change Log

### Initial Setup (Completed)
- [x] Repository initialization
- [x] Project documentation created
- [x] Next.js project setup
  - [x] App router configuration
  - [x] TypeScript integration
  - [x] Environment variables setup
- [x] Basic dependency installation
  - [x] Core dependencies (@supabase/supabase-js, etc.)
  - [x] Development tools (Vitest, TypeScript, etc.)
  - [x] Testing frameworks configuration

### Authentication Phase (In Progress)
- [ ] Supabase Auth setup
  - [ ] Authentication providers configuration
  - [ ] User session management
  - [x] Role-based access control structure defined
- [ ] User management implementation
  - [ ] User profile creation
  - [ ] Role assignment
  - [ ] Activity tracking
- [ ] Protected routes implementation
  - [ ] Authentication middleware
  - [ ] Role-based route guards
  - [ ] Redirect handling

### Core Features Phase (In Progress)
- [x] Basic UI Components
  - [x] Navigation sidebar
  - [x] Dashboard layout
  - [x] System status indicators
  - [x] Quick actions menu
  - [x] Chart components (needs type improvements - CHART-001)
- [ ] Comparison module development
  - [x] Basic form structure
  - [x] URL input handling
  - [x] Test results table component
  - [x] Screenshot capture integration
    - [x] Type system improvements
    - [x] Error handling
    - [x] Rate limiting
  - [ ] Visual comparison engine
  - [ ] AI analysis integration
- [ ] Responsiveness tester implementation
  - [x] Basic route setup
  - [x] Device configuration system
  - [ ] Testing workflow
  - [ ] Results visualization

## Next Steps
1. Complete Chart Component Type System (CHART-001)
   - Create proper type hierarchy
   - Implement type guards
   - Add adapter layer
   - Add comprehensive tests

2. Complete BrowserStack Integration
   - [x] Screenshot capture functionality
   - [x] Test results integration
   - [x] Error handling and retries
   - [x] Type-safe mock implementations
   - [ ] Visual comparison engine

3. Implement Component Testing
   - Set up component test structure
   - Create test utilities for UI components
   - Implement visual regression tests
   - Add accessibility tests

4. Complete E2E Testing Setup
   - Install and configure Cypress
   - Create test scenarios
   - Implement page objects
   - Add visual testing capabilities

## Known Issues
1. Environment Setup
   - [x] Test environment variables configured
   - [ ] Production environment setup pending
   - [ ] Secure API key storage needed
   - [x] Test mock utilities properly typed
   - [x] Native fetch types properly configured

2. API Integration
   - [x] BrowserStack rate limiting handled in tests
   - [x] Retry mechanism implemented
   - [x] Error handling improved
   - [x] Type system improvements completed
   - [x] Native fetch implementation completed
   - [ ] Backup service integration pending

3. Testing Requirements
   - [x] Basic test structure implemented
   - [x] BrowserStack API tests complete
   - [x] Mock utilities implemented
   - [x] Test patterns documented
   - [ ] Component tests needed
   - [ ] E2E tests needed

4. Type System Issues
   - [x] Chart component type issues documented (CHART-001)
   - [x] API response types improved
   - [x] Mock type definitions enhanced
   - [ ] Runtime type checks need optimization
   - [ ] Test coverage for type guards needed

## Notes for AI Assistant
- AI Integration Status:
  - [ ] Gemini API setup for visual analysis
  - [ ] Claude AI integration for test interpretation
  - [ ] GPT integration for report generation
  - [x] Basic prompt structure defined

- AI Integration Priorities (Updated):
  1. Set up AI service connections
  2. Implement visual comparison logic
  3. Add test result analysis
  4. Create report generation system

## Testing Status
- [x] Testing framework setup
  - [x] Vitest configuration
  - [x] Test utilities
  - [x] Mock implementations
  - [x] Environment variable handling
  - [x] Native fetch implementation
  - [x] Type-safe mocking utilities

- [x] BrowserStack API testing
  - [x] Unit tests
  - [x] Integration tests
  - [x] Error handling tests
  - [x] Rate limiting tests
  - [x] Type validation tests

- [ ] Integration testing setup
  - [ ] Cypress installation
  - [ ] E2E test structure
  - [x] API mocking utilities
  - [x] Response type handling
  - [x] Mock reset mechanisms

- [ ] Component testing
  - [ ] UI component tests
  - [ ] Form validation tests
  - [ ] State management tests
  - [ ] Type guard tests

- [ ] Performance testing setup
  - [x] Test timeout configuration
  - [x] Response time monitoring
  - [ ] Load testing setup
  - [ ] Memory usage tracking

## Latest Updates
- Fixed type compatibility issues with native fetch API
- Removed node-fetch dependency completely
- Updated global type definitions for fetch
- Improved mock implementations for fetch
- Enhanced test utilities with proper typing
- Standardized Response type usage across codebase
- Updated test setup for better type safety

## CI/CD Pipeline Status
- [ ] GitHub Actions setup
  - [ ] Build workflow
  - [x] Test automation
  - [ ] Deployment pipeline
  - [x] Test coverage reporting

## Documentation Status
- [x] Project requirements
- [x] Technical architecture
- [x] API documentation (BrowserStack)
- [x] Component documentation (Chart component)
- [x] Testing guidelines
- [x] Mock utilities documentation
- [x] Test patterns documentation

## Security Considerations
- [ ] Authentication flow
- [x] API key management in tests
- [x] Rate limiting implementation
- [ ] Data encryption
- [ ] CORS policy

## Performance Monitoring
- [x] Basic system status monitoring
- [x] API performance tracking
- [x] Error tracking
- [ ] User activity monitoring

## Risk Register
1. API Dependencies
   - [x] BrowserStack API rate limiting handled
   - [ ] AI service integration pending
   - [ ] Database scaling needs planning

2. Technical Challenges
   - [x] Basic project structure established
   - [x] Chart component type system documented
   - [ ] Visual comparison implementation pending
   - [ ] Real-time testing coordination needed

3. Integration Risks
   - [ ] Multiple AI service coordination
   - [x] BrowserStack API integration tested
   - [ ] Database integration pending

================================================
File: /tsconfig.app.json
================================================
{
  "compilerOptions": {
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": false,
    "noUnusedLocals": false,
    "noUnusedParameters": false,
    "noImplicitAny": false,
    "noFallthroughCasesInSwitch": false,

    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["src"]
}


================================================
File: /tsconfig.json
================================================
{
  "compilerOptions": {
    "target": "ESNext",
    "module": "ESNext",
    "lib": ["ESNext", "DOM", "DOM.Iterable"],
    "useDefineForClassFields": true,
    "allowJs": true,
    "skipLibCheck": true,
    "esModuleInterop": true,
    "allowSyntheticDefaultImports": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,
    "jsx": "react-jsx",
    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"],
      "@components/*": ["./src/components/*"],
      "@pages/*": ["./src/pages/*"],
      "@hooks/*": ["./src/hooks/*"],
      "@lib/*": ["./src/lib/*"],
      "@assets/*": ["./src/assets/*"],
      "@styles/*": ["./src/styles/*"]
    },
    "types": ["node", "vitest"]
  },
  "include": ["src/**/*.ts", "src/**/*.d.ts", "src/**/*.tsx", "tests/**/*.ts", "tests/**/*.tsx", "**/*.config.ts"],
  "exclude": ["node_modules"]
}

================================================
File: /tsconfig.node.json
================================================
{
  "compilerOptions": {
    "composite": true,
    "skipLibCheck": true,
    "module": "ESNext",
    "moduleResolution": "bundler",
    "allowSyntheticDefaultImports": true,
    "strict": true,
    "noEmit": false,
    "isolatedModules": true,
    "resolveJsonModule": true,
    "esModuleInterop": true,
    "target": "ESNext",
    "lib": ["ESNext"],
    "types": ["node"]
  },
  "include": ["vite.config.ts"]
}

================================================
File: /tsconfig.test.json
================================================
{
  "extends": "./tsconfig.json",
  "compilerOptions": {
    "types": ["vitest", "node"],
    "isolatedModules": false,
    "esModuleInterop": true,
    "module": "commonjs",
    "moduleResolution": "node",
    "target": "es2020",
    "strict": true,
    "skipLibCheck": true,
    "forceConsistentCasingInFileNames": true,
    "resolveJsonModule": true
  },
  "include": [
    "supabase/functions/browserstack-screenshots/**/*.ts"
  ],
  "exclude": [
    "node_modules"
  ]
} 

================================================
File: /vite.config.ts
================================================
import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react-swc';
import path from 'path';
import { componentTagger } from "lovable-tagger";
import type { PluginOption } from 'vite';

export default defineConfig(({ mode }) => ({
  server: {
    port: 8080,
    host: true,
    open: true,
    hmr: {
      overlay: true,
    },
  },
  plugins: [
    react(),
    mode === 'development' && componentTagger(),
  ].filter(Boolean) as PluginOption[],
  resolve: {
    alias: {
      '@': path.resolve(__dirname, './src'),
    }
  },
  build: {
    chunkSizeWarningLimit: 500,
    rollupOptions: {
      output: {
        manualChunks: {
          'vendor': ['react-router-dom'],
        }
      }
    }
  }
}));

================================================
File: /vitest.config.ts
================================================
/// <reference types="vitest" />

export default {
  test: {
    globals: true,
    environment: 'node',
    include: ['**/__tests__/**/*.test.ts'],
    setupFiles: ['./vitest.setup.ts'],
    testTimeout: 30000,
    hookTimeout: 30000
  }
}; 

================================================
File: /vitest.setup.ts
================================================
import { vi } from 'vitest';
import dotenv from 'dotenv';

dotenv.config();

// Mock fetch globally
const mockFetch = vi.fn<Parameters<typeof fetch>, ReturnType<typeof fetch>>();
global.fetch = mockFetch;

export { mockFetch }; 

================================================
File: /.cursorrules
================================================
# Cursor Rules for Project

## Project Overview

Project Name: TestHub

Description: TestHub is an internal web-based tool for the QA department to test new copies of websites. It automates comparison of new webpage designs and functionalities against a baseline version and assesses their responsiveness across various operating systems and devices using the Browserstack API. It provides an intuitive dashboard with data visualization using Three.js, D3.js, and P5.js.

Tech Stack:

*   **Frontend**: Next.js 14 (app router), TypeScript, Tailwind CSS, shadcn/UI, Radix UI, Lucide Icons.
*   **Visualization**: Three.js, D3.js, P5.js.
*   **Backend**: Supabase.
*   **Authentication**: Supabase.
*   **API Integration**: Browserstack SDK API
*   **AI Tools**: Claude AI, ChatGPT, Gemini API (for screenshots visual tests), @antiwork/shortest package for automated testing

Key Features:

*   Compare webpage layout and functions with baseline versions.
*   Evaluate responsiveness using Browserstack API.
*   Intuitive dashboard with enhanced visualization.

## Project Structure

### Root Directory:

Contains main configuration files and documentation.

### /frontend:

Contains all frontend-related code, including components, styles, and assets.

/components:

*   Navbar
*   ComparisonModule
*   DeviceTester
*   Dashboard
*   ReportGenerator

/assets:

*   Icons (Lucide Icons)
*   Images (for UI)

/styles:

*   Tailwind CSS configuration
*   Global stylesheets

### /backend:

Contains all backend-related code, including API routes and database models.

/controllers:

*   ComparisonController
*   ResponsivenessChecker

/models:

*   UserModel
*   TestModel

/routes:

*   ApiRoutes for comparison and responsiveness
*   AuthRoutes for user authentication

### /config:

Configuration files for environment variables and application settings.

### /tests:

Contains unit and integration tests for both frontend and backend.

## Development Guidelines

### Coding Standards:

*   Use TypeScript for typed JavaScript support.
*   Follow Tailwind CSS best practices for styling.
*   Ensure readability and maintainability of code.

### Component Organization:

*   Components to be modular and reusable.
*   Separation of concerns: logic in controllers, views in components.

## Cursor IDE Integration

### Setup Instructions:

1.  Clone the repository.
2.  Navigate to project directory and install dependencies using `npm install`.
3.  Set up environment variables as per the `/config` documentation.
4.  Use Supabase CLI for local database setup.

### Key Commands:

*   `npm run dev`: Run the project in development mode.
*   `npm run build`: Build the project for production.
*   `npm test`: Run all tests.

## Additional Context

### User Roles:

*   **QA Tester**: Can run tests and view results.
*   **Departmental Manager**: Full access, manage schedules and reports.
*   **Customer Support Staff**: Read-only access.
*   **Administrator**: Full platform access.

### Accessibility Considerations:

*   Ensure visualizations are accessible with text alternatives.
*   Consider keyboard navigation and screen reader compatibility in the UI design.

## Testing Best Practices

### API Integration Testing

1. **Native vs Third-Party Fetch**:
   * Prefer native `fetch` over third-party implementations like `node-fetch` when working with modern Node.js
   * Ensure type compatibility between mock implementations and actual API types
   * Remove unnecessary dependencies that duplicate built-in functionality

2. **Mock Implementation**:
   * Create a centralized mock utility file (e.g., `test-utils.ts`)
   * Implement proper type definitions for mock functions
   * Use consistent mock patterns across all test files
   * Avoid setting global mocks in multiple places

3. **Test Structure**:
   * Keep test setup DRY by using shared utilities
   * Use descriptive test names that indicate the scenario being tested
   * Include both happy path and error cases
   * Test rate limiting and error handling scenarios

4. **Async Testing**:
   * Properly handle async/await in test cases
   * Use appropriate timeout values in test configuration
   * Ensure mock implementations resolve promptly
   * Avoid unnecessary Promise chaining

5. **Mock Response Handling**:
   * Create helper functions for generating mock responses
   * Maintain consistent response structures
   * Include all required fields in mock data
   * Use realistic data that matches production scenarios

### Debugging Strategies

1. **Systematic Approach**:
   * Start with type compatibility issues
   * Check for dependency conflicts
   * Verify mock implementations
   * Review test timeouts and configuration

2. **Common Issues to Check**:
   * Type mismatches between mock and actual implementations
   * Missing or incorrect mock reset logic
   * Improper async/await usage
   * Unnecessary dependencies causing conflicts

3. **Performance Considerations**:
   * Remove slow or unnecessary network calls in tests
   * Use appropriate timeout values
   * Implement efficient mock responses
   * Avoid unnecessary file operations during tests

### Code Organization

1. **Test File Structure**:
   * Group related tests together
   * Maintain consistent file naming
   * Keep test files close to implementation files
   * Use clear and consistent import ordering

2. **Mock Organization**:
   * Centralize mock implementations
   * Share common test utilities
   * Maintain type safety in mocks
   * Document mock behavior and requirements

3. **Configuration Management**:
   * Use appropriate test runner configuration
   * Set realistic timeout values
   * Configure coverage reporting
   * Maintain consistent environment variables

### Lessons Learned

1. **What Worked Well**:
   * Centralized mock utilities
   * Proper type definitions
   * Consistent test patterns
   * Clear error handling

2. **What to Avoid**:
   * Multiple global mock assignments
   * Mixing different fetch implementations
   * Unnecessary dependencies
   * Overcomplicated mock setups

3. **Best Practices**:
   * Start with native implementations when available
   * Keep mocks simple and type-safe
   * Maintain consistent patterns across tests
   * Document test requirements and setup


================================================
File: /.env.example
================================================
# BrowserStack Credentials
# Get these from https://www.browserstack.com/accounts/settings
BROWSERSTACK_USERNAME=
BROWSERSTACK_ACCESS_KEY=

# Test Configuration
TEST_URL=https://example.com
TEST_TIMEOUT=120000  # 2 minutes timeout for long-running tests 

================================================
File: /.env.test
================================================
# BrowserStack Credentials
BROWSERSTACK_USERNAME=iakovvolfkovich_F75ojQ
BROWSERSTACK_ACCESS_KEY=HYAZ4DUHsvFrouzKZqyj

# Test Configuration
TEST_URL=https://drsisterskincare.com/products/dark-spot-vanish
TEST_TIMEOUT=120000  # 2 minutes timeout for long-running tests 

================================================
File: /.windsurfrules
================================================
## Windsurf File for Project

## Project Overview

**Project Name:** TestHub

**Description:** TestHub is an internal web-based tool created for the QA department. It is designed to rigorously test new copies of websites by comparing them against a baseline version. It assesses responsiveness across various operating systems and devices using the Browserstack API and offers an intuitive dashboard with data visualization using Three.js, D3.js, and P5.js.

**Tech Stack:**

*   Frontend: Next.js 14 (app router), TypeScript, Tailwind CSS, shadcn/UI, Radix UI, Lucide Icons
*   Backend & Storage: Supabase
*   Additional Libraries: Three.js, D3.js, P5.js
*   API Integration: Browserstack API
*   AI Tools: Optional integration using LLM with visual capabilities

**Key Features:**

*   Automated layout and functional comparison of webpages
*   Real-time responsiveness evaluation across devices and OS
*   Enhanced dashboard visualizations
*   Exportable detailed reports (PDF, CSV)
*   User role management (QA Tester, Manager, Support Staff)

## Project Structure

**Root Directory:**

*   Contains main configuration files and documentation like README.md, .env.example, etc.

**/frontend:**

*   **/components:** Includes components such as `ComparisonModule`, `DeviceTester`, `Dashboard`.
*   **/assets:** Stores images, icons, and potential static content.
*   **/styles:** Includes stylesheets leveraging Tailwind CSS for styling.

**/backend:**

*   **/controllers:** Various logic handlers possibly including `ComparisonController`, `ResponsivenessController`.
*   **/models:** Data models associated with `TestResults`, `UserProfiles`.
*   **/routes:** Route handlers for API endpoints like `compare`, `test`, `user`.

**/config:**

*   Configuration files for environment variables and application settings, e.g., `database.js`, `api.js`.

**/tests:**

*   Contains unit and integration tests for both frontend and backend, likely structured by feature such as `dashboard.test.js`, `api.test.js`.

## Development Guidelines

**Coding Standards:**

*   Use TypeScript for type safety.
*   Adhere to naming conventions and code commenting standards.
*   Maintain clean and organized code by leveraging available UI libraries.

**Component Organization:**

*   Group components by feature to enhance discoverability.
*   Reuse common components across different modules to maintain consistency.

## Windsurf IDE Integration

**Setup Instructions:**

*   Clone the repository.
*   Run `npm install` to set up dependencies.
*   Use `supabase login` for backend authentication setup.
*   Configure `.env` based on the `.env.example`.

**Key Commands:**

*   `npm run dev`: For local development
*   `npm run build`: To build the application
*   `npm run test`: To run tests

## Additional Context

**User Roles:** Define permissions for roles:

*   **QA Tester:** Can run tests and view results.
*   **Departmental Manager:** Can manage schedules, generate reports.
*   **Customer Support Staff:** Read-only access to reports.
*   **Administrator:** Full access and control.

**Accessibility Considerations:**

*   Ensure dashboard accessibility following industry standards for both visually and hearing-impaired users.
*   Potential inclusion of dark mode as an enhancement to improve user comfort.


================================================
File: /Docs/app_flow_document.md
================================================
# Updated App Flow Document for TestHub

## Introduction

TestHub is a sophisticated web-based application designed to enhance the efficiency and effectiveness of Quality Assurance (QA) for web pages within a corporate environment. This application facilitates rigorous testing of new webpage designs by comparing them against baseline versions and assessing their responsiveness across a variety of operating systems and devices using the Browserstack API. TestHub provides a centralized, intuitive platform for QA teams, departmental managers, and customer support staff to manage and analyze web testing processes while minimizing manual efforts and improving output quality through advanced visualization technologies like Three.js, D3.js, and P5.js.

## Onboarding and Sign-In/Sign-Up

Users can access TestHub by navigating to the web application via a URL provided within the corporate intranet or through an external link if allowed. New users will first encounter the sign-up page, where they can create an account provided they have the necessary credentials for corporate authentication, managed via Supabase. Here, they can choose to register using their corporate email, facilitating quick onboarding by connecting their existing work credentials. Once the account is created, or for returning users, the sign-in page allows input of the corporate email and password. If users forget their password, a recovery option sends a reset link to their registered email. After successful login, users are directed to the main dashboard where they can begin utilizing the tool’s features.

## Main Dashboard or Home Page

Upon logging in, users are greeted by the main dashboard, which serves as the central hub for all activities and features. This dashboard is designed with a clean, professional interface utilizing Tailwind CSS for an aesthetically pleasing effect. On the left side, there is a navigation bar enabling easy access to various features like the Comparison Module, Device Responsiveness Tester, and Settings. The central area displays data visualizations created with Three.js, D3.js, and P5.js, showing a quick overview of testing results and reports. Users can find quick links to recent activities, summaries of ongoing tests and results, and a right-side panel for notifications and quick report generation highlighting important tasks.

## Detailed Feature Flows and Page Transitions

### Comparison Module

Users start by inputting static URLs for both the baseline and the new webpage versions they wish to test. They then select the desired test configurations, including combinations of operating systems, devices, and browsers. TestHub employs the Browserstack API to capture screenshots based on these configurations and uses optional AI integration to conduct visual discrepancy analysis. Test results, including highlighted inconsistencies, are made readily available in the module and displayed in detail on the dashboard.

### Device Responsiveness Tester

This feature allows users to initiate real-time assessments of a webpage’s performance across various configurations. Users define a test scenario instead of a single static page screenshot. The system executes the entire test scenario using selected devices via the Browserstack SDK, capturing screenshots of each page. These screenshots are then compared by the Comparison Module in the same manner as single URL comparisons. This setup ensures comprehensive analysis across all pages in a scenario and facilitates the identification of responsiveness issues. Navigating here from the main dashboard is seamless through the navigation bar. Results include performance metrics like page load times and visual confirmation of functional integrity via screenshots. In-depth visualization of device and OS-specific performance helps QA teams pinpoint specific issues with ease.

Following a thorough analysis of the test results, users can choose to export this data in various formats (PDF, CSV) for integration with tools like Asana. Reports can be generated directly from the dashboard, facilitating easy collaboration and task management.

## Settings and Account Management

Within the settings, accessible from the navigation bar, users can manage their personal information, update account preferences, and configure notifications according to their needs. Here, they can also manage access permissions based on their role (e.g., QA Tester, Departmental Manager, Customer Support, or Administrator), allowing for a tailored view of the system capabilities according to their departmental requirements. Administrators can manage user roles and permissions, ensuring the right level of access across the board. Once users are satisfied with their settings, they can easily navigate back to the main dashboard through the navigation bar.

## Error States and Alternate Paths

TestHub offers robust error handling to ensure smooth operations even when encountering issues. If a user inputs invalid URL data or configurations, contextual error messages guide them on making the correct changes. In cases of network disruptions, the application notifies the user and attempts to save their session data, allowing them to resume without data loss once connectivity is restored. Users trying to access restricted features without appropriate permissions will see an informative access-denied message, directing them to the necessary authorization process.

## Conclusion and Overall App Journey

The user journey in TestHub begins with a simple sign-up process, leading them into a powerful, feature-rich dashboard where they can effortlessly conduct detailed webpage testing. Whether comparing layout and function, assessing responsiveness, or generating comprehensive reports, each step seamlessly guides the user toward achieving optimal testing outcomes. The ability to use advanced AI-assisted analysis further enriches this process by detecting nuanced discrepancies that might be missed manually. By facilitating enhanced collaboration through exportable report functionalities and intuitive design, TestHub ensures QA teams can effectively manage and streamline their testing cycles, ultimately delivering superior webpage performance and design integrity before deployment.


================================================
File: /Docs/backend_structure_document.md
================================================
# Backend Structure Documentation

## Overview

The backend of TestHub is built on Supabase, utilizing Edge Functions for serverless compute and PostgreSQL for data storage. This document outlines the structure, patterns, and best practices for the backend implementation.

## Directory Structure

```
/supabase/
├── functions/
│   ├── browserstack-screenshots/
│   │   ├── __tests__/
│   │   │   ├── test-utils.ts
│   │   │   ├── index.test.ts
│   │   │   ├── browserstack-api.test.ts
│   │   │   └── browserstack-api.integration.test.ts
│   │   ├── types.ts
│   │   ├── browserstack-api.ts
│   │   ├── index.ts
│   │   ├── vitest.config.ts
│   │   └── vitest.setup.ts
│   └── other-functions/
├── migrations/
└── seed/
```

## Edge Functions

### BrowserStack Screenshots Function

The BrowserStack screenshots function handles the generation and comparison of website screenshots across different browsers and devices.

#### Key Components:

1. **API Integration (`browserstack-api.ts`)**
   - Handles communication with BrowserStack API
   - Implements request validation and error handling
   - Uses native fetch API for HTTP requests

2. **Type Definitions (`types.ts`)**
   - Defines TypeScript interfaces for requests/responses
   - Includes validation constants and utilities
   - Ensures type safety across the application

3. **Main Handler (`index.ts`)**
   - Processes incoming requests
   - Coordinates with BrowserStack API
   - Returns standardized responses

### Testing Structure

#### 1. Unit Tests
```typescript
// browserstack-api.test.ts
describe('BrowserStack API', () => {
  it('should validate input correctly', () => {
    // Test input validation
  });

  it('should handle API responses', async () => {
    // Test response handling
  });
});
```

#### 2. Integration Tests
```typescript
// browserstack-api.integration.test.ts
describe('BrowserStack API Integration', () => {
  it('should generate screenshots', async () => {
    // Test end-to-end screenshot generation
  });

  it('should handle rate limiting', async () => {
    // Test API rate limiting scenarios
  });
});
```

#### 3. Test Utilities
```typescript
// test-utils.ts
export const mockFetch = {
  fn: vi.fn(defaultMockFetch),
  mockReset() {
    this.fn.mockReset();
    this.fn.mockImplementation(defaultMockFetch);
  }
};
```

## Database Schema

### Tables

1. **screenshots**
   ```sql
   CREATE TABLE screenshots (
     id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
     job_id TEXT NOT NULL,
     url TEXT NOT NULL,
     status TEXT NOT NULL,
     created_at TIMESTAMPTZ DEFAULT NOW(),
     updated_at TIMESTAMPTZ DEFAULT NOW()
   );
   ```

2. **comparison_results**
   ```sql
   CREATE TABLE comparison_results (
     id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
     baseline_id UUID REFERENCES screenshots(id),
     comparison_id UUID REFERENCES screenshots(id),
     difference_score FLOAT,
     created_at TIMESTAMPTZ DEFAULT NOW()
   );
   ```

## API Endpoints

### Screenshot Generation
- **POST** `/browserstack-screenshots`
  ```typescript
  interface Request {
    url: string;
    resolution: ResolutionType;
    browsers: Browser[];
    wait_time?: number;
    quality?: 'compressed' | 'original';
  }
  ```

### Screenshot Comparison
- **POST** `/compare-screenshots`
  ```typescript
  interface Request {
    baselineId: string;
    comparisonId: string;
  }
  ```

## Error Handling

### Standard Error Response
```typescript
interface ErrorResponse {
  error: {
    message: string;
    code: string;
    requestId: string;
    context?: Record<string, unknown>;
  };
}
```

### Error Types
1. **ValidationError**: Input validation failures
2. **APIError**: External API communication issues
3. **RateLimitError**: Rate limiting violations
4. **DatabaseError**: Database operation failures

## Testing Best Practices

### 1. Mock Management
- Use centralized mock utilities
- Reset mocks before each test
- Maintain type safety in mocks
- Use native implementations when available

### 2. Test Organization
- Group related tests together
- Use descriptive test names
- Test both success and error paths
- Include rate limiting scenarios

### 3. Integration Testing
- Test complete API flows
- Verify error handling
- Check response formats
- Validate edge cases

### 4. Performance Testing
- Monitor response times
- Test under load
- Verify resource cleanup
- Check memory usage

## Deployment

### Environment Variables
```bash
BROWSERSTACK_USERNAME=xxx
BROWSERSTACK_ACCESS_KEY=xxx
DATABASE_URL=xxx
```

### Deployment Process
1. Run tests: `npm test`
2. Check coverage: `npm run test:coverage`
3. Build: `npm run build`
4. Deploy: `supabase functions deploy`

## Monitoring

### Metrics to Track
- API response times
- Error rates
- Screenshot generation success rate
- Database query performance

### Logging
- Request/response details
- Error contexts
- Performance metrics
- Rate limiting events

## Security

### API Security
- Authentication required
- Rate limiting enforced
- Input validation
- Secure credential storage

### Data Security
- Encrypted storage
- Access control
- Audit logging
- Regular backups


================================================
File: /Docs/browserstackAPI.md
================================================
# BrowserStack Screenshots API Documentation (2024)

## Overview
The Screenshots API enables automated creation of screenshots for any URL across multiple browsers and operating systems. This API supports cross-browser compatibility testing on desktop browsers and real mobile devices, with specific considerations for AI-based analysis.

## Important Limitations for AI Analysis
Before implementing screenshot analysis with AI, be aware of these limitations:

1. **Content Capture Limitations:**
   - Cannot capture content from iframes from external websites
   - Limited support for shadow-DOM elements
   - Cannot capture canvas elements
   - Cannot capture video sources (e.g., YouTube videos)
   - Limited support for Mapbox and maps

2. **Mobile Screenshot Limitations:**
   - Maximum scroll limit of 10 for full-page screenshots on mobile devices
   - Page height limitations may affect full-page captures

3. **Security Considerations:**
   - Websites with strict Content Security Policy (CSP) may not be captured properly
   - Some dynamic content may not render in screenshots

## Authentication
All API requests require authentication using your BrowserStack username and access key.

```bash
curl -u "username:access_key" https://www.browserstack.com/screenshots
```

**Note:** Unauthorized requests will receive a 401 response.

## API Endpoints

### 1. Get Available Browsers and OS
Lists all available operating systems and browsers for screenshot testing.

**Request:**
- Method: `GET`
- Endpoint: `/screenshots/browsers.json`

**Response Example:**
```json
[
  {
    "os": "Windows",
    "os_version": "10",
    "browser": "chrome",
    "browser_version": "121.0",
    "device": null
  },
  {
    "os": "ios",
    "os_version": "17",
    "browser": "Mobile Safari",
    "browser_version": null,
    "device": "iPhone 15"
  }
]
```

### 2. Generate Screenshots
Creates screenshots for a specified URL across selected browser configurations.

**Request:**
- Method: `POST`
- Endpoint: `/screenshots`
- Content-Type: `application/json`

**Parameters:**

| Parameter | Description | Values/Example |
|-----------|-------------|----------------|
| url | Target webpage URL | www.example.com |
| os | Operating system | Windows, OS X, ios, android |
| os_version | OS version | Example: "10" |
| browser | Browser type | ie, chrome, firefox, safari, opera, Android Browser |
| browser_version | Browser version | Example: "121.0" |
| device | Mobile device name (required for mobile testing) | Example: "iPhone 15" |
| orientation | Screen orientation for mobile devices | portrait, landscape (Default: portrait) |
| mac_res | Screen resolution for OSX | 1024x768, 1280x960, 1280x1024, 1600x1200, 1920x1080 (Default: 1024x768) |
| win_res | Screen resolution for Windows | 1024x768, 1280x1024 (Default: 1024x768) |
| quality | Screenshot quality | Original, Compressed (Default: Compressed) |
| local | Enable local testing connection | true, false (Default: false) |
| wait_time | Wait time before screenshot (seconds) | 2, 5, 10, 15, 20, 60 (Default: 5) |
| callback_url | URL for results notification | Optional |

**Request Example:**
```json
{
  "url": "www.example.com",
  "callback_url": "http://your-callback-url.com",
  "win_res": "1920x1080",
  "quality": "original",
  "wait_time": 10,
  "browsers": [
    {
      "os": "Windows",
      "os_version": "10",
      "browser": "chrome",
      "browser_version": "121.0"
    },
    {
      "os": "ios",
      "os_version": "17",
      "device": "iPhone 15"
    }
  ]
}
```

### 3. Check Screenshot Status
Retrieves the status and details of a screenshot generation job.

**Request:**
- Method: `GET`
- Endpoint: `/screenshots/<JOB-ID>.json`

**Response Example:**
```json
{
  "id": "job_id_here",
  "state": "done",
  "screenshots": [
    {
      "os": "Windows",
      "os_version": "10",
      "browser": "chrome",
      "browser_version": "121.0",
      "id": "screenshot_id_here",
      "state": "done",
      "url": "www.example.com",
      "thumb_url": "https://www.browserstack.com/screenshots/job_id_here/thumb_win10_chrome_121.jpg",
      "image_url": "https://www.browserstack.com/screenshots/job_id_here/win10_chrome_121.png",
      "created_at": "2024-01-30 16:25:45 UTC"
    }
  ]
}
```

## Best Practices for AI Analysis

1. **Image Quality:**
   - Use "Original" quality setting for better AI analysis accuracy
   - Consider higher wait_time (10-15 seconds) for dynamic content to load fully

2. **Resolution Selection:**
   - Use consistent resolutions across tests for comparable results
   - Prefer higher resolutions (e.g., 1920x1080) for desktop screenshots

3. **Error Handling:**
   - Always check the screenshot state before analysis
   - Implement retry logic for failed screenshots
   - Verify image URLs are accessible before processing

4. **Performance Optimization:**
   - Use the callback_url parameter for async processing
   - Batch screenshot requests when possible
   - Cache successful screenshots if reanalysis is needed

## Integration Examples

### Python Example using API Wrapper
```python
from browserstack_screenshots import Screenshots

client = Screenshots('username', 'access_key')

# Generate screenshots
job_id = client.generate_screenshots('http://example.com', {
    'browsers': [
        {'os': 'Windows', 'os_version': '10', 'browser': 'chrome', 'browser_version': '121.0'},
        {'os': 'ios', 'os_version': '17', 'device': 'iPhone 15'}
    ],
    'quality': 'original',
    'wait_time': 10
})

# Get screenshots when complete
screenshots = client.get_screenshots(job_id)
```

### Webhook Handler Example
```python
from flask import Flask, request
import requests

app = Flask(__name__)

@app.route('/browserstack/callback', methods=['POST'])
def handle_screenshots():
    data = request.json
    if data['state'] == 'done':
        for screenshot in data['screenshots']:
            if screenshot['state'] == 'done':
                # Download screenshot for AI analysis
                image_url = screenshot['image_url']
                response = requests.get(image_url)
                # Process image with your AI model
                # analyze_image(response.content)
    return '', 200
```


================================================
File: /Docs/file_structure_document.md
================================================
# File Structure Document for TestHub

## Introduction

A well-organized file structure is essential for the TestHub project to support efficient development and collaborative efforts among team members. It ensures clarity, eases navigation, and facilitates the management of the project's components. TestHub, designed to streamline QA testing of web pages using tools like Browserstack API and AI for automated visual comparisons, requires a structure that accommodates both frontend and backend functionalities along with powerful data visualization and user management.

## Overview of the Tech Stack

TestHub employs a robust tech stack consisting of Next.js 14 for the frontend with a focus on TypeScript for reliability and Tailwind CSS for styling. Visualization is powered by Three.js, D3.js, and P5.js, ensuring that data is effectively communicated through an intuitive interface. The backend leverages Supabase, which manages database interactions, authentication, and storage needs. Integration with Browserstack and potential AI tools like Claude AI and ChatGPT are essential for enhanced testing processes. This tech stack informs the file structure by necessitating directories and files specific to frontend components, backend operations, and integrated services.

## Root Directory Structure

At the root level of the project, you will find several key directories and files that are foundational to the project's organization. The main directories include `src` for source codes, `public` for static assets, and `config` for configuration settings. The root also contains configuration files like `.env` for environment variables, `package.json` for managing dependencies, and a `README.md` file for essential project documentation. These components provide a top-level overview and setup for developers entering the project.

## Frontend File Structure

The frontend part of TestHub is housed within the `src` directory under a `frontend` folder. This includes:

*   a `components` directory for reusable UI components designed using shadcn/UI, Radix UI, and Lucide Icons.
*   a `pages` directory for Next.js routing, containing individual page components that utilize the application router.
*   a `styles` directory where Tailwind CSS is employed for global and component-level styling, following a consistent design language.
*   an `assets` directory for image storage and any static files needed. By segmenting the frontend this way, the project achieves modularity and reusability, allowing developers to easily find and modify components as needed.

## Backend File Structure

In the `src` directory, you will also find a `backend` folder containing the server-side configurations. This is structured into directories for `controllers`, `routes`, `models`, and `services`:

*   `controllers` contain functions handling incoming requests and executing appropriate logic.
*   `routes` define endpoint paths and connect them to controllers.
*   `models` define the database schema using Supabase's tools.
*   `services` host business logic and any integrations such as Browserstack API interactions. This structure supports maintainability and scalability, ensuring backend operations are cleanly separated and logically arranged.

## Configuration and Environment Files

Configuration files located mainly in the `config` directory play a crucial role. They include API keys and settings necessary for service integrations, housed in files such as `browserstack.config.js`. The `.env` file manages sensitive data like environment variables securely. These files are integral in aligning the development environment with production settings, thereby ensuring consistency and security.

## Testing and Documentation Structure

Testing files reside in a `tests` directory, separated into units pertinent to frontend and backend testing, utilizing frameworks compatible with the chosen stack. Comprehensive documentation is maintained in a `docs` directory, detailing usage, setup, and workflow of the tool, supporting quality assurance and knowledge sharing among members of the team.

## Conclusion and Overall Summary

This organized file structure supports TestHub in efficiently handling development and maintenance tasks. It is designed to accommodate the unique blend of frontend visualization and robust backend operations, ensuring clarity and promoting effective collaboration. By adhering to a structure that separates concerns and maintains clean divisions between different functionalities, TestHub distinguishes itself as both a powerful and user-friendly tool.


================================================
File: /Docs/frontend_guidelines_document.md
================================================
### Introduction

TestHub is an internal web-based tool specifically crafted for the QA department. It is designed to streamline the testing of new website designs and functionalities by allowing the seamless comparison of new web page versions against baseline versions. This project aims to enhance the efficiency of website testing processes by providing a centralized platform for management and analysis, dramatically reducing manual efforts and improving the accuracy and quality of outcomes. TestHub emphasizes an intuitive user interface and compelling data visualization using technologies such as Three.js, D3.js, and P5.js.

### Frontend Architecture

The frontend architecture of TestHub is developed using **Next.js 14** with app routing features to offer dynamic and efficient server-side rendering. This enhances the website's speed and performance, making it a versatile choice for the application. **TypeScript** is leveraged for adding static typing, which improves code maintainability and reduces potential runtime errors. The use of **Tailwind CSS** provides a utility-first styling solution that encourages consistency and flexibility in design. UI consistency is further supported by **Shadcn/UI** and **Radix UI** libraries, providing pre-built components for a seamless look and feel. **Lucide Icons** are used for their crisp vector graphics, adding a polished touch to the interface.

### Design Principles

The design of TestHub is governed by principles of usability, accessibility, and responsiveness. Usability is a priority, ensuring the application is intuitive and easy for users of varied technical backgrounds. Features are placed logically to facilitate an effortless user journey. Accessibility is addressed through compliant color contrasts and typographic choices that ensure readability. Responsiveness is achieved through dynamic layouts that adapt seamlessly across devices and screen sizes, allowing users to access TestHub from desktops to smartphones without compromise.

### Styling and Theming

Tailwind CSS forms the crux of the styling methodology in TestHub, opting for utility classes to enforce design uniformity and simplify the process of thematic shifts. We emphasize a clean and professional aesthetic with optional dark mode settings to cater to various user preferences. This theming approach ensures that elements are coherently styled, with a consistent look and feel across all features of the application.

### Component Structure

TestHub follows a component-based architecture, which facilitates the modular building of UI elements. Components are organized by feature and function, encouraging ease of reuse and independent updates. This architecture provides significant maintainability benefits, allowing developers to isolate and enhance individual components without impacting the larger system, thus significantly easing the maintenance burden.

### State Management

Our application utilizes **Context API** for state management. This method allows TestHub to efficiently manage global states across components, facilitating a seamless data-sharing mechanism within the app. This approach ensures that the user interface remains responsive and reflects real-time data changes, crucial for a dynamic testing environment.

### Routing and Navigation

Navigation within TestHub is empowered by Next.js' app routing system. This integral feature allows for dynamic page rendering and intelligent resource loading, ensuring users experience fast transition and access to different parts of the application. Routes are designed to be user-friendly, reflecting the logical workflow of testing and analysis operations within the platform.

### Performance Optimization

Performance in TestHub is optimized through several strategies, including lazy loading of components and data, code splitting to reduce initial load times, and the use of server-side rendering to ensure swift data processing. By optimizing asset delivery and minimizing data retrieval times, we aim to provide users with a smooth and efficient operational experience.

### Testing and Quality Assurance

For the frontend, TestHub incorporates a robust testing strategy using tools such as Vitest for unit tests and Cypress for end-to-end testing. These tools ensure our components and overall system operate as expected under various scenarios. Continuous testing throughout the development cycle aids in identifying defects early, maintaining high-quality code standards, and ensuring reliability in production.

### Conclusion and Overall Frontend Summary

In summary, the frontend of TestHub is designed with a meticulous focus on performance, usability, and flexibility, aligning closely with our project goals to streamline and enhance the website testing process for QA teams. The use of sophisticated visualization techniques, a coherent component architecture, and robust state management allows TestHub to stand out as a modern solution designed to significantly optimize QA workflows and outcomes, setting a new standard in the realm of website testing tools.


================================================
File: /Docs/project_requirements_document.md
================================================
# Project Requirements Document (PRD) for TestHub

## 1. Project Overview

TestHub is an internal, web-based tool designed specifically for the QA department to facilitate the thorough testing of new website designs and functionalities. Aimed at streamlining website testing procedures, TestHub enables users to compare new webpage versions against baseline models and assess their responsiveness across a wide array of devices and operating systems. This is achieved through the integration of the Browserstack API to take screenshots of baseline and new website, optimizing the evaluation process by automating it and ensuring that any discrepancies in layout, functionality, and visual consistency are readily apparent.

Built with the intent to enhance efficiency in webpage testing, TestHub's primary goal is to reduce manual effort while improving output quality by providing a centralized platform for test management and analysis. Success is defined by the tool's ability to deliver detailed, high-quality visualizations on an intuitive dashboard, thereby increasing the speed and accuracy of testing cycles. This empowers QA teams to detect and address design inconsistencies swiftly before deployment, enriching the overall user experience across various platforms.

## 2. In-Scope vs. Out-of-Scope

### In-Scope:

*   **Webpage Comparison**: Automating the comparison between new and baseline webpages screenshots using user-provided URLs.
*   **Responsiveness Testing**: Evaluating webpage performance across various OS, devices, and resolutions using the Browserstack API.
*   **Dashboard Visualization**: Presenting test results through an interactive dashboard with data visualization tools like Three.js, D3.js, and P5.js.
*   **AI-Assisted Analysis**: Leveraging AI models to enhance the accuracy of visual comparisons by detecting discrepancies.
*   **Reporting**: Ability to export detailed test reports in clipboard, PDF and CSV formats, with direct export functionality to Asana.
*   **User Roles and Permissions**: Roles including QA Tester, Departmental Manager, Customer Support Staff, and Administrator with varying levels of access.

### Out-of-Scope:

*   **Advanced Reporting Features**: Integration with further project management tools beyond Asana.

## 3. User Flow

When a new user logs into TestHub, they are greeted by a user-friendly dashboard. Initially, users provide URLs for both the baseline and new webpage versions they wish to compare. They select configurations such as operating systems, devices, and browsers, needed for testing. The platform then triggers the Browserstack API to capture screenshots following those configurations.\
\
The AI comparing screenshots and gets results.

Results from these automated tests populate on the dashboard, visually enhanced via Three.js, D3.js, and P5.js libraries, making data easy to consume. Users have the option to export these findings into detailed reports, either in PDF or CSV formats, suitable for integration with tools like Asana for project management. The dashboard facilitates quick navigation with a streamlined interface, allowing users to switch between responsiveness results, visual comparison analysis, and test reports with ease.

## 4. Core Features

*   **Authentication and User Management**: Managed through Supabase.
*   **Webpage Comparison Module**: Automatic detection of discrepancies in page layout, design, and functional elements.
*   **Device Responsiveness Tester**: Real-time assessment of webpages across chosen configurations using Browserstack API.
*   **Interactive Dashboard**: Central hub for visualization of testing data, integrated with advanced tools like Three.js, D3.js, and P5.js.
*   **Exportable Reports**: Generate PDFs and CSVs to share findings, with built-in functionality for Asana integration.
*   **AI Integration**: Integration of AI for automated visual comparisons to enhance detection accuracy, using latest Gemini vision models.

## 5. Tech Stack & Tools

*   **Frontend**: Frontend: To ensure compatibility with lovable designs, we'll be using frameworks and libraries that support high levels of customization and user interaction. Additionally, focus will be on creating fluid animations and a responsive interface..
*   **Visualization Tools**: Three.js, D3.js, P5.js for enhanced data visualization.
*   **Backend & Storage**: Supabase is used for both database management and authentication.
*   **API**: Integration with Browserstack API for real-time responsiveness testing.
*   **AI Models**: Inclusion of tools like Gemini, Claude AI and ChatGPT o1 for advanced functionalities.

## 6. Non-Functional Requirements

*   **Performance**: Fast response and load times for testing results display on the dashboard.
*   **Security**: Ensuring all user data and webpages screenshots are securely managed and backed through robust authentication practices of Supabase.
*   **Usability**: A clean, professional user interface that facilitates user-centric design principles.

## 7. Constraints & Assumptions

*   **Availability**: Reliance on Browserstack API implies dependence on its service availability.
*   **AI Integration**: Subject to the robustness and accuracy of the chosen AI models.
*   **Data Management**: Handling of sensitive data in a secure environment per standard industry practice.

## 8. Known Issues & Potential Pitfalls

*   **API Limitations**: Potential rate limits of Browserstack API might affect testing frequency.
*   **Visualization Complexity**: Complex data visualizations might require significant processing power, affecting performance.
*   **AI Discrepancies**: Dependence on AI for detecting visual inconsistencies may occasionally result in false positives or missed irregularities. Ensuring a balance between manual and automated checks would be prudent.

This PRD is crafted to ensure clarity and precision, laying a firm foundation for all further technical documentation. Every element is tailored to ensure no room for guesswork, hence enabling the seamless generation of consequent documents.


================================================
File: /Docs/system_prompts_document.md
================================================
### Introduction

System prompts are essential in guiding the behavior and interactions of AI within the TestHub application. These prompts dictate how the AI responds in various scenarios, ensuring it aligns with user needs and application goals. The application, TestHub, is designed to streamline the process of comparing new webpage designs against baseline versions and assessing their responsiveness. By integrating AI for automated visual comparisons, the platform aims to enhance the efficiency and accuracy of quality assurance processes for websites.

### Purpose of System Prompts

System prompts in TestHub are designed to shape how AI responds to user interactions. They ensure the AI can efficiently perform tasks such as visual comparison, error detection, and responding to user queries. The clarity and specificity of these prompts are critical; they guide the AI to provide the most accurate and helpful responses to the QA teams using the tool. By setting clear expectations through well-crafted prompts, users can trust the AI to support their testing needs effectively.

### Prompt Structure and Guidelines

The prompts in TestHub should be structured to be clear, concise, and directly related to the AI’s tasks. This involves using straightforward language and specifying the context for each prompt so that the AI can understand and execute its role with precision. Prompts should cover potential user inputs and expected outcomes, enabling the AI to handle a wide range of scenarios effectively.

### Core System Prompts

Core system prompts in the application involve tasks such as initiating webpage comparisons, analyzing visual discrepancies, and generating reports. For example, a prompt may direct the AI to "compare the visual layout of these two webpage versions," expecting the AI to identify and report any differences in design elements. Another core prompt might instruct the AI to "generate a test report and export as PDF," which triggers the AI to collate testing data and format it appropriately.

### Role-Specific Prompts

Role-specific prompts cater to the different user roles within TestHub, such as QA testers, departmental managers, customer support staff, and administrators. For instance, a prompt for a QA tester might focus on performing detailed analysis, while a prompt for a manager could involve summarizing findings for reporting purposes. These tailored prompts ensure that each user receives the support they need based on their role within the application.

### Dynamic Prompts

Dynamic prompts in TestHub adjust based on user inputs and the context of interactions. For example, as users upload different webpage versions for testing, the AI receives prompts to adapt its comparison criteria and focus areas accordingly. The logic behind these dynamic prompts ensures that the AI remains relevant and accurate, responding intelligently to variations in user scenarios.

### Error Handling Prompts

Error handling prompts are crucial for maintaining a smooth user experience when issues arise. These prompts guide the AI to provide helpful feedback when discrepancies or errors are detected, such as "Please re-check the URL provided," or "The chosen device configuration is temporarily unavailable." By offering clear error messages and potential solutions, these prompts help users address problems efficiently.

### Feedback and Improvement

User feedback plays a vital role in the continuous improvement of system prompts. The TestHub platform encourages users to provide feedback on the AI's interactions, pinpointing areas for enhancement. This feedback is then analyzed and used to refine the prompts, ensuring they remain effective and aligned with user needs over time.

### Conclusion and Overall Summary

The design of system prompts in TestHub is integral to shaping intelligent AI interactions that enhance user experience. By providing clear, role-specific, and dynamic prompts, the AI can deliver valuable assistance to QA teams, improving the efficiency and accuracy of webpage testing processes. The focus on precise and responsive prompts differentiates TestHub, making it a robust tool for quality assurance. Through continuous feedback and prompt refinement, the application remains adaptive to evolving user demands.


================================================
File: /Docs/tech_stack_document.md
================================================
# Technology Stack Documentation

## Frontend

- **Framework**: Next.js 14 (app router)
- **Language**: TypeScript
- **Styling**: Tailwind CSS
- **UI Components**: shadcn/UI, Radix UI
- **Icons**: Lucide Icons
- **Data Visualization**: Three.js, D3.js, P5.js

## Backend

- **Platform**: Supabase
- **Functions**: Edge Functions (TypeScript)
- **Database**: PostgreSQL (via Supabase)
- **Authentication**: Supabase Auth

## Testing

### Framework
- **Test Runner**: Vitest
- **Coverage**: @vitest/coverage-v8
- **Mocking**: Vitest's built-in mocking capabilities
- **Environment**: Node.js with native fetch API

### Testing Types
- **Unit Tests**: Component and function level testing
- **Integration Tests**: API endpoint testing
- **Visual Tests**: BrowserStack screenshot comparison
- **E2E Tests**: Cypress for critical user flows

### Testing Tools
- **API Testing**: Native fetch with TypeScript
- **Visual Testing**: BrowserStack Screenshots API
- **AI-Powered Testing**: Claude AI, ChatGPT, Gemini API
- **Automated Testing**: @antiwork/shortest package

## API Integration

- **BrowserStack API**: Screenshot and browser testing
- **Supabase API**: Database and authentication
- **OpenAI API**: AI-powered testing assistance
- **Gemini API**: Visual comparison and analysis

## Development Tools

- **IDE**: Cursor (with AI assistance)
- **Version Control**: Git
- **Package Manager**: npm
- **Build Tool**: Vite
- **Linting**: ESLint with TypeScript rules
- **Formatting**: Prettier

## Infrastructure

- **Hosting**: Vercel (Frontend)
- **Database**: Supabase (PostgreSQL)
- **Functions**: Supabase Edge Functions
- **Storage**: Supabase Storage
- **CDN**: Vercel Edge Network

## Development Environment

- **Node.js**: v18+ (for native fetch support)
- **TypeScript**: v5.0+
- **npm**: v8+
- **Git**: v2.3+

## Quality Assurance

### Testing Coverage Requirements
- Unit Tests: 80% minimum
- Integration Tests: 100% for critical paths
- Visual Tests: All key UI components
- E2E Tests: Critical user flows

### Performance Targets
- Lighthouse Score: 90+ all categories
- Core Web Vitals: Pass all metrics
- API Response Time: <500ms
- Test Execution Time: <5 minutes for full suite

### Code Quality Standards
- TypeScript strict mode enabled
- ESLint configuration enforced
- Prettier formatting required
- Sonar quality gate passing

## Documentation

- **API**: OpenAPI/Swagger
- **Components**: Storybook
- **Code**: TSDoc/JSDoc
- **Testing**: Comprehensive test documentation
- **Architecture**: System design documents


================================================
File: /Docs/testing_framework.md
================================================
# Testing Framework Documentation

## Overview

This document outlines the testing framework and best practices for the TestHub project. It covers unit testing, integration testing, and API testing approaches, with a focus on BrowserStack API integration testing.

## Testing Stack

- **Test Runner**: Vitest
- **Coverage Tool**: @vitest/coverage-v8
- **Mocking Library**: Vitest's built-in mocking capabilities
- **Environment**: Node.js with native fetch API
- **Additional Tools**: TypeScript for type safety

## Directory Structure

```
/supabase/functions/browserstack-screenshots/
├── __tests__/
│   ├── test-utils.ts          # Shared test utilities and mocks
│   ├── index.test.ts          # Main function tests
│   ├── browserstack-api.test.ts    # API unit tests
│   └── browserstack-api.integration.test.ts  # API integration tests
├── vitest.config.ts           # Test configuration
└── vitest.setup.ts           # Test setup and global mocks
```

## Test Utilities

### Mock Implementation (`test-utils.ts`)

```typescript
// Example of centralized mock utilities
export const mockFetch = {
  fn: vi.fn(defaultMockFetch),
  mockReset() {
    this.fn.mockReset();
    this.fn.mockImplementation(defaultMockFetch);
  },
  mockResolvedValueOnce(value: Response) {
    return this.fn.mockResolvedValueOnce(value);
  }
};

export function createMockResponse(status: number, data: unknown): Response {
  return new Response(JSON.stringify(data), {
    status,
    headers: { 'Content-Type': 'application/json' }
  });
}
```

## Testing Patterns

### API Integration Tests

1. **Request Mocking**
```typescript
// Example of mocking API requests
it('should generate screenshots successfully', async () => {
  const browsersMock = {
    browsers: [{
      os: 'Windows',
      os_version: '10',
      browser: 'chrome',
      browser_version: '117.0',
      device: null
    }]
  };

  mockFetch.fn.mockImplementation(async () => 
    createMockResponse(200, browsersMock)
  );

  const result = await generateScreenshots(validInput, credentials);
  expect(result.job_id).toBeTruthy();
});
```

2. **Error Handling**
```typescript
it('should handle rate limiting', async () => {
  mockFetch.fn.mockImplementation(async () => 
    createMockResponse(429, { message: 'Rate limit exceeded' })
  );

  await expect(
    generateScreenshots(validInput, credentials)
  ).rejects.toThrow('Rate limit exceeded');
});
```

## Best Practices

### 1. Mock Implementation
- Use centralized mock utilities
- Maintain type safety in mocks
- Avoid global mock assignments
- Use native implementations when available

### 2. Test Structure
- Group related tests together
- Use descriptive test names
- Include both success and error cases
- Test edge cases and rate limiting

### 3. Async Testing
- Properly handle async/await
- Set appropriate timeout values
- Ensure efficient mock responses
- Avoid unnecessary Promise chaining

### 4. Type Safety
- Ensure compatibility between mocks and actual implementations
- Use TypeScript for better type checking
- Maintain proper type definitions for all test utilities

## Configuration

### Vitest Configuration
```typescript
// vitest.config.ts
export default defineConfig({
  test: {
    globals: true,
    environment: 'node',
    setupFiles: ['./vitest.setup.ts'],
    include: ['**/*.test.ts'],
    coverage: {
      provider: 'v8',
      reporter: ['text', 'json', 'html']
    },
    testTimeout: 60000,
    hookTimeout: 60000
  }
});
```

### Test Setup
```typescript
// vitest.setup.ts
import { mockFetch } from './__tests__/test-utils.js';

// Set up global fetch mock
global.fetch = mockFetch.fn;

// Reset mocks before each test
beforeEach(() => {
  vi.resetAllMocks();
  global.fetch = mockFetch.fn;
});
```

## Common Issues and Solutions

1. **Type Mismatches**
   - Problem: Incompatibility between mock and actual implementations
   - Solution: Use native fetch types and proper type definitions

2. **Test Timeouts**
   - Problem: Long-running tests causing timeouts
   - Solution: Configure appropriate timeout values and optimize mock responses

3. **Mock Reset Issues**
   - Problem: State bleeding between tests
   - Solution: Properly reset mocks in beforeEach hooks

## Coverage Requirements

- Minimum coverage: 80%
- Critical paths: 100%
- Integration tests: Key API endpoints must be covered
- Error scenarios: All error handling must be tested

## Running Tests

```bash
# Run all tests
npm test

# Run tests with coverage
npm run test:coverage

# Run tests in watch mode
npm run test:watch
```

## Contributing

When adding new tests:
1. Follow the established patterns
2. Maintain proper type safety
3. Add appropriate documentation
4. Ensure all tests are properly isolated
5. Include both success and error cases 

================================================
File: /Docs/browserstack/api-endpoints.md
================================================
# BrowserStack API Endpoints

## REST API v4
Base URL: `https://api.browserstack.com/5`

### Available Browsers
`GET /browsers`
Returns list of available browsers

### Create Worker
`POST /worker`
Creates a new browser worker

### Get Worker Status
`GET /worker/:id`
Returns status of specific worker

### Terminate Worker
`DELETE /worker/:id`
Terminates an active worker

### Take Screenshot
`GET /worker/:id/screenshot`
Takes screenshot of current worker state

================================================
File: /Docs/browserstack/api-objects.md
================================================
# BrowserStack API Objects

## Browser Objects
A browser object is a plain object with the following properties:
- `os`: The operating system
- `os_version`: The operating system version
- `browser`: The browser name
- `browser_version`: The browser version
- `device`: The device name

## Worker Objects
Worker objects extend browser objects with:
- `id`: The worker id
- `status`: Current status ("running" or "queue")

## Project Objects
Project objects contain:
- `id`: Project id
- `name`: Project name
- `created_at`: Creation timestamp
- `updated_at`: Last update timestamp
- `user_id`: User ID
- `group_id`: Group ID

================================================
File: /Docs/browserstack/installation.md
================================================
# BrowserStack Installation

## Installation via npm

```bash
npm install browserstack
```

## Basic Usage

```javascript
const BrowserStack = require("browserstack");
const browserStackCredentials = {
  username: "foo",
  password: "p455w0rd!!1"
};

// REST API
const client = BrowserStack.createClient(browserStackCredentials);

client.getBrowsers(function(error, browsers) {
  console.log("The following browsers are available for testing");
  console.log(browsers);
});
```

================================================
File: /Docs/browserstack-api/error-handling.md
================================================
# Error Handling

All requests are pre-processed and validated. Errors are returned in a consistent format:

```json
{
  "message": "Validation Failed",
  "errors": [
    {
      "field": "type",
      "code": "required"
    }
  ]
}
```

Possible error codes:
- `required`
- `invalid`

================================================
File: /Docs/browserstack-api/http-verbs.md
================================================
# HTTP Verbs

The API uses standard HTTP verbs for operations:

- `HEAD`: Assess resource status
- `GET`: Retrieve resources
- `POST`: Create resources
- `PUT`: Update resources
- `DELETE`: Delete resources

================================================
File: /Docs/browserstack-api/overview.md
================================================
# BrowserStack API Overview

The BrowserStack API provides browser-as-a-service for automated cross-browser testing. It offers a simple service that can be integrated with any browser testing framework.

## Authentication
All methods require authentication using your username and BrowserStack access key within the HTTP request.

Example:
```shell
curl -u "username:access_key" https://api.browserstack.com/5
```

## Schema
All requests are made to `https://api.browserstack.com/VERSION/` and return JSON-formatted data.

================================================
File: /Docs/tasks/CHART-001.md
================================================
# CHART-001: Improve Chart Component Type System

## Overview
The chart component currently has several type-related issues that need to be addressed to improve type safety and maintainability.

## Current Issues

### 1. Type Mismatches with Recharts
- NameType can be string | number, but our component primarily handles strings
- DataKey can be string | number | function, but we expect string | number
- LegendType has more variants than we currently support
- **In Progress**: Incompatibility between Recharts' Payload type and our ChartPayloadItem type
  - Recharts expects `type: "none" | undefined`
  - Our component needs to support full `LegendType` range
  - Type system improvements started with BrowserStack API integration as template

### 2. Payload Type Complexity
- Recharts Payload type is generic and more complex than our usage
- Need to handle both tooltip and legend payload types
- Custom properties like 'color' need to be properly typed
- Need to handle type coercion safely

### 3. Formatter Function Types
- Different components expect different formatter signatures
- Need to handle both simple and complex formatting cases

## Required Changes

### 1. Type Hierarchy
- [x] Create base interface for chart data (template from BrowserStack API)
- [ ] Create specialized interfaces for different chart types
- [ ] Add proper generic constraints
- [ ] Document type hierarchy
- [ ] Create proper type mapping between Recharts and our types

### 2. Type Guards
- [x] Implement comprehensive type guards for all payload variations
- [x] Add runtime validation for complex types
- [ ] Create utility functions for type checking
- [ ] Add validation for LegendType variations

### 3. Adapter Layer
- [x] Create adapter functions for API integration (BrowserStack example)
- [x] Handle type conversions safely
- [x] Add error handling for type mismatches
- [ ] Implement proper type coercion for LegendType

### 4. Testing
- [ ] Add unit tests for type guards
- [ ] Add integration tests for chart components
- [ ] Test edge cases and error handling
- [ ] Add specific tests for type coercion

## Implementation Plan

1. Phase 1: Type Definition
   - Create new type hierarchy
   - Document type relationships
   - Add JSDoc comments
   - Create proper type mappings

2. Phase 2: Runtime Safety
   - Implement type guards
   - Add validation functions
   - Create adapter layer
   - Handle type coercion

3. Phase 3: Testing
   - Add unit tests
   - Add integration tests
   - Document test cases
   - Test type coercion

4. Phase 4: Migration
   - Update existing components
   - Fix type errors
   - Update documentation
   - Remove type assertions

## Dependencies
- Recharts version: ^2.0.0
- TypeScript version: ^4.9.0

## Notes
- Breaking changes may be required
- Need to maintain backward compatibility where possible
- Consider performance impact of runtime checks
- Type system improvements template established with BrowserStack API integration
- Need to properly handle LegendType variations
- Consider creating a custom type system for chart payloads 

================================================
File: /src/App.css
================================================
#root {
  margin: 0 auto;
  text-align: center;
}

.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}
.logo:hover {
  filter: drop-shadow(0 0 2em #646cffaa);
}
.logo.react:hover {
  filter: drop-shadow(0 0 2em #61dafbaa);
}

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

.card {
  padding: 2em;
}

.read-the-docs {
  color: #888;
}

================================================
File: /src/App.tsx
================================================
import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';
import Index from './pages/Index';
import Comparison from './pages/Comparison';
import Settings from './pages/Settings';
import { Toaster } from "@/components/ui/toaster";

function App() {
  return (
    <Router>
      <div className="min-h-screen bg-background">
        <Routes>
          <Route path="/" element={<Index />} />
          <Route path="/comparison" element={<Comparison />} />
          <Route path="/settings" element={<Settings />} />
        </Routes>
        <Toaster />
      </div>
    </Router>
  );
}

export default App;

================================================
File: /src/index.css
================================================
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 222.2 84% 4.9%;

    --card: 0 0% 100%;
    --card-foreground: 222.2 84% 4.9%;

    --popover: 0 0% 100%;
    --popover-foreground: 222.2 84% 4.9%;

    --primary: 222.2 47.4% 11.2%;
    --primary-foreground: 210 40% 98%;

    --secondary: 210 40% 96.1%;
    --secondary-foreground: 222.2 47.4% 11.2%;

    --muted: 210 40% 96.1%;
    --muted-foreground: 215.4 16.3% 46.9%;

    --accent: 210 40% 96.1%;
    --accent-foreground: 222.2 47.4% 11.2%;

    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 210 40% 98%;

    --border: 214.3 31.8% 91.4%;
    --input: 214.3 31.8% 91.4%;
    --ring: 222.2 84% 4.9%;

    --radius: 0.5rem;

    --sidebar-background: 0 0% 98%;
    --sidebar-foreground: 240 5.3% 26.1%;
    --sidebar-primary: 240 5.9% 10%;
    --sidebar-primary-foreground: 0 0% 98%;
    --sidebar-accent: 240 4.8% 95.9%;
    --sidebar-accent-foreground: 240 5.9% 10%;
    --sidebar-border: 220 13% 91%;
    --sidebar-ring: 217.2 91.2% 59.8%;
  }

  .dark {
    --background: 222.2 84% 4.9%;
    --foreground: 210 40% 98%;

    --card: 222.2 84% 4.9%;
    --card-foreground: 210 40% 98%;

    --popover: 222.2 84% 4.9%;
    --popover-foreground: 210 40% 98%;

    --primary: 210 40% 98%;
    --primary-foreground: 222.2 47.4% 11.2%;

    --secondary: 217.2 32.6% 17.5%;
    --secondary-foreground: 210 40% 98%;

    --muted: 217.2 32.6% 17.5%;
    --muted-foreground: 215 20.2% 65.1%;

    --accent: 217.2 32.6% 17.5%;
    --accent-foreground: 210 40% 98%;

    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 210 40% 98%;

    --border: 217.2 32.6% 17.5%;
    --input: 217.2 32.6% 17.5%;
    --ring: 212.7 26.8% 83.9%;
    --sidebar-background: 240 5.9% 10%;
    --sidebar-foreground: 240 4.8% 95.9%;
    --sidebar-primary: 224.3 76.3% 48%;
    --sidebar-primary-foreground: 0 0% 100%;
    --sidebar-accent: 240 3.7% 15.9%;
    --sidebar-accent-foreground: 240 4.8% 95.9%;
    --sidebar-border: 240 3.7% 15.9%;
    --sidebar-ring: 217.2 91.2% 59.8%;
  }
}

@layer base {
  * {
    @apply border-border;
  }

  body {
    @apply bg-background text-foreground;
  }
}

================================================
File: /src/main.tsx
================================================
import { StrictMode } from 'react';
import { createRoot } from 'react-dom/client';
import { QueryClient, QueryClientProvider } from '@tanstack/react-query';
import App from './App';
import './index.css';

const queryClient = new QueryClient({
  defaultOptions: {
    queries: {
      staleTime: 1000 * 60 * 5, // 5 minutes
      retry: 1,
    },
  },
});

const rootElement = document.getElementById('root');
if (!rootElement) throw new Error('Failed to find the root element');

createRoot(rootElement).render(
  <StrictMode>
    <QueryClientProvider client={queryClient}>
      <App />
    </QueryClientProvider>
  </StrictMode>
);

================================================
File: /src/vite-env.d.ts
================================================
/// <reference types="vite/client" />


================================================
File: /src/vite.config.ts
================================================
import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react-swc';
import path from 'path';
import { componentTagger } from "lovable-tagger";
import type { Plugin, PluginOption } from 'vite';

export default defineConfig(({ mode }) => ({
  server: {
    host: "::",
    port: 8080,
  },
  plugins: [
    react(),
    mode === 'development' && componentTagger(),
  ].filter(Boolean) as PluginOption[],
  resolve: {
    alias: {
      "@": path.resolve(__dirname, "./src"),
    },
  },
  build: {
    rollupOptions: {
      external: ['react-router-dom'],
      output: {
        globals: {
          'react-router-dom': 'ReactRouterDOM'
        }
      }
    }
  }
}));

================================================
File: /src/components/comparison/ComparisonForm.tsx
================================================
import { useState, useEffect } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Loader2 } from "lucide-react";
import { useToast } from "@/hooks/use-toast";
import { supabase } from "@/integrations/supabase/client";
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { UrlInputs } from "./UrlInputs";
import { ConfigSelection } from "./ConfigSelection";

interface ComparisonFormProps {
  onTestCreated: () => void;
  initialBaselineUrl?: string;
  initialNewUrl?: string;
}

export const ComparisonForm = ({ 
  onTestCreated, 
  initialBaselineUrl = "", 
  initialNewUrl = "" 
}: ComparisonFormProps) => {
  const [baselineUrl, setBaselineUrl] = useState(initialBaselineUrl);
  const [newUrl, setNewUrl] = useState(initialNewUrl);
  const [selectedConfigs, setSelectedConfigs] = useState<string[]>([]);
  const { toast } = useToast();
  const queryClient = useQueryClient();

  useEffect(() => {
    setBaselineUrl(initialBaselineUrl);
    setNewUrl(initialNewUrl);
  }, [initialBaselineUrl, initialNewUrl]);

  const toggleConfig = (configId: string) => {
    setSelectedConfigs(prev => 
      prev.includes(configId) 
        ? prev.filter(id => id !== configId)
        : [...prev, configId]
    );
  };

  const createTest = useMutation({
    mutationFn: async () => {
      try {
        // First create the test record
        const { data: test, error: testError } = await supabase
          .from('comparison_tests')
          .insert({
            baseline_url: baselineUrl,
            new_url: newUrl,
            user_id: '00000000-0000-0000-0000-000000000000', // This should be replaced with actual user ID
            status: 'pending'
          })
          .select()
          .single();

        if (testError) {
          console.error("Error creating test:", testError);
          throw new Error(testError.message);
        }

        if (!test) {
          throw new Error('Failed to create test record');
        }

        // Get the selected configurations
        const { data: configs, error: configError } = await supabase
          .from('browserstack_configs')
          .select('*')
          .in('id', selectedConfigs);

        if (configError) {
          console.error("Error fetching configs:", configError);
          throw new Error('Failed to fetch configurations');
        }

        if (!configs || configs.length === 0) {
          throw new Error('No configurations found');
        }

        // Generate screenshots
        const { error: screenshotError } = await supabase.functions
          .invoke('browserstack-screenshots', {
            body: {
              testId: test.id,
              url: baselineUrl,
              selected_configs: configs
            },
          });

        if (screenshotError) {
          console.error("Screenshot generation error:", screenshotError);
          throw new Error('Failed to generate screenshots');
        }

        return test;
      } catch (error) {
        console.error("Error in createTest:", error);
        throw error;
      }
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['comparison-tests'] });
      toast({
        title: "Test created",
        description: "Your comparison test has been created and screenshots are being generated.",
      });
      onTestCreated();
      setBaselineUrl("");
      setNewUrl("");
      setSelectedConfigs([]);
    },
    onError: (error: Error) => {
      toast({
        title: "Error",
        description: error.message || "Failed to create comparison test. Please try again.",
        variant: "destructive",
      });
      console.error("Error creating test:", error);
    }
  });

  const handleCompare = () => {
    // Validate URLs
    if (!baselineUrl || !newUrl) {
      toast({
        title: "Validation Error",
        description: "Please provide both baseline and new URLs.",
        variant: "destructive",
      });
      return;
    }

    // Validate URL format
    try {
      new URL(baselineUrl);
      new URL(newUrl);
    } catch (error) {
      toast({
        title: "Invalid URL",
        description: "Please enter valid URLs for both baseline and new versions.",
        variant: "destructive",
      });
      return;
    }

    // Validate configurations
    if (selectedConfigs.length === 0) {
      toast({
        title: "Validation Error",
        description: "Please select at least one configuration for comparison.",
        variant: "destructive",
      });
      return;
    }

    createTest.mutate();
  };

  return (
    <Card className="mb-6">
      <CardHeader>
        <CardTitle>URL Configuration</CardTitle>
      </CardHeader>
      <CardContent className="space-y-6">
        <UrlInputs
          baselineUrl={baselineUrl}
          newUrl={newUrl}
          onBaselineUrlChange={setBaselineUrl}
          onNewUrlChange={setNewUrl}
        />

        <div className="space-y-4">
          <h3 className="font-semibold">Select Configurations for Comparison</h3>
          <ConfigSelection
            selectedConfigs={selectedConfigs}
            onConfigToggle={toggleConfig}
          />
        </div>

        <Button 
          onClick={handleCompare}
          disabled={createTest.isPending}
          className="w-full"
        >
          {createTest.isPending ? (
            <>
              <Loader2 className="mr-2 h-4 w-4 animate-spin" />
              Creating Test...
            </>
          ) : (
            'Start Comparison'
          )}
        </Button>
      </CardContent>
    </Card>
  );
};

================================================
File: /src/components/comparison/ConfigSelection.tsx
================================================
import { useQuery } from "@tanstack/react-query";
import { supabase } from "@/integrations/supabase/client";
import { type Config } from "@/components/settings/predefined-configs/types";
import { Checkbox } from "@/components/ui/checkbox";
import { Label } from "@/components/ui/label";

export interface ConfigSelectionProps {
  selectedConfigs: string[];
  onConfigToggle: (configId: string) => void;
}

export const ConfigSelection = ({ selectedConfigs, onConfigToggle }: ConfigSelectionProps) => {
  const { data: configs, isLoading } = useQuery({
    queryKey: ['predefined-configs'],
    queryFn: async () => {
      const { data, error } = await supabase
        .from('browserstack_configs')
        .select('*')
        .eq('is_predefined', true)
        .order('created_at', { ascending: true });
      
      if (error) throw error;
      return data ?? [];
    }
  });

  if (isLoading) {
    return <div>Loading configurations...</div>;
  }

  if (!configs || configs.length === 0) {
    return <div>No predefined configurations available.</div>;
  }

  return (
    <div className="grid gap-4">
      {configs.map((config) => (
        <div key={config.id} className="flex items-center space-x-2">
          <Checkbox
            id={config.id}
            checked={selectedConfigs.includes(config.id)}
            onCheckedChange={() => onConfigToggle(config.id)}
          />
          <Label htmlFor={config.id} className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70">
            {config.name} - {config.device_type === 'desktop' ? 
              `${config.os} ${config.os_version} ${config.browser} ${config.browser_version}` : 
              `${config.device} ${config.os} ${config.os_version}`
            }
          </Label>
        </div>
      ))}
    </div>
  );
};

================================================
File: /src/components/comparison/ResultsDialog.tsx
================================================
import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog";

interface ResultsDialogProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
}

export const ResultsDialog = ({ open, onOpenChange }: ResultsDialogProps) => {
  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="max-w-4xl">
        <DialogHeader>
          <DialogTitle>Comparison Results</DialogTitle>
        </DialogHeader>
        <div className="grid grid-cols-2 gap-4">
          <div>
            <h3 className="font-semibold mb-2">Baseline Version</h3>
            <div className="bg-gray-100 h-64 rounded flex items-center justify-center">
              Screenshot placeholder
            </div>
          </div>
          <div>
            <h3 className="font-semibold mb-2">New Version</h3>
            <div className="bg-gray-100 h-64 rounded flex items-center justify-center">
              Screenshot placeholder
            </div>
          </div>
        </div>
      </DialogContent>
    </Dialog>
  );
};

================================================
File: /src/components/comparison/TestResultsTable.tsx
================================================
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Loader2 } from "lucide-react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { useQuery } from "@tanstack/react-query";
import { supabase } from "@/integrations/supabase/client";
import { Badge } from "@/components/ui/badge";
import type { Test } from "./types";

interface TestResultsTableProps {
  onTestSelect?: (baselineUrl: string, newUrl: string) => void;
}

const getStatusBadgeVariant = (status: string): "default" | "secondary" | "destructive" => {
  switch (status) {
    case 'completed':
      return 'default';
    case 'failed':
      return 'destructive';
    case 'in_progress':
      return 'secondary';
    default:
      return 'secondary';
  }
};

export const TestResultsTable = ({ onTestSelect }: TestResultsTableProps) => {
  const { data: tests, isLoading: testsLoading } = useQuery({
    queryKey: ['comparison-tests'],
    queryFn: async () => {
      const { data, error } = await supabase
        .from('comparison_tests')
        .select('*, test_screenshots(*)')
        .order('created_at', { ascending: false });
      
      if (error) throw error;
      return data as Test[];
    }
  });

  const formatDate = (dateString: string | null) => {
    if (!dateString) return 'N/A';
    return new Date(dateString).toLocaleDateString();
  };

  return (
    <Card>
      <CardHeader>
        <CardTitle>Recent Tests</CardTitle>
      </CardHeader>
      <CardContent>
        {testsLoading ? (
          <div className="flex justify-center p-4">
            <Loader2 className="h-6 w-6 animate-spin" />
          </div>
        ) : tests?.length ? (
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead>Baseline URL</TableHead>
                <TableHead>New URL</TableHead>
                <TableHead>Status</TableHead>
                <TableHead>Created At</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {tests.map((test) => (
                <TableRow 
                  key={test.id}
                  className="cursor-pointer hover:bg-muted"
                  onClick={() => onTestSelect?.(test.baseline_url, test.new_url)}
                >
                  <TableCell className="truncate max-w-xs">{test.baseline_url}</TableCell>
                  <TableCell className="truncate max-w-xs">{test.new_url}</TableCell>
                  <TableCell>
                    <Badge variant={getStatusBadgeVariant(test.status || '')}>
                      {test.status}
                    </Badge>
                  </TableCell>
                  <TableCell>{formatDate(test.created_at)}</TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        ) : (
          <p className="text-center text-muted-foreground">No tests found</p>
        )}
      </CardContent>
    </Card>
  );
};

================================================
File: /src/components/comparison/UrlInputs.tsx
================================================
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";

interface UrlInputsProps {
  baselineUrl: string;
  newUrl: string;
  onBaselineUrlChange: (url: string) => void;
  onNewUrlChange: (url: string) => void;
}

export const UrlInputs = ({
  baselineUrl,
  newUrl,
  onBaselineUrlChange,
  onNewUrlChange,
}: UrlInputsProps) => {
  return (
    <div className="space-y-4">
      <div>
        <Label htmlFor="baseline">Baseline URL</Label>
        <Input
          id="baseline"
          placeholder="Enter baseline URL"
          value={baselineUrl}
          onChange={(e) => onBaselineUrlChange(e.target.value)}
        />
      </div>
      <div>
        <Label htmlFor="new">New Version URL</Label>
        <Input
          id="new"
          placeholder="Enter new version URL"
          value={newUrl}
          onChange={(e) => onNewUrlChange(e.target.value)}
        />
      </div>
    </div>
  );
};

================================================
File: /src/components/comparison/types.ts
================================================
export interface Test {
  id: string;
  baseline_url: string;
  new_url: string;
  status: 'completed' | 'failed' | 'in_progress' | 'pending' | null;
  created_at: string | null;
  updated_at: string | null;
  user_id: string;
  test_screenshots: Array<{
    id: string;
    test_id: string | null;
    baseline_screenshot_url: string | null;
    new_screenshot_url: string | null;
    device_name: string;
    os_version: string;
    diff_percentage: number | null;
    created_at: string | null;
  }>;
}

export interface Config {
  id: string;
  name: string;
  device_type: 'desktop' | 'mobile';
  os: string;
  os_version: string;
  browser: string | null;
  browser_version: string | null;
  device: string | null;
  is_active: boolean | null;
  created_at: string | null;
  user_id: string;
  is_predefined: boolean | null;
}

================================================
File: /src/components/settings/BrowserstackConfigForm.tsx
================================================
import { useState } from "react";
import { useForm, FormProvider } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { Loader2 } from "lucide-react";
import { Form, FormControl, FormField, FormItem, FormLabel } from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { useToast } from "@/hooks/use-toast";
import { supabase } from "@/integrations/supabase/client";
import { browserStackConfigSchema } from "./types";
import type { BrowserStackConfigFormData } from "./types";
import { DesktopFields } from "./DesktopFields";
import { MobileFields } from "./MobileFields";

export const BrowserstackConfigForm = () => {
  const [deviceType, setDeviceType] = useState<"desktop" | "mobile">("desktop");
  const { toast } = useToast();
  const queryClient = useQueryClient();

  const form = useForm<BrowserStackConfigFormData>({
    resolver: zodResolver(browserStackConfigSchema),
    defaultValues: {
      deviceType: "desktop",
      name: "",
      os: "",
      osVersion: "",
      browser: null,
      browserVersion: null,
      device: null,
    },
  });

  const createConfig = useMutation({
    mutationFn: async (data: BrowserStackConfigFormData) => {
      const { error } = await supabase.from("browserstack_configs").insert({
        name: data.name,
        device_type: data.deviceType,
        os: data.os,
        os_version: data.osVersion,
        browser: data.deviceType === "desktop" ? data.browser : null,
        browser_version: data.deviceType === "desktop" ? data.browserVersion : null,
        device: data.deviceType === "mobile" ? data.device : null,
        user_id: "00000000-0000-0000-0000-000000000000", // Default system user UUID
      });

      if (error) throw error;
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["browserstack-configs"] });
      queryClient.invalidateQueries({ queryKey: ["predefined-configs"] });
      toast({
        title: "Configuration created",
        description: "Your BrowserStack configuration has been saved.",
      });
      form.reset();
    },
    onError: (error: Error) => {
      toast({
        title: "Error",
        description: "Failed to create configuration. Please try again.",
        variant: "destructive",
      });
      console.error("Error creating configuration:", error);
    },
  });

  const onSubmit = (data: BrowserStackConfigFormData) => {
    createConfig.mutate(data);
  };

  return (
    <Card>
      <CardHeader>
        <CardTitle>Add New Configuration</CardTitle>
      </CardHeader>
      <CardContent>
        <FormProvider {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
            <FormField
              control={form.control}
              name="name"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Configuration Name</FormLabel>
                  <FormControl>
                    <Input placeholder="e.g., Chrome Latest Windows" {...field} />
                  </FormControl>
                </FormItem>
              )}
            />

            <FormField
              control={form.control}
              name="deviceType"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Device Type</FormLabel>
                  <FormControl>
                    <RadioGroup
                      onValueChange={(value: "desktop" | "mobile") => {
                        field.onChange(value);
                        setDeviceType(value);
                      }}
                      defaultValue={field.value}
                      className="flex gap-4"
                    >
                      <FormItem className="flex items-center space-x-2">
                        <FormControl>
                          <RadioGroupItem value="desktop" />
                        </FormControl>
                        <FormLabel className="font-normal">Desktop</FormLabel>
                      </FormItem>
                      <FormItem className="flex items-center space-x-2">
                        <FormControl>
                          <RadioGroupItem value="mobile" />
                        </FormControl>
                        <FormLabel className="font-normal">Mobile</FormLabel>
                      </FormItem>
                    </RadioGroup>
                  </FormControl>
                </FormItem>
              )}
            />

            <FormField
              control={form.control}
              name="os"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Operating System</FormLabel>
                  <FormControl>
                    <Input
                      placeholder={
                        deviceType === "desktop"
                          ? "e.g., Windows, OS X"
                          : "e.g., ios, android"
                      }
                      {...field}
                    />
                  </FormControl>
                </FormItem>
              )}
            />

            <FormField
              control={form.control}
              name="osVersion"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>OS Version</FormLabel>
                  <FormControl>
                    <Input
                      placeholder={
                        deviceType === "desktop"
                          ? "e.g., 11, Ventura"
                          : "e.g., 14, 13"
                      }
                      {...field}
                    />
                  </FormControl>
                </FormItem>
              )}
            />

            {deviceType === "desktop" ? <DesktopFields /> : <MobileFields />}

            <Button
              type="submit"
              className="w-full"
              disabled={createConfig.isPending}
            >
              {createConfig.isPending ? (
                <>
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  Creating...
                </>
              ) : (
                "Create Configuration"
              )}
            </Button>
          </form>
        </FormProvider>
      </CardContent>
    </Card>
  );
};

================================================
File: /src/components/settings/ConfigurationsList.tsx
================================================
import { useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { ValidationDialog } from "./configurations-list/ValidationDialog";
import { ConfigurationsTable } from "./configurations-list/ConfigurationsTable";
import { useConfigurationsList } from "./configurations-list/useConfigurationsList";

export const ConfigurationsList = () => {
  const [validationDialog, setValidationDialog] = useState<{
    isOpen: boolean;
    data: any;
  }>({
    isOpen: false,
    data: null,
  });

  const {
    configs,
    isLoading,
    deleteConfig,
    validateConfig,
    updateConfig
  } = useConfigurationsList();

  const handleValidate = (configId: string) => {
    validateConfig.mutate(configId, {
      onSuccess: (data) => {
        setValidationDialog({
          isOpen: true,
          data,
        });
      }
    });
  };

  const handleUpdate = (suggestion: any) => {
    const configId = configs?.find((c) => c.id === validationDialog.data?.configId)?.id;
    if (!configId) return;
    
    updateConfig.mutate({
      id: configId,
      data: suggestion
    }, {
      onSuccess: () => {
        setValidationDialog({ isOpen: false, data: null });
      }
    });
  };

  return (
    <>
      <Card>
        <CardHeader>
          <CardTitle>Saved Configurations</CardTitle>
        </CardHeader>
        <CardContent>
          <ConfigurationsTable
            configs={configs}
            isLoading={isLoading}
            onValidate={handleValidate}
            onDelete={(id) => deleteConfig.mutate(id)}
            isValidating={validateConfig.isPending}
          />
        </CardContent>
      </Card>

      <ValidationDialog
        dialog={validationDialog}
        onClose={() => setValidationDialog({ isOpen: false, data: null })}
        onUpdate={handleUpdate}
      />
    </>
  );
};

================================================
File: /src/components/settings/DesktopFields.tsx
================================================
import { FormField, FormItem, FormLabel, FormControl } from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { useFormContext } from "react-hook-form";
import type { BrowserStackConfigFormData } from "./types";

export const DesktopFields = () => {
  const form = useFormContext<BrowserStackConfigFormData>();

  return (
    <>
      <FormField
        control={form.control}
        name="browser"
        render={({ field }) => (
          <FormItem>
            <FormLabel>Browser</FormLabel>
            <FormControl>
              <Input placeholder="e.g., chrome, firefox, safari" {...field} value={field.value || ''} />
            </FormControl>
          </FormItem>
        )}
      />

      <FormField
        control={form.control}
        name="browserVersion"
        render={({ field }) => (
          <FormItem>
            <FormLabel>Browser Version</FormLabel>
            <FormControl>
              <Input placeholder="e.g., 121.0, latest" {...field} value={field.value || ''} />
            </FormControl>
          </FormItem>
        )}
      />
    </>
  );
};

================================================
File: /src/components/settings/MobileFields.tsx
================================================
import { FormField, FormItem, FormLabel, FormControl } from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { useFormContext } from "react-hook-form";
import type { BrowserStackConfigFormData } from "./types";

export const MobileFields = () => {
  const form = useFormContext<BrowserStackConfigFormData>();

  return (
    <FormField
      control={form.control}
      name="device"
      render={({ field }) => (
        <FormItem>
          <FormLabel>Device</FormLabel>
          <FormControl>
            <Input placeholder="e.g., iPhone 14, Pixel 7" {...field} value={field.value || ''} />
          </FormControl>
        </FormItem>
      )}
    />
  );
};

================================================
File: /src/components/settings/PredefinedConfigs.tsx
================================================
import { useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { EditConfigDialog } from "./predefined-configs/EditConfigDialog";
import { ConfigCard } from "./predefined-configs/ConfigCard";
import { usePredefinedConfigs } from "./predefined-configs/usePredefinedConfigs";
import type { Config } from "./types";

export const PredefinedConfigs = () => {
  const [selectedConfigs, setSelectedConfigs] = useState<string[]>([]);
  const [editingConfig, setEditingConfig] = useState<Config | null>(null);
  const [verifyingConfig, setVerifyingConfig] = useState<string | null>(null);
  
  const { configs, verifyConfig } = usePredefinedConfigs();

  const toggleConfig = (configId: string) => {
    setSelectedConfigs(prev => 
      prev.includes(configId) 
        ? prev.filter(id => id !== configId)
        : [...prev, configId]
    );
  };

  const handleVerify = async (config: Config) => {
    setVerifyingConfig(config.id);
    await verifyConfig(config);
    setVerifyingConfig(null);
  };

  return (
    <>
      <Card className="mb-6">
        <CardHeader>
          <CardTitle>Predefined Configurations</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
            {configs?.map((config) => (
              <ConfigCard
                key={config.id}
                config={config}
                isSelected={selectedConfigs.includes(config.id)}
                onSelect={toggleConfig}
                onEdit={setEditingConfig}
                onVerify={handleVerify}
                isVerifying={verifyingConfig === config.id}
              />
            ))}
          </div>
        </CardContent>
      </Card>

      <EditConfigDialog 
        open={!!editingConfig} 
        onOpenChange={(open: boolean) => !open && setEditingConfig(null)}
        config={editingConfig || undefined}
      />
    </>
  );
};

================================================
File: /src/components/settings/types.ts
================================================
import { z } from "zod";

export type DeviceType = "desktop" | "mobile";

export interface Config {
  id: string;
  name: string;
  device_type: DeviceType;
  os: string;
  os_version: string;
  browser: string | null;
  browser_version: string | null;
  device: string | null;
  is_active: boolean | null;
  created_at: string | null;
  user_id: string;
  is_predefined: boolean | null;
}

export interface ValidationResponse {
  valid: boolean;
  message: string;
  configId?: string;
  suggestion?: {
    os_version?: string;
    browser_version?: string;
  };
}

export interface ValidationDialogState {
  isOpen: boolean;
  data: ValidationResponse | null;
}

export interface EditConfigDialogProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  config?: Config;
}

export const browserStackConfigSchema = z.object({
  name: z.string().min(1, "Name is required"),
  deviceType: z.enum(["desktop", "mobile"]),
  os: z.string().min(1, "Operating System is required"),
  osVersion: z.string().min(1, "OS Version is required"),
  browser: z.string().nullable(),
  browserVersion: z.string().nullable(),
  device: z.string().nullable(),
});

export type BrowserStackConfigFormData = z.infer<typeof browserStackConfigSchema>;

================================================
File: /src/components/settings/configurations-list/ConfigurationRow.tsx
================================================
import { Button } from "@/components/ui/button";
import { TableCell, TableRow } from "@/components/ui/table";
import { Badge } from "@/components/ui/badge";
import { Loader2, Trash2, CheckCircle } from "lucide-react";
import type { Config } from "../types";

interface ConfigurationRowProps {
  config: Config;
  onValidate: (configId: string) => void;
  onDelete: (configId: string) => void;
  isValidating: boolean;
}

export const ConfigurationRow = ({ 
  config, 
  onValidate, 
  onDelete,
  isValidating 
}: ConfigurationRowProps) => {
  return (
    <TableRow key={config.id}>
      <TableCell>{config.name}</TableCell>
      <TableCell>
        <Badge className="outline">
          {config.device_type}
        </Badge>
      </TableCell>
      <TableCell>{`${config.os} ${config.os_version}`}</TableCell>
      <TableCell>
        {config.device_type === 'desktop' 
          ? `${config.browser || ''} ${config.browser_version || ''}`
          : config.device || ''}
      </TableCell>
      <TableCell>
        <Badge className={config.is_active ? "default" : "secondary"}>
          {config.is_active ? "Active" : "Inactive"}
        </Badge>
      </TableCell>
      <TableCell className="space-x-2">
        <Button
          className="bg-transparent border hover:bg-accent"
          onClick={() => onValidate(config.id)}
          disabled={isValidating}
        >
          {isValidating ? (
            <Loader2 className="h-4 w-4 animate-spin" />
          ) : (
            <CheckCircle className="h-4 w-4" />
          )}
        </Button>
        <Button
          className="hover:bg-accent hover:text-accent-foreground"
          onClick={() => onDelete(config.id)}
        >
          <Trash2 className="h-4 w-4" />
        </Button>
      </TableCell>
    </TableRow>
  );
};

================================================
File: /src/components/settings/configurations-list/ConfigurationsTable.tsx
================================================
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Loader2 } from "lucide-react";
import { ConfigurationRow } from "./ConfigurationRow";
import type { Config } from "../types";

interface ConfigurationsTableProps {
  configs: Config[] | undefined;
  isLoading: boolean;
  onValidate: (configId: string) => void;
  onDelete: (configId: string) => void;
  isValidating: boolean;
}

export const ConfigurationsTable = ({
  configs,
  isLoading,
  onValidate,
  onDelete,
  isValidating
}: ConfigurationsTableProps) => {
  if (isLoading) {
    return (
      <div className="flex justify-center p-4">
        <Loader2 className="h-6 w-6 animate-spin" />
      </div>
    );
  }

  if (!configs?.length) {
    return <p className="text-center text-muted-foreground">No configurations found</p>;
  }

  return (
    <Table>
      <TableHeader>
        <TableRow>
          <TableHead>Name</TableHead>
          <TableHead>Type</TableHead>
          <TableHead>OS</TableHead>
          <TableHead>Browser/Device</TableHead>
          <TableHead>Status</TableHead>
          <TableHead>Actions</TableHead>
        </TableRow>
      </TableHeader>
      <TableBody>
        {configs.map((config) => (
          <ConfigurationRow
            key={config.id}
            config={config}
            onValidate={onValidate}
            onDelete={onDelete}
            isValidating={isValidating}
          />
        ))}
      </TableBody>
    </Table>
  );
};

================================================
File: /src/components/settings/configurations-list/ValidationDialog.tsx
================================================
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import type { ValidationDialogState } from "../types";

interface ValidationDialogProps {
  dialog: ValidationDialogState;
  onClose: () => void;
  onUpdate: (suggestion: { os_version?: string; browser_version?: string }) => void;
}

export const ValidationDialog = ({
  dialog,
  onClose,
  onUpdate,
}: ValidationDialogProps) => {
  return (
    <Dialog open={dialog.isOpen} onOpenChange={(open) => !open && onClose()}>
      <DialogContent>
        <DialogHeader>
          <DialogTitle>
            {dialog.data?.valid ? 'Configuration Valid' : 'Configuration Invalid'}
          </DialogTitle>
          <DialogDescription>
            {dialog.data?.message}
            {dialog.data?.suggestion && (
              <div className="mt-4">
                <p className="font-medium">Would you like to update to the suggested configuration?</p>
                <div className="mt-2 space-x-2">
                  <Button onClick={() => onUpdate(dialog.data?.suggestion || {})}>
                    Update Configuration
                  </Button>
                  <Button
                    className="bg-transparent border hover:bg-accent"
                    onClick={onClose}
                  >
                    Cancel
                  </Button>
                </div>
              </div>
            )}
          </DialogDescription>
        </DialogHeader>
      </DialogContent>
    </Dialog>
  );
};

================================================
File: /src/components/settings/configurations-list/hooks.ts
================================================
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { supabase } from "@/integrations/supabase/client";
import { useToast } from "@/hooks/use-toast";
import type { Config, ValidationResponse } from "../types";
import { useState } from "react";

interface ValidationDialogState {
  isOpen: boolean;
  data: ValidationResponse | null;
}

export const useConfigurations = () => {
  const { data: configs, isLoading } = useQuery({
    queryKey: ['browserstack-configs'],
    queryFn: async () => {
      const { data, error } = await supabase
        .from('browserstack_configs')
        .select('*')
        .order('created_at', { ascending: false });
      
      if (error) throw error;
      return data as Config[];
    }
  });

  return { configs, isLoading };
};

export const useConfigurationMutations = () => {
  const { toast } = useToast();
  const queryClient = useQueryClient();

  const deleteConfig = useMutation({
    mutationFn: async (id: string) => {
      const { error } = await supabase
        .from('browserstack_configs')
        .delete()
        .eq('id', id);

      if (error) throw error;
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['browserstack-configs'] });
      toast({
        title: "Configuration deleted",
        description: "The configuration has been removed.",
      });
    },
    onError: () => {
      toast({
        title: "Error",
        description: "Failed to delete configuration",
        variant: "destructive",
      });
    },
  });

  const validateConfig = useMutation({
    mutationFn: async (configId: string) => {
      const response = await fetch('/api/validate-browserstack-config', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ configId }),
      });
      
      if (!response.ok) {
        throw new Error('Failed to validate configuration');
      }
      
      return response.json();
    },
    onError: () => {
      toast({
        title: "Error",
        description: "Failed to validate configuration",
        variant: "destructive",
      });
    },
  });

  const updateConfig = useMutation({
    mutationFn: async ({ id, data }: { id: string; data: any }) => {
      const { error } = await supabase
        .from('browserstack_configs')
        .update({
          os_version: data.os_version,
          browser_version: data.browser_version,
        })
        .eq('id', id);

      if (error) throw error;
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['browserstack-configs'] });
      toast({
        title: "Configuration updated",
        description: "The configuration has been updated with the suggested values.",
      });
    },
    onError: () => {
      toast({
        title: "Error",
        description: "Failed to update configuration",
        variant: "destructive",
      });
    },
  });

  return { deleteConfig, validateConfig, updateConfig };
};

export const useValidationDialog = () => {
  const [validationDialog, setValidationDialog] = useState<ValidationDialogState>({
    isOpen: false,
    data: null,
  });

  const openValidationDialog = (data: ValidationResponse) => {
    setValidationDialog({
      isOpen: true,
      data,
    });
  };

  const closeValidationDialog = () => {
    setValidationDialog({
      isOpen: false,
      data: null,
    });
  };

  return {
    validationDialog,
    openValidationDialog,
    closeValidationDialog,
  };
};

================================================
File: /src/components/settings/configurations-list/index.tsx
================================================
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Table, TableBody, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Loader2 } from "lucide-react";
import { ConfigurationRow } from "./ConfigurationRow";
import { ValidationDialog } from "./ValidationDialog";
import { useConfigurations, useConfigurationMutations, useValidationDialog } from "./hooks";

export const ConfigurationsList = () => {
  const { configs, isLoading } = useConfigurations();
  const { deleteConfig, validateConfig, updateConfig } = useConfigurationMutations();
  const { validationDialog, openValidationDialog, closeValidationDialog } = useValidationDialog();

  const handleValidate = async (configId: string) => {
    const result = await validateConfig.mutateAsync(configId);
    openValidationDialog({ ...result, configId });
  };

  const handleUpdate = (suggestion: { os_version?: string; browser_version?: string }) => {
    if (!validationDialog.data?.configId) return;
    
    updateConfig.mutate({
      id: validationDialog.data.configId,
      data: suggestion
    });
    closeValidationDialog();
  };

  return (
    <Card>
      <CardHeader>
        <CardTitle>Saved Configurations</CardTitle>
      </CardHeader>
      <CardContent>
        {isLoading ? (
          <div className="flex justify-center p-4">
            <Loader2 className="h-6 w-6 animate-spin" />
          </div>
        ) : configs?.length ? (
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead>Name</TableHead>
                <TableHead>Type</TableHead>
                <TableHead>OS</TableHead>
                <TableHead>Browser/Device</TableHead>
                <TableHead>Status</TableHead>
                <TableHead>Actions</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {configs.map((config) => (
                <ConfigurationRow
                  key={config.id}
                  config={config}
                  onValidate={handleValidate}
                  onDelete={(id) => deleteConfig.mutate(id)}
                  isValidating={validateConfig.isPending}
                />
              ))}
            </TableBody>
          </Table>
        ) : (
          <p className="text-center text-muted-foreground">No configurations found</p>
        )}
      </CardContent>

      <ValidationDialog
        dialog={validationDialog}
        onClose={closeValidationDialog}
        onUpdate={handleUpdate}
      />
    </Card>
  );
};

================================================
File: /src/components/settings/configurations-list/types.ts
================================================
export interface DatabaseConfig {
  id: string;
  name: string;
  device_type: 'desktop' | 'mobile';
  os: string;
  os_version: string;
  browser: string | null;
  browser_version: string | null;
  device: string | null;
  is_active: boolean | null;
  created_at: string | null;
  user_id: string;
  is_predefined: boolean | null;
}

export interface Config {
  id: string;
  name: string;
  device_type: 'desktop' | 'mobile';
  os: string;
  os_version: string;
  browser: string | null;
  browser_version: string | null;
  device: string | null;
  is_active: boolean;
  created_at: string;
  user_id: string;
}

export interface ValidationResponse {
  valid: boolean;
  message: string;
  configId?: string;
  suggestion?: {
    os_version?: string;
    browser_version?: string;
  };
}

export interface ValidationDialogState {
  isOpen: boolean;
  data: ValidationResponse | null;
} 

================================================
File: /src/components/settings/configurations-list/useConfigurationsList.ts
================================================
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { supabase } from "@/integrations/supabase/client";
import { useToast } from "@/hooks/use-toast";
import type { Config } from "../types";

export const useConfigurationsList = () => {
  const { toast } = useToast();
  const queryClient = useQueryClient();

  const { data: configs, isLoading } = useQuery({
    queryKey: ['browserstack-configs'],
    queryFn: async () => {
      const { data, error } = await supabase
        .from('browserstack_configs')
        .select('*')
        .order('created_at', { ascending: false });
      
      if (error) throw error;
      return data as Config[];
    }
  });

  const deleteConfig = useMutation({
    mutationFn: async (id: string) => {
      const { error } = await supabase
        .from('browserstack_configs')
        .delete()
        .eq('id', id);

      if (error) throw error;
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['browserstack-configs'] });
      toast({
        title: "Configuration deleted",
        description: "The configuration has been removed.",
      });
    },
    onError: () => {
      toast({
        title: "Error",
        description: "Failed to delete configuration",
        variant: "destructive",
      });
    },
  });

  const validateConfig = useMutation({
    mutationFn: async (configId: string) => {
      const response = await fetch('/api/validate-browserstack-config', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ configId }),
      });
      
      if (!response.ok) {
        throw new Error('Failed to validate configuration');
      }
      
      return response.json();
    },
    onError: () => {
      toast({
        title: "Error",
        description: "Failed to validate configuration",
        variant: "destructive",
      });
    },
  });

  const updateConfig = useMutation({
    mutationFn: async ({ id, data }: { id: string; data: any }) => {
      const { error } = await supabase
        .from('browserstack_configs')
        .update({
          os_version: data.os_version,
          browser_version: data.browser_version,
        })
        .eq('id', id);

      if (error) throw error;
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['browserstack-configs'] });
      toast({
        title: "Configuration updated",
        description: "The configuration has been updated with the suggested values.",
      });
    },
    onError: () => {
      toast({
        title: "Error",
        description: "Failed to update configuration",
        variant: "destructive",
      });
    },
  });

  return {
    configs,
    isLoading,
    deleteConfig,
    validateConfig,
    updateConfig
  };
};

================================================
File: /src/components/settings/predefined-configs/ConfigCard.tsx
================================================
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Check, Edit2, Shield } from "lucide-react";
import type { Config } from "../types";

interface ConfigCardProps {
  config: Config;
  isSelected: boolean;
  onSelect: (configId: string) => void;
  onEdit: (config: Config) => void;
  onVerify: (config: Config) => void;
  isVerifying: boolean;
}

export const ConfigCard = ({
  config,
  isSelected,
  onSelect,
  onEdit,
  onVerify,
  isVerifying
}: ConfigCardProps) => {
  return (
    <Button
      key={config.id}
      className={`h-auto p-4 flex flex-col items-start space-y-2 relative group ${
        isSelected ? "bg-primary text-primary-foreground" : "bg-transparent border hover:bg-accent"
      }`}
      onClick={() => onSelect(config.id)}
    >
      {isSelected && (
        <Check className="h-4 w-4 absolute top-2 right-2" />
      )}
      <div className="absolute top-2 right-2 flex gap-2 opacity-0 group-hover:opacity-100 transition-opacity">
        <Button
          className="h-8 w-8 bg-transparent hover:bg-accent"
          onClick={(e) => {
            e.stopPropagation();
            onEdit(config);
          }}
          disabled={isVerifying}
        >
          <Edit2 className="h-4 w-4" />
        </Button>
        <Button
          className="h-8 w-8 bg-transparent hover:bg-accent"
          onClick={(e) => {
            e.stopPropagation();
            onVerify(config);
          }}
        >
          <Shield className="h-4 w-4" />
        </Button>
      </div>
      <div className="font-medium">{config.name}</div>
      <div className="flex flex-wrap gap-2">
        <Badge className="bg-secondary text-secondary-foreground">
          {config.device_type === 'desktop' ? 'Desktop' : 'Mobile'}
        </Badge>
        <Badge className="border bg-transparent">
          {config.os} {config.os_version}
        </Badge>
        {config.device_type === 'desktop' ? (
          <Badge className="border bg-transparent">
            {config.browser || ''} {config.browser_version || ''}
          </Badge>
        ) : (
          <Badge className="border bg-transparent">{config.device || ''}</Badge>
        )}
      </div>
    </Button>
  );
};

================================================
File: /src/components/settings/predefined-configs/EditConfigDialog.tsx
================================================
import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { EditConfigForm } from "./EditConfigForm";
import type { EditConfigDialogProps } from "../types";

export const EditConfigDialog = ({
  open,
  onOpenChange,
  config
}: EditConfigDialogProps) => {
  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent>
        <DialogHeader>
          <DialogTitle>Edit Configuration</DialogTitle>
        </DialogHeader>
        <EditConfigForm config={config} onOpenChange={onOpenChange} />
      </DialogContent>
    </Dialog>
  );
};

================================================
File: /src/components/settings/predefined-configs/EditConfigForm.tsx
================================================
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { Form, FormField, FormItem, FormLabel, FormControl } from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import { Button } from "@/components/ui/button";
import { browserStackConfigSchema } from "../types";
import { useQueryClient } from "@tanstack/react-query";
import { useToast } from "@/hooks/use-toast";
import { supabase } from "@/integrations/supabase/client";
import { useEffect } from "react";
import type { Config } from "../types";
import { DesktopFields } from "../DesktopFields";
import { MobileFields } from "../MobileFields";

interface EditConfigFormProps {
  config?: Config;
  onOpenChange: (open: boolean) => void;
}

export const EditConfigForm = ({ config, onOpenChange }: EditConfigFormProps) => {
  const { toast } = useToast();
  const queryClient = useQueryClient();

  const form = useForm({
    resolver: zodResolver(browserStackConfigSchema),
    defaultValues: {
      name: "",
      deviceType: "desktop",
      os: "",
      osVersion: "",
      browser: "",
      browserVersion: "",
      device: "",
    },
  });

  useEffect(() => {
    if (config) {
      form.reset({
        name: config.name,
        deviceType: config.device_type,
        os: config.os,
        osVersion: config.os_version,
        browser: config.browser || "",
        browserVersion: config.browser_version || "",
        device: config.device || "",
      });
    }
  }, [config, form.reset]);

  const onSubmit = async (data: any) => {
    try {
      if (!config?.id) return;

      const { error } = await supabase
        .from('browserstack_configs')
        .update({
          name: data.name,
          device_type: data.deviceType,
          os: data.os,
          os_version: data.osVersion,
          browser: data.deviceType === 'desktop' ? data.browser : null,
          browser_version: data.deviceType === 'desktop' ? data.browserVersion : null,
          device: data.deviceType === 'mobile' ? data.device : null,
        })
        .eq('id', config.id);

      if (error) throw error;

      queryClient.invalidateQueries({ queryKey: ['predefined-configs'] });
      toast({
        title: "Configuration updated",
        description: "The configuration has been successfully updated.",
      });
      onOpenChange(false);
    } catch (error) {
      toast({
        title: "Error",
        description: "Failed to update configuration. Please try again.",
        variant: "destructive",
      });
    }
  };

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
        <FormField
          control={form.control}
          name="name"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Configuration Name</FormLabel>
              <FormControl>
                <Input {...field} />
              </FormControl>
            </FormItem>
          )}
        />

        <FormField
          control={form.control}
          name="deviceType"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Device Type</FormLabel>
              <FormControl>
                <RadioGroup
                  onValueChange={field.onChange}
                  defaultValue={field.value}
                  className="flex gap-4"
                >
                  <FormItem className="flex items-center space-x-2">
                    <FormControl>
                      <RadioGroupItem value="desktop" />
                    </FormControl>
                    <FormLabel className="font-normal">Desktop</FormLabel>
                  </FormItem>
                  <FormItem className="flex items-center space-x-2">
                    <FormControl>
                      <RadioGroupItem value="mobile" />
                    </FormControl>
                    <FormLabel className="font-normal">Mobile</FormLabel>
                  </FormItem>
                </RadioGroup>
              </FormControl>
            </FormItem>
          )}
        />

        <FormField
          control={form.control}
          name="os"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Operating System</FormLabel>
              <FormControl>
                <Input {...field} />
              </FormControl>
            </FormItem>
          )}
        />

        <FormField
          control={form.control}
          name="osVersion"
          render={({ field }) => (
            <FormItem>
              <FormLabel>OS Version</FormLabel>
              <FormControl>
                <Input {...field} />
              </FormControl>
            </FormItem>
          )}
        />

        {form.watch("deviceType") === "desktop" ? (
          <DesktopFields />
        ) : (
          <MobileFields />
        )}

        <Button type="submit" className="w-full">
          Save Changes
        </Button>
      </form>
    </Form>
  );
};

================================================
File: /src/components/settings/predefined-configs/index.tsx
================================================
import { useState } from "react";
import { useQuery } from "@tanstack/react-query";
import { Check, Edit2, Shield } from "lucide-react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { useToast } from "@/hooks/use-toast";
import { supabase } from "@/integrations/supabase/client";
import { EditConfigDialog } from "./EditConfigDialog";
import type { Config } from "../types";

export const PredefinedConfigs = () => {
  const [selectedConfigs, setSelectedConfigs] = useState<string[]>([]);
  const [editingConfig, setEditingConfig] = useState<Config | null>(null);
  const [verifyingConfig, setVerifyingConfig] = useState<string | null>(null);
  const { toast } = useToast();

  const { data: configs, isLoading } = useQuery({
    queryKey: ['predefined-configs'],
    queryFn: async () => {
      const { data, error } = await supabase
        .from('browserstack_configs')
        .select('*')
        .eq('is_predefined', true)
        .order('created_at', { ascending: true });
      
      if (error) throw error;
      return data as Config[];
    }
  });

  const verifyConfig = async (config: Config) => {
    setVerifyingConfig(config.id);
    try {
      const { data, error } = await supabase.functions.invoke('validate-browserstack-config', {
        body: { config }
      });

      if (error) throw error;

      toast({
        title: data.valid ? "Configuration Valid" : "Configuration Invalid",
        description: data.message,
        variant: data.valid ? "default" : "destructive",
      });
    } catch (error) {
      toast({
        title: "Verification Error",
        description: "Failed to verify configuration with BrowserStack",
        variant: "destructive",
      });
    } finally {
      setVerifyingConfig(null);
    }
  };

  const toggleConfig = (configId: string) => {
    setSelectedConfigs(prev => 
      prev.includes(configId) 
        ? prev.filter(id => id !== configId)
        : [...prev, configId]
    );
  };

  if (isLoading) {
    return <div>Loading configurations...</div>;
  }

  return (
    <>
      <Card className="mb-6">
        <CardHeader>
          <CardTitle>Predefined Configurations</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
            {configs?.map((config) => (
              <Button
                key={config.id}
                className={`h-auto p-4 flex flex-col items-start space-y-2 relative group ${
                  selectedConfigs.includes(config.id) ? "bg-primary text-primary-foreground" : "bg-transparent border hover:bg-accent"
                }`}
                onClick={() => toggleConfig(config.id)}
              >
                {selectedConfigs.includes(config.id) && (
                  <Check className="h-4 w-4 absolute top-2 right-2" />
                )}
                <div className="absolute top-2 right-2 flex gap-2 opacity-0 group-hover:opacity-100 transition-opacity">
                  <Button
                    className="h-8 w-8 bg-transparent hover:bg-accent"
                    onClick={(e) => {
                      e.stopPropagation();
                      setEditingConfig(config);
                    }}
                    disabled={verifyingConfig === config.id}
                  >
                    <Edit2 className="h-4 w-4" />
                  </Button>
                  <Button
                    className="h-8 w-8 bg-transparent hover:bg-accent"
                    onClick={(e) => {
                      e.stopPropagation();
                      verifyConfig(config);
                    }}
                  >
                    <Shield className="h-4 w-4" />
                  </Button>
                </div>
                <div className="font-medium">{config.name}</div>
                <div className="flex flex-wrap gap-2">
                  <Badge className="bg-secondary text-secondary-foreground">
                    {config.device_type === 'desktop' ? 'Desktop' : 'Mobile'}
                  </Badge>
                  <Badge className="border bg-transparent">
                    {config.os} {config.os_version}
                  </Badge>
                  {config.device_type === 'desktop' ? (
                    <Badge className="border bg-transparent">
                      {config.browser} {config.browser_version}
                    </Badge>
                  ) : (
                    <Badge className="border bg-transparent">{config.device}</Badge>
                  )}
                </div>
              </Button>
            ))}
          </div>
        </CardContent>
      </Card>

      <EditConfigDialog 
        open={!!editingConfig} 
        onOpenChange={(open: boolean) => !open && setEditingConfig(null)}
        config={editingConfig || undefined}
      />
    </>
  );
};

================================================
File: /src/components/settings/predefined-configs/types.ts
================================================
export interface Config {
  id: string;
  name: string;
  device_type: 'desktop' | 'mobile';
  os: string;
  os_version: string;
  browser: string | null;
  browser_version: string | null;
  device: string | null;
  is_active: boolean | null;
  created_at?: string;
  updated_at?: string;
  user_id: string;
  is_predefined?: boolean;
}

export interface EditConfigDialogProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
}

export interface ValidationResponse {
  valid: boolean;
  message: string;
  configId?: string;
  suggestion?: {
    os_version?: string;
    browser_version?: string;
  };
}

export interface ValidationDialogState {
  isOpen: boolean;
  data: ValidationResponse | null;
}

================================================
File: /src/components/settings/predefined-configs/usePredefinedConfigs.ts
================================================
import { useQuery } from "@tanstack/react-query";
import { supabase } from "@/integrations/supabase/client";
import { useToast } from "@/hooks/use-toast";
import type { Config } from "../types";

export const usePredefinedConfigs = () => {
  const { toast } = useToast();

  const { data: configs, isLoading } = useQuery({
    queryKey: ['predefined-configs'],
    queryFn: async () => {
      const { data, error } = await supabase
        .from('browserstack_configs')
        .select('*')
        .eq('is_predefined', true)
        .order('created_at', { ascending: true });
      
      if (error) throw error;
      return data as Config[];
    }
  });

  const verifyConfig = async (config: Config) => {
    try {
      const { data, error } = await supabase.functions.invoke('validate-browserstack-config', {
        body: { config }
      });

      if (error) throw error;

      toast({
        title: data.valid ? "Configuration Valid" : "Configuration Invalid",
        description: data.message,
        variant: data.valid ? "default" : "destructive",
      });
    } catch (error) {
      toast({
        title: "Verification Error",
        description: "Failed to verify configuration with BrowserStack",
        variant: "destructive",
      });
    }
  };

  return {
    configs,
    isLoading,
    verifyConfig
  };
};

================================================
File: /src/components/settings/predefined-configs/hooks/index.ts
================================================
export * from './useConfigMutations';
export * from './useConfigSelection';
export * from './usePredefinedConfigs';

================================================
File: /src/components/settings/predefined-configs/hooks/useConfigEditing.ts
================================================
import { useState } from "react";
import type { Config } from "../types";

export const useConfigEditing = () => {
  const [editingConfig, setEditingConfig] = useState<Config | null>(null);
  const [verifyingConfig, setVerifyingConfig] = useState<string | null>(null);

  return {
    editingConfig,
    setEditingConfig,
    verifyingConfig,
    setVerifyingConfig,
  };
};

================================================
File: /src/components/settings/predefined-configs/hooks/useConfigMutations.ts
================================================
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { useToast } from "@/hooks/use-toast";
import { supabase } from "@/integrations/supabase/client";
import type { Config } from "../../types";

export const useConfigMutations = () => {
  const queryClient = useQueryClient();
  const { toast } = useToast();

  const verifyConfig = useMutation({
    mutationFn: async (config: Config) => {
      const { data, error } = await supabase.functions.invoke('validate-browserstack-config', {
        body: { config }
      });

      if (error) throw error;
      return data;
    },
    onSuccess: (data) => {
      toast({
        title: data.valid ? "Configuration Valid" : "Configuration Invalid",
        description: data.message,
        variant: data.valid ? "default" : "destructive",
      });
    },
    onError: () => {
      toast({
        title: "Verification Error",
        description: "Failed to verify configuration with BrowserStack",
        variant: "destructive",
      });
    },
  });

  const updateConfig = useMutation({
    mutationFn: async (config: Config) => {
      const { error } = await supabase
        .from('browserstack_configs')
        .update({
          name: config.name,
          device_type: config.device_type,
          os: config.os,
          os_version: config.os_version,
          browser: config.device_type === 'desktop' ? config.browser : null,
          browser_version: config.device_type === 'desktop' ? config.browser_version : null,
          device: config.device_type === 'mobile' ? config.device : null,
        })
        .eq('id', config.id);

      if (error) throw error;
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['predefined-configs'] });
      toast({
        title: "Configuration updated",
        description: "The configuration has been successfully updated.",
      });
    },
    onError: () => {
      toast({
        title: "Error",
        description: "Failed to update configuration. Please try again.",
        variant: "destructive",
      });
    },
  });

  return {
    verifyConfig,
    updateConfig
  };
};

================================================
File: /src/components/settings/predefined-configs/hooks/useConfigSelection.ts
================================================
import { useState } from "react";

export const useConfigSelection = () => {
  const [selectedConfigs, setSelectedConfigs] = useState<string[]>([]);

  const toggleConfig = (configId: string) => {
    setSelectedConfigs(prev => 
      prev.includes(configId) 
        ? prev.filter(id => id !== configId)
        : [...prev, configId]
    );
  };

  return {
    selectedConfigs,
    toggleConfig
  };
};

================================================
File: /src/components/settings/predefined-configs/hooks/usePredefinedConfigs.ts
================================================
import { useQuery } from "@tanstack/react-query";
import { supabase } from "@/integrations/supabase/client";
import type { Config } from "../../types";

export const usePredefinedConfigs = () => {
  const { data: configs, isLoading } = useQuery<Config[]>({
    queryKey: ['predefined-configs'],
    queryFn: async () => {
      const { data, error } = await supabase
        .from('browserstack_configs')
        .select('*')
        .eq('is_predefined', true)
        .order('created_at', { ascending: true });
      
      if (error) throw error;
      return data ?? [];
    }
  });

  return { configs, isLoading };
};

================================================
File: /src/components/settings/predefined-configs/hooks/useValidationDialog.ts
================================================
import { useState } from "react";
import type { ValidationResponse, ValidationDialogState } from "../types";

export const useValidationDialog = () => {
  const [validationDialog, setValidationDialog] = useState<ValidationDialogState>({
    isOpen: false,
    data: null,
  });

  const openValidationDialog = (data: ValidationResponse) => {
    if (!data) return;
    setValidationDialog({
      isOpen: true,
      data,
    });
  };

  const closeValidationDialog = () => {
    setValidationDialog({
      isOpen: false,
      data: null,
    });
  };

  return {
    validationDialog,
    openValidationDialog,
    closeValidationDialog,
  };
};

================================================
File: /src/components/ui/accordion.tsx
================================================
import * as React from "react"
import * as AccordionPrimitive from "@radix-ui/react-accordion"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const Accordion = AccordionPrimitive.Root

const AccordionItem = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>
>(({ className, ...props }, ref) => (
  <AccordionPrimitive.Item
    ref={ref}
    className={cn("border-b", className)}
    {...props}
  />
))
AccordionItem.displayName = "AccordionItem"

const AccordionTrigger = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Header className="flex">
    <AccordionPrimitive.Trigger
      ref={ref}
      className={cn(
        "flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180",
        className
      )}
      {...props}
    >
      {children}
      <ChevronDown className="h-4 w-4 shrink-0 transition-transform duration-200" />
    </AccordionPrimitive.Trigger>
  </AccordionPrimitive.Header>
))
AccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName

const AccordionContent = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Content
    ref={ref}
    className="overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down"
    {...props}
  >
    <div className={cn("pb-4 pt-0", className)}>{children}</div>
  </AccordionPrimitive.Content>
))

AccordionContent.displayName = AccordionPrimitive.Content.displayName

export { Accordion, AccordionItem, AccordionTrigger, AccordionContent }


================================================
File: /src/components/ui/alert-dialog.tsx
================================================
import * as React from "react"
import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

const AlertDialog = AlertDialogPrimitive.Root

const AlertDialogTrigger = AlertDialogPrimitive.Trigger

const AlertDialogPortal = AlertDialogPrimitive.Portal

const AlertDialogOverlay = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
AlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName

const AlertDialogContent = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>
>(({ className, ...props }, ref) => (
  <AlertDialogPortal>
    <AlertDialogOverlay />
    <AlertDialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    />
  </AlertDialogPortal>
))
AlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName

const AlertDialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
AlertDialogHeader.displayName = "AlertDialogHeader"

const AlertDialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
AlertDialogFooter.displayName = "AlertDialogFooter"

const AlertDialogTitle = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold", className)}
    {...props}
  />
))
AlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName

const AlertDialogDescription = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
AlertDialogDescription.displayName =
  AlertDialogPrimitive.Description.displayName

const AlertDialogAction = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Action>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Action
    ref={ref}
    className={cn(buttonVariants(), className)}
    {...props}
  />
))
AlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName

const AlertDialogCancel = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Cancel
    ref={ref}
    className={cn(
      buttonVariants({ variant: "outline" }),
      "mt-2 sm:mt-0",
      className
    )}
    {...props}
  />
))
AlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName

export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
}


================================================
File: /src/components/ui/alert.tsx
================================================
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const alertVariants = cva(
  "relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground",
  {
    variants: {
      variant: {
        default: "bg-background text-foreground",
        destructive:
          "border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Alert = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>
>(({ className, variant, ...props }, ref) => (
  <div
    ref={ref}
    role="alert"
    className={cn(alertVariants({ variant }), className)}
    {...props}
  />
))
Alert.displayName = "Alert"

const AlertTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h5
    ref={ref}
    className={cn("mb-1 font-medium leading-none tracking-tight", className)}
    {...props}
  />
))
AlertTitle.displayName = "AlertTitle"

const AlertDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm [&_p]:leading-relaxed", className)}
    {...props}
  />
))
AlertDescription.displayName = "AlertDescription"

export { Alert, AlertTitle, AlertDescription }


================================================
File: /src/components/ui/aspect-ratio.tsx
================================================
import * as AspectRatioPrimitive from "@radix-ui/react-aspect-ratio"

const AspectRatio = AspectRatioPrimitive.Root

export { AspectRatio }


================================================
File: /src/components/ui/avatar.tsx
================================================
import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"

import { cn } from "@/lib/utils"

const Avatar = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full",
      className
    )}
    {...props}
  />
))
Avatar.displayName = AvatarPrimitive.Root.displayName

const AvatarImage = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Image>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image
    ref={ref}
    className={cn("aspect-square h-full w-full", className)}
    {...props}
  />
))
AvatarImage.displayName = AvatarPrimitive.Image.displayName

const AvatarFallback = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Fallback>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn(
      "flex h-full w-full items-center justify-center rounded-full bg-muted",
      className
    )}
    {...props}
  />
))
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName

export { Avatar, AvatarImage, AvatarFallback }


================================================
File: /src/components/ui/badge.tsx
================================================
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground hover:bg-primary/80",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive:
          "border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  )
}

export { Badge, badgeVariants }


================================================
File: /src/components/ui/breadcrumb.tsx
================================================
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { ChevronRight, MoreHorizontal } from "lucide-react"

import { cn } from "@/lib/utils"

const Breadcrumb = React.forwardRef<
  HTMLElement,
  React.ComponentPropsWithoutRef<"nav"> & {
    separator?: React.ReactNode
  }
>(({ ...props }, ref) => <nav ref={ref} aria-label="breadcrumb" {...props} />)
Breadcrumb.displayName = "Breadcrumb"

const BreadcrumbList = React.forwardRef<
  HTMLOListElement,
  React.ComponentPropsWithoutRef<"ol">
>(({ className, ...props }, ref) => (
  <ol
    ref={ref}
    className={cn(
      "flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5",
      className
    )}
    {...props}
  />
))
BreadcrumbList.displayName = "BreadcrumbList"

const BreadcrumbItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentPropsWithoutRef<"li">
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    className={cn("inline-flex items-center gap-1.5", className)}
    {...props}
  />
))
BreadcrumbItem.displayName = "BreadcrumbItem"

const BreadcrumbLink = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentPropsWithoutRef<"a"> & {
    asChild?: boolean
  }
>(({ asChild, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp
      ref={ref}
      className={cn("transition-colors hover:text-foreground", className)}
      {...props}
    />
  )
})
BreadcrumbLink.displayName = "BreadcrumbLink"

const BreadcrumbPage = React.forwardRef<
  HTMLSpanElement,
  React.ComponentPropsWithoutRef<"span">
>(({ className, ...props }, ref) => (
  <span
    ref={ref}
    role="link"
    aria-disabled="true"
    aria-current="page"
    className={cn("font-normal text-foreground", className)}
    {...props}
  />
))
BreadcrumbPage.displayName = "BreadcrumbPage"

const BreadcrumbSeparator = ({
  children,
  className,
  ...props
}: React.ComponentProps<"li">) => (
  <li
    role="presentation"
    aria-hidden="true"
    className={cn("[&>svg]:size-3.5", className)}
    {...props}
  >
    {children ?? <ChevronRight />}
  </li>
)
BreadcrumbSeparator.displayName = "BreadcrumbSeparator"

const BreadcrumbEllipsis = ({
  className,
  ...props
}: React.ComponentProps<"span">) => (
  <span
    role="presentation"
    aria-hidden="true"
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More</span>
  </span>
)
BreadcrumbEllipsis.displayName = "BreadcrumbElipssis"

export {
  Breadcrumb,
  BreadcrumbList,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbPage,
  BreadcrumbSeparator,
  BreadcrumbEllipsis,
}


================================================
File: /src/components/ui/button.tsx
================================================
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }


================================================
File: /src/components/ui/calendar.tsx
================================================
import * as React from "react";
import { ChevronLeft, ChevronRight } from "lucide-react";
import { DayPicker } from "react-day-picker";

import { cn } from "@/lib/utils";
import { buttonVariants } from "@/components/ui/button";

export type CalendarProps = React.ComponentProps<typeof DayPicker>;

function Calendar({
  className,
  classNames,
  showOutsideDays = true,
  ...props
}: CalendarProps) {
  return (
    <DayPicker
      showOutsideDays={showOutsideDays}
      className={cn("p-3", className)}
      classNames={{
        months: "flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0",
        month: "space-y-4",
        caption: "flex justify-center pt-1 relative items-center",
        caption_label: "text-sm font-medium",
        nav: "space-x-1 flex items-center",
        nav_button: cn(
          buttonVariants({ variant: "outline" }),
          "h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100"
        ),
        nav_button_previous: "absolute left-1",
        nav_button_next: "absolute right-1",
        table: "w-full border-collapse space-y-1",
        head_row: "flex",
        head_cell:
          "text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]",
        row: "flex w-full mt-2",
        cell: "h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20",
        day: cn(
          buttonVariants({ variant: "ghost" }),
          "h-9 w-9 p-0 font-normal aria-selected:opacity-100"
        ),
        day_range_end: "day-range-end",
        day_selected:
          "bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground",
        day_today: "bg-accent text-accent-foreground",
        day_outside:
          "day-outside text-muted-foreground opacity-50 aria-selected:bg-accent/50 aria-selected:text-muted-foreground aria-selected:opacity-30",
        day_disabled: "text-muted-foreground opacity-50",
        day_range_middle:
          "aria-selected:bg-accent aria-selected:text-accent-foreground",
        day_hidden: "invisible",
        ...classNames,
      }}
      components={{
        IconLeft: ({ ..._props }) => <ChevronLeft className="h-4 w-4" />,
        IconRight: ({ ..._props }) => <ChevronRight className="h-4 w-4" />,
      }}
      {...props}
    />
  );
}
Calendar.displayName = "Calendar";

export { Calendar };


================================================
File: /src/components/ui/card.tsx
================================================
import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-lg border bg-card text-card-foreground shadow-sm",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h3
    ref={ref}
    className={cn(
      "text-2xl font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <p
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }


================================================
File: /src/components/ui/carousel.tsx
================================================
import * as React from "react"
import useEmblaCarousel, {
  type UseEmblaCarouselType,
} from "embla-carousel-react"
import { ArrowLeft, ArrowRight } from "lucide-react"

import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"

type CarouselApi = UseEmblaCarouselType[1]
type UseCarouselParameters = Parameters<typeof useEmblaCarousel>
type CarouselOptions = UseCarouselParameters[0]
type CarouselPlugin = UseCarouselParameters[1]

type CarouselProps = {
  opts?: CarouselOptions
  plugins?: CarouselPlugin
  orientation?: "horizontal" | "vertical"
  setApi?: (api: CarouselApi) => void
}

type CarouselContextProps = {
  carouselRef: ReturnType<typeof useEmblaCarousel>[0]
  api: ReturnType<typeof useEmblaCarousel>[1]
  scrollPrev: () => void
  scrollNext: () => void
  canScrollPrev: boolean
  canScrollNext: boolean
} & CarouselProps

const CarouselContext = React.createContext<CarouselContextProps | null>(null)

function useCarousel() {
  const context = React.useContext(CarouselContext)

  if (!context) {
    throw new Error("useCarousel must be used within a <Carousel />")
  }

  return context
}

const Carousel = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & CarouselProps
>(
  (
    {
      orientation = "horizontal",
      opts,
      setApi,
      plugins,
      className,
      children,
      ...props
    },
    ref
  ) => {
    const [carouselRef, api] = useEmblaCarousel(
      {
        ...opts,
        axis: orientation === "horizontal" ? "x" : "y",
      },
      plugins
    )
    const [canScrollPrev, setCanScrollPrev] = React.useState(false)
    const [canScrollNext, setCanScrollNext] = React.useState(false)

    const onSelect = React.useCallback((api: CarouselApi) => {
      if (!api) {
        return
      }

      setCanScrollPrev(api.canScrollPrev())
      setCanScrollNext(api.canScrollNext())
    }, [])

    const scrollPrev = React.useCallback(() => {
      api?.scrollPrev()
    }, [api])

    const scrollNext = React.useCallback(() => {
      api?.scrollNext()
    }, [api])

    const handleKeyDown = React.useCallback(
      (event: React.KeyboardEvent<HTMLDivElement>) => {
        if (event.key === "ArrowLeft") {
          event.preventDefault()
          scrollPrev()
        } else if (event.key === "ArrowRight") {
          event.preventDefault()
          scrollNext()
        }
      },
      [scrollPrev, scrollNext]
    )

    React.useEffect(() => {
      if (!api || !setApi) {
        return
      }

      setApi(api)
    }, [api, setApi])

    React.useEffect(() => {
      if (!api) {
        return
      }

      onSelect(api)
      api.on("reInit", onSelect)
      api.on("select", onSelect)

      return () => {
        api?.off("select", onSelect)
      }
    }, [api, onSelect])

    return (
      <CarouselContext.Provider
        value={{
          carouselRef,
          api: api,
          opts,
          orientation:
            orientation || (opts?.axis === "y" ? "vertical" : "horizontal"),
          scrollPrev,
          scrollNext,
          canScrollPrev,
          canScrollNext,
        }}
      >
        <div
          ref={ref}
          onKeyDownCapture={handleKeyDown}
          className={cn("relative", className)}
          role="region"
          aria-roledescription="carousel"
          {...props}
        >
          {children}
        </div>
      </CarouselContext.Provider>
    )
  }
)
Carousel.displayName = "Carousel"

const CarouselContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { carouselRef, orientation } = useCarousel()

  return (
    <div ref={carouselRef} className="overflow-hidden">
      <div
        ref={ref}
        className={cn(
          "flex",
          orientation === "horizontal" ? "-ml-4" : "-mt-4 flex-col",
          className
        )}
        {...props}
      />
    </div>
  )
})
CarouselContent.displayName = "CarouselContent"

const CarouselItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { orientation } = useCarousel()

  return (
    <div
      ref={ref}
      role="group"
      aria-roledescription="slide"
      className={cn(
        "min-w-0 shrink-0 grow-0 basis-full",
        orientation === "horizontal" ? "pl-4" : "pt-4",
        className
      )}
      {...props}
    />
  )
})
CarouselItem.displayName = "CarouselItem"

const CarouselPrevious = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollPrev, canScrollPrev } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute  h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-left-12 top-1/2 -translate-y-1/2"
          : "-top-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollPrev}
      onClick={scrollPrev}
      {...props}
    >
      <ArrowLeft className="h-4 w-4" />
      <span className="sr-only">Previous slide</span>
    </Button>
  )
})
CarouselPrevious.displayName = "CarouselPrevious"

const CarouselNext = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollNext, canScrollNext } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-right-12 top-1/2 -translate-y-1/2"
          : "-bottom-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollNext}
      onClick={scrollNext}
      {...props}
    >
      <ArrowRight className="h-4 w-4" />
      <span className="sr-only">Next slide</span>
    </Button>
  )
})
CarouselNext.displayName = "CarouselNext"

export {
  type CarouselApi,
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselPrevious,
  CarouselNext,
}


================================================
File: /src/components/ui/chart.tsx
================================================
import * as React from "react"
import * as RechartsPrimitive from "recharts"
import type { Payload, ValueType, NameType } from "recharts/types/component/DefaultTooltipContent"
import type { LegendType } from "recharts/types/util/types"

import { cn } from "@/lib/utils"

/**
 * Type System Documentation and Known Issues
 * ----------------------------------------
 * Current challenges with Recharts type integration:
 * 
 * 1. Type Mismatches:
 *    - NameType can be string | number, but our component primarily handles strings
 *    - DataKey can be string | number | function, but we expect string | number
 *    - LegendType has more variants than we currently support
 * 
 * 2. Payload Type Complexity:
 *    - Recharts Payload type is generic and more complex than our usage
 *    - We need to handle both tooltip and legend payload types
 *    - Custom properties like 'color' need to be properly typed
 * 
 * 3. Formatter Function Types:
 *    - Different components expect different formatter signatures
 *    - Need to handle both simple and complex formatting cases
 * 
 * TODO: This needs to be addressed in a separate task (CHART-001):
 * 1. Create proper type hierarchy for chart payloads
 * 2. Implement type guards for all payload variations
 * 3. Add proper generic constraints
 * 4. Create adapter layer for Recharts integration
 * 5. Add comprehensive test suite for type safety
 */

// Base type for chart payloads
type BasePayload = {
  value?: ValueType;
  color?: string;
  name?: NameType;
  dataKey?: string | number;
  payload?: {
    fill?: string;
    [key: string]: any;
  };
};

// Temporary type solution with runtime checks
type ChartPayloadItem = BasePayload & {
  type?: LegendType;
};

// Runtime type guards
const isValidValue = (value: unknown): value is ValueType => {
  return typeof value === 'string' || typeof value === 'number';
};

const isValidName = (name: unknown): name is NameType => {
  return typeof name === 'string' || typeof name === 'number';
};

const isValidDataKey = (key: unknown): key is string | number => {
  return typeof key === 'string' || typeof key === 'number';
};

const isValidColor = (color: unknown): color is string => {
  return typeof color === 'string' && (
    color.startsWith('#') || 
    color.startsWith('rgb') || 
    color.startsWith('hsl')
  );
};

const isValidLegendType = (type: unknown): type is LegendType => {
  return typeof type === 'string' && [
    'plainline',
    'line',
    'square',
    'rect',
    'circle',
    'cross',
    'diamond',
    'star',
    'triangle',
    'wye',
    'none'
  ].includes(type);
};

// Type guard for payload items
function isValidPayloadItem(item: unknown): item is ChartPayloadItem {
  if (!item || typeof item !== 'object') return false;

  const payload = item as Record<string, unknown>;
  
  // Check required properties
  if ('value' in payload && !isValidValue(payload.value)) return false;
  if ('name' in payload && !isValidName(payload.name)) return false;
  if ('dataKey' in payload && !isValidDataKey(payload.dataKey)) return false;
  if ('color' in payload && !isValidColor(payload.color)) return false;
  if ('type' in payload && !isValidLegendType(payload.type)) return false;

  return true;
}

function isValidPayload(
  payload: unknown
): payload is ChartPayloadItem[] {
  return Boolean(
    payload &&
    Array.isArray(payload) &&
    payload.length > 0 &&
    payload.every(isValidPayloadItem)
  );
}

// Adapter function to safely convert payload data
function adaptPayloadItem(item: unknown): ChartPayloadItem | null {
  const payload = item as Payload<ValueType, NameType>;
  
  if (!payload) return null;

  // Handle function dataKey
  const dataKey = typeof payload.dataKey === 'function' 
    ? 'value' 
    : payload.dataKey as string | number | undefined;

  // Validate type
  const type = isValidLegendType(payload.type) ? payload.type : undefined;

  return {
    value: payload.value,
    name: payload.name,
    dataKey,
    color: payload.color,
    payload: payload.payload,
    type
  };
}

type ChartFormatter = (
  value: ValueType,
  name: NameType,
  item: ChartPayloadItem,
  index: number,
  payload?: ChartPayloadItem['payload']
) => React.ReactNode;

function getPayloadConfigFromPayload(
  config: ChartConfig,
  item: ChartPayloadItem,
  key: string
) {
  // Runtime validation
  if (!isValidPayloadItem(item)) {
    console.warn('Invalid payload item:', item);
    return undefined;
  }
  return config[key as keyof typeof config];
}

// Format: { THEME_NAME: CSS_SELECTOR }
const THEMES = { light: "", dark: ".dark" } as const

export type ChartConfig = {
  [k in string]: {
    label?: React.ReactNode
    icon?: React.ComponentType
  } & (
    | { color?: string; theme?: never }
    | { color?: never; theme: Record<keyof typeof THEMES, string> }
  )
}

type ChartContextProps = {
  config: ChartConfig
}

const ChartContext = React.createContext<ChartContextProps | null>(null)

function useChart() {
  const context = React.useContext(ChartContext)

  if (!context) {
    throw new Error("useChart must be used within a <ChartContainer />")
  }

  return context
}

const ChartContainer = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    config: ChartConfig
    children: React.ComponentProps<
      typeof RechartsPrimitive.ResponsiveContainer
    >["children"]
  }
>(({ id, className, children, config, ...props }, ref) => {
  const uniqueId = React.useId()
  const chartId = `chart-${id || uniqueId.replace(/:/g, "")}`

  return (
    <ChartContext.Provider value={{ config }}>
      <div
        data-chart={chartId}
        ref={ref}
        className={cn(
          "flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none",
          className
        )}
        {...props}
      >
        <ChartStyle id={chartId} config={config} />
        <RechartsPrimitive.ResponsiveContainer>
          {children}
        </RechartsPrimitive.ResponsiveContainer>
      </div>
    </ChartContext.Provider>
  )
})
ChartContainer.displayName = "Chart"

const ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {
  const colorConfig = Object.entries(config).filter(
    ([_, config]) => config.theme || config.color
  )

  if (!colorConfig.length) {
    return null
  }

  return (
    <style
      dangerouslySetInnerHTML={{
        __html: Object.entries(THEMES)
          .map(
            ([theme, prefix]) => `
${prefix} [data-chart=${id}] {
${colorConfig
  .map(([key, itemConfig]) => {
    const color =
      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||
      itemConfig.color
    return color ? `  --color-${key}: ${color};` : null
  })
  .join("\n")}
}
`
          )
          .join("\n"),
      }}
    />
  )
}

const ChartTooltip = RechartsPrimitive.Tooltip

const ChartTooltipContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &
    React.ComponentProps<"div"> & {
      hideLabel?: boolean
      hideIndicator?: boolean
      indicator?: "line" | "dot" | "dashed"
      nameKey?: string
      labelKey?: string
    }
>(
  (
    {
      active,
      payload,
      className,
      indicator = "dot",
      hideLabel = false,
      hideIndicator = false,
      label,
      labelFormatter,
      labelClassName,
      formatter,
      color,
      nameKey,
      labelKey,
    },
    ref
  ) => {
    const { config } = useChart()

    const tooltipLabel = React.useMemo(() => {
      if (hideLabel || !payload?.length) {
        return null
      }

      const [item] = payload
      const key = `${labelKey || item.dataKey || item.name || "value"}`
      const itemConfig = getPayloadConfigFromPayload(config, item, key)
      const value =
        !labelKey && typeof label === "string"
          ? config[label as keyof typeof config]?.label || label
          : itemConfig?.label

      if (labelFormatter) {
        return (
          <div className={cn("font-medium", labelClassName)}>
            {labelFormatter(value, payload)}
          </div>
        )
      }

      if (!value) {
        return null
      }

      return <div className={cn("font-medium", labelClassName)}>{value}</div>
    }, [
      label,
      labelFormatter,
      payload,
      hideLabel,
      labelClassName,
      config,
      labelKey,
    ])

    if (!active || !payload?.length) {
      return null
    }

    const nestLabel = payload.length === 1 && indicator !== "dot"

    return (
      <div
        ref={ref}
        className={cn(
          "grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl",
          className
        )}
      >
        {!nestLabel ? tooltipLabel : null}
        <div className="grid gap-1.5">
          {payload.map((item: ChartPayloadItem, index: number) => {
            const key = `${nameKey || item.name || item.dataKey || "value"}`
            const itemConfig = getPayloadConfigFromPayload(config, item, key)
            const indicatorColor = color || item.payload?.fill || item.color || ''

            return (
              <div
                key={item.dataKey || index}
                className={cn(
                  "flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground",
                  indicator === "dot" && "items-center"
                )}
              >
                {formatter && item?.value !== undefined && item.name ? (
                  formatter(
                    item.value,
                    item.name,
                    item as unknown as Payload<ValueType, NameType>,
                    index,
                    item.payload as unknown as Payload<ValueType, NameType>[]
                  )
                ) : (
                  <>
                    {itemConfig?.icon ? (
                      <itemConfig.icon />
                    ) : (
                      !hideIndicator && (
                        <div
                          className={cn(
                            "shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]",
                            {
                              "h-2.5 w-2.5": indicator === "dot",
                              "w-1": indicator === "line",
                              "w-0 border-[1.5px] border-dashed bg-transparent":
                                indicator === "dashed",
                              "my-0.5": nestLabel && indicator === "dashed",
                            }
                          )}
                          style={
                            {
                              "--color-bg": indicatorColor,
                              "--color-border": indicatorColor,
                            } as React.CSSProperties
                          }
                        />
                      )
                    )}
                    <div
                      className={cn(
                        "flex flex-1 justify-between leading-none",
                        nestLabel ? "items-end" : "items-center"
                      )}
                    >
                      <div className="grid gap-1.5">
                        {nestLabel ? tooltipLabel : null}
                        <span className="text-muted-foreground">
                          {itemConfig?.label || item.name}
                        </span>
                      </div>
                      {item.value && (
                        <span className="font-mono font-medium tabular-nums text-foreground">
                          {typeof item.value === 'number' ? item.value.toLocaleString() : item.value}
                        </span>
                      )}
                    </div>
                  </>
                )}
              </div>
            )
          })}
        </div>
      </div>
    )
  }
)
ChartTooltipContent.displayName = "ChartTooltip"

const ChartLegend = RechartsPrimitive.Legend

const ChartLegendContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> &
    Pick<RechartsPrimitive.LegendProps, "payload" | "verticalAlign"> & {
      hideIcon?: boolean
      nameKey?: string
    }
>(
  (
    { className, hideIcon = false, payload, verticalAlign = "bottom", nameKey },
    ref
  ) => {
    const { config } = useChart()

    if (!isValidPayload(payload)) {
      console.warn('Invalid chart payload:', payload);
      return null
    }

    return (
      <div
        ref={ref}
        className={cn(
          "flex items-center justify-center gap-4",
          verticalAlign === "top" ? "pb-3" : "pt-3",
          className
        )}
      >
        {(payload as unknown as ChartPayloadItem[]).map((item) => {
          const adaptedItem = adaptPayloadItem(item);
          if (!adaptedItem) {
            console.warn('Failed to adapt payload item:', item);
            return null;
          }

          const key = `${nameKey || adaptedItem.dataKey || "value"}`
          const itemConfig = getPayloadConfigFromPayload(config, adaptedItem, key)

          return (
            <div
              key={key}
              className={cn(
                "flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground"
              )}
            >
              {itemConfig?.icon && !hideIcon ? (
                <itemConfig.icon />
              ) : (
                <div
                  className="h-2 w-2 shrink-0 rounded-[2px]"
                  style={{
                    backgroundColor: adaptedItem.color || '',
                  }}
                />
              )}
              {itemConfig?.label}
            </div>
          )
        })}
      </div>
    )
  }
)
ChartLegendContent.displayName = "ChartLegend"

export {
  ChartContainer,
  ChartTooltip,
  ChartTooltipContent,
  ChartLegend,
  ChartLegendContent,
  ChartStyle,
}


================================================
File: /src/components/ui/checkbox.tsx
================================================
import * as React from "react"
import * as CheckboxPrimitive from "@radix-ui/react-checkbox"
import { Check } from "lucide-react"

import { cn } from "@/lib/utils"

const Checkbox = React.forwardRef<
  React.ElementRef<typeof CheckboxPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>
>(({ className, ...props }, ref) => (
  <CheckboxPrimitive.Root
    ref={ref}
    className={cn(
      "peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground",
      className
    )}
    {...props}
  >
    <CheckboxPrimitive.Indicator
      className={cn("flex items-center justify-center text-current")}
    >
      <Check className="h-4 w-4" />
    </CheckboxPrimitive.Indicator>
  </CheckboxPrimitive.Root>
))
Checkbox.displayName = CheckboxPrimitive.Root.displayName

export { Checkbox }


================================================
File: /src/components/ui/collapsible.tsx
================================================
import * as CollapsiblePrimitive from "@radix-ui/react-collapsible"

const Collapsible = CollapsiblePrimitive.Root

const CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger

const CollapsibleContent = CollapsiblePrimitive.CollapsibleContent

export { Collapsible, CollapsibleTrigger, CollapsibleContent }


================================================
File: /src/components/ui/command.tsx
================================================
import * as React from "react"
import { type DialogProps } from "@radix-ui/react-dialog"
import { Command as CommandPrimitive } from "cmdk"
import { Search } from "lucide-react"

import { cn } from "@/lib/utils"
import { Dialog, DialogContent } from "@/components/ui/dialog"

const Command = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive>
>(({ className, ...props }, ref) => (
  <CommandPrimitive
    ref={ref}
    className={cn(
      "flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground",
      className
    )}
    {...props}
  />
))
Command.displayName = CommandPrimitive.displayName

interface CommandDialogProps extends DialogProps {}

const CommandDialog = ({ children, ...props }: CommandDialogProps) => {
  return (
    <Dialog {...props}>
      <DialogContent className="overflow-hidden p-0 shadow-lg">
        <Command className="[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5">
          {children}
        </Command>
      </DialogContent>
    </Dialog>
  )
}

const CommandInput = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Input>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>
>(({ className, ...props }, ref) => (
  <div className="flex items-center border-b px-3" cmdk-input-wrapper="">
    <Search className="mr-2 h-4 w-4 shrink-0 opacity-50" />
    <CommandPrimitive.Input
      ref={ref}
      className={cn(
        "flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    />
  </div>
))

CommandInput.displayName = CommandPrimitive.Input.displayName

const CommandList = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.List
    ref={ref}
    className={cn("max-h-[300px] overflow-y-auto overflow-x-hidden", className)}
    {...props}
  />
))

CommandList.displayName = CommandPrimitive.List.displayName

const CommandEmpty = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Empty>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>
>((props, ref) => (
  <CommandPrimitive.Empty
    ref={ref}
    className="py-6 text-center text-sm"
    {...props}
  />
))

CommandEmpty.displayName = CommandPrimitive.Empty.displayName

const CommandGroup = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Group>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Group
    ref={ref}
    className={cn(
      "overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground",
      className
    )}
    {...props}
  />
))

CommandGroup.displayName = CommandPrimitive.Group.displayName

const CommandSeparator = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 h-px bg-border", className)}
    {...props}
  />
))
CommandSeparator.displayName = CommandPrimitive.Separator.displayName

const CommandItem = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50",
      className
    )}
    {...props}
  />
))

CommandItem.displayName = CommandPrimitive.Item.displayName

const CommandShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
CommandShortcut.displayName = "CommandShortcut"

export {
  Command,
  CommandDialog,
  CommandInput,
  CommandList,
  CommandEmpty,
  CommandGroup,
  CommandItem,
  CommandShortcut,
  CommandSeparator,
}


================================================
File: /src/components/ui/context-menu.tsx
================================================
import * as React from "react"
import * as ContextMenuPrimitive from "@radix-ui/react-context-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const ContextMenu = ContextMenuPrimitive.Root

const ContextMenuTrigger = ContextMenuPrimitive.Trigger

const ContextMenuGroup = ContextMenuPrimitive.Group

const ContextMenuPortal = ContextMenuPrimitive.Portal

const ContextMenuSub = ContextMenuPrimitive.Sub

const ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup

const ContextMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <ContextMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </ContextMenuPrimitive.SubTrigger>
))
ContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName

const ContextMenuSubContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
ContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName

const ContextMenuContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Portal>
    <ContextMenuPrimitive.Content
      ref={ref}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </ContextMenuPrimitive.Portal>
))
ContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName

const ContextMenuItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
ContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName

const ContextMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <ContextMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.CheckboxItem>
))
ContextMenuCheckboxItem.displayName =
  ContextMenuPrimitive.CheckboxItem.displayName

const ContextMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <ContextMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.RadioItem>
))
ContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName

const ContextMenuLabel = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold text-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
ContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName

const ContextMenuSeparator = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-border", className)}
    {...props}
  />
))
ContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName

const ContextMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
ContextMenuShortcut.displayName = "ContextMenuShortcut"

export {
  ContextMenu,
  ContextMenuTrigger,
  ContextMenuContent,
  ContextMenuItem,
  ContextMenuCheckboxItem,
  ContextMenuRadioItem,
  ContextMenuLabel,
  ContextMenuSeparator,
  ContextMenuShortcut,
  ContextMenuGroup,
  ContextMenuPortal,
  ContextMenuSub,
  ContextMenuSubContent,
  ContextMenuSubTrigger,
  ContextMenuRadioGroup,
}


================================================
File: /src/components/ui/dialog.tsx
================================================
import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogClose,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}


================================================
File: /src/components/ui/drawer.tsx
================================================
import * as React from "react"
import { Drawer as DrawerPrimitive } from "vaul"

import { cn } from "@/lib/utils"

const Drawer = ({
  shouldScaleBackground = true,
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (
  <DrawerPrimitive.Root
    shouldScaleBackground={shouldScaleBackground}
    {...props}
  />
)
Drawer.displayName = "Drawer"

const DrawerTrigger = DrawerPrimitive.Trigger

const DrawerPortal = DrawerPrimitive.Portal

const DrawerClose = DrawerPrimitive.Close

const DrawerOverlay = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Overlay
    ref={ref}
    className={cn("fixed inset-0 z-50 bg-black/80", className)}
    {...props}
  />
))
DrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName

const DrawerContent = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DrawerPortal>
    <DrawerOverlay />
    <DrawerPrimitive.Content
      ref={ref}
      className={cn(
        "fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background",
        className
      )}
      {...props}
    >
      <div className="mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted" />
      {children}
    </DrawerPrimitive.Content>
  </DrawerPortal>
))
DrawerContent.displayName = "DrawerContent"

const DrawerHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn("grid gap-1.5 p-4 text-center sm:text-left", className)}
    {...props}
  />
)
DrawerHeader.displayName = "DrawerHeader"

const DrawerFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn("mt-auto flex flex-col gap-2 p-4", className)}
    {...props}
  />
)
DrawerFooter.displayName = "DrawerFooter"

const DrawerTitle = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DrawerTitle.displayName = DrawerPrimitive.Title.displayName

const DrawerDescription = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DrawerDescription.displayName = DrawerPrimitive.Description.displayName

export {
  Drawer,
  DrawerPortal,
  DrawerOverlay,
  DrawerTrigger,
  DrawerClose,
  DrawerContent,
  DrawerHeader,
  DrawerFooter,
  DrawerTitle,
  DrawerDescription,
}


================================================
File: /src/components/ui/dropdown-menu.tsx
================================================
import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const DropdownMenu = DropdownMenuPrimitive.Root

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger

const DropdownMenuGroup = DropdownMenuPrimitive.Group

const DropdownMenuPortal = DropdownMenuPrimitive.Portal

const DropdownMenuSub = DropdownMenuPrimitive.Sub

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </DropdownMenuPrimitive.SubTrigger>
))
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
))
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
))
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
))
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName

const DropdownMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
      {...props}
    />
  )
}
DropdownMenuShortcut.displayName = "DropdownMenuShortcut"

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
}


================================================
File: /src/components/ui/form.tsx
================================================
import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { Slot } from "@radix-ui/react-slot"
import {
  Controller,
  FormProvider,
  useFormContext,
} from "react-hook-form"
import type {
  ControllerProps,
  FieldPath,
  FieldValues,
} from "react-hook-form"

import { cn } from "@/lib/utils"
import { Label } from "@/components/ui/label"

const Form = FormProvider

type FormFieldContextValue<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
> = {
  name: TName
}

const FormFieldContext = React.createContext<FormFieldContextValue>(
  {} as FormFieldContextValue
)

const FormField = <
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
>({
  ...props
}: ControllerProps<TFieldValues, TName>) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  )
}

const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext)
  const itemContext = React.useContext(FormItemContext)
  const { getFieldState, formState } = useFormContext()

  const fieldState = getFieldState(fieldContext.name, formState)

  if (!fieldContext) {
    throw new Error("useFormField should be used within <FormField>")
  }

  const { id } = itemContext

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  }
}

type FormItemContextValue = {
  id: string
}

const FormItemContext = React.createContext<FormItemContextValue>(
  {} as FormItemContextValue
)

const FormItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const id = React.useId()

  return (
    <FormItemContext.Provider value={{ id }}>
      <div ref={ref} className={cn("space-y-2", className)} {...props} />
    </FormItemContext.Provider>
  )
})
FormItem.displayName = "FormItem"

const FormLabel = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>
>(({ className, ...props }, ref) => {
  const { error, formItemId } = useFormField()

  return (
    <Label
      ref={ref}
      className={cn(error && "text-destructive", className)}
      htmlFor={formItemId}
      {...props}
    />
  )
})
FormLabel.displayName = "FormLabel"

const FormControl = React.forwardRef<
  React.ElementRef<typeof Slot>,
  React.ComponentPropsWithoutRef<typeof Slot>
>(({ ...props }, ref) => {
  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()

  return (
    <Slot
      ref={ref}
      id={formItemId}
      aria-describedby={
        !error
          ? `${formDescriptionId}`
          : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props}
    />
  )
})
FormControl.displayName = "FormControl"

const FormDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => {
  const { formDescriptionId } = useFormField()

  return (
    <p
      ref={ref}
      id={formDescriptionId}
      className={cn("text-sm text-muted-foreground", className)}
      {...props}
    />
  )
})
FormDescription.displayName = "FormDescription"

const FormMessage = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, children, ...props }, ref) => {
  const { error, formMessageId } = useFormField()
  const body = error ? String(error?.message) : children

  if (!body) {
    return null
  }

  return (
    <p
      ref={ref}
      id={formMessageId}
      className={cn("text-sm font-medium text-destructive", className)}
      {...props}
    >
      {body}
    </p>
  )
})
FormMessage.displayName = "FormMessage"

export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
}


================================================
File: /src/components/ui/hover-card.tsx
================================================
import * as React from "react"
import * as HoverCardPrimitive from "@radix-ui/react-hover-card"

import { cn } from "@/lib/utils"

const HoverCard = HoverCardPrimitive.Root

const HoverCardTrigger = HoverCardPrimitive.Trigger

const HoverCardContent = React.forwardRef<
  React.ElementRef<typeof HoverCardPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <HoverCardPrimitive.Content
    ref={ref}
    align={align}
    sideOffset={sideOffset}
    className={cn(
      "z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
HoverCardContent.displayName = HoverCardPrimitive.Content.displayName

export { HoverCard, HoverCardTrigger, HoverCardContent }


================================================
File: /src/components/ui/input-otp.tsx
================================================
import * as React from "react"
import { OTPInput, OTPInputContext } from "input-otp"
import { Dot } from "lucide-react"

import { cn } from "@/lib/utils"

const InputOTP = React.forwardRef<
  React.ElementRef<typeof OTPInput>,
  React.ComponentPropsWithoutRef<typeof OTPInput>
>(({ className, containerClassName, ...props }, ref) => (
  <OTPInput
    ref={ref}
    containerClassName={cn(
      "flex items-center gap-2 has-[:disabled]:opacity-50",
      containerClassName
    )}
    className={cn("disabled:cursor-not-allowed", className)}
    {...props}
  />
))
InputOTP.displayName = "InputOTP"

const InputOTPGroup = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div">
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("flex items-center", className)} {...props} />
))
InputOTPGroup.displayName = "InputOTPGroup"

const InputOTPSlot = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div"> & { index: number }
>(({ index, className, ...props }, ref) => {
  const inputOTPContext = React.useContext(OTPInputContext)
  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]

  return (
    <div
      ref={ref}
      className={cn(
        "relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md",
        isActive && "z-10 ring-2 ring-ring ring-offset-background",
        className
      )}
      {...props}
    >
      {char}
      {hasFakeCaret && (
        <div className="pointer-events-none absolute inset-0 flex items-center justify-center">
          <div className="h-4 w-px animate-caret-blink bg-foreground duration-1000" />
        </div>
      )}
    </div>
  )
})
InputOTPSlot.displayName = "InputOTPSlot"

const InputOTPSeparator = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div">
>(({ ...props }, ref) => (
  <div ref={ref} role="separator" {...props}>
    <Dot />
  </div>
))
InputOTPSeparator.displayName = "InputOTPSeparator"

export { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }


================================================
File: /src/components/ui/input.tsx
================================================
import * as React from "react"

import { cn } from "@/lib/utils"

const Input = React.forwardRef<HTMLInputElement, React.ComponentProps<"input">>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }


================================================
File: /src/components/ui/label.tsx
================================================
import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
)

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }


================================================
File: /src/components/ui/menubar.tsx
================================================
import * as React from "react"
import * as MenubarPrimitive from "@radix-ui/react-menubar"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const MenubarMenu = MenubarPrimitive.Menu

const MenubarGroup = MenubarPrimitive.Group

const MenubarPortal = MenubarPrimitive.Portal

const MenubarSub = MenubarPrimitive.Sub

const MenubarRadioGroup = MenubarPrimitive.RadioGroup

const Menubar = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Root
    ref={ref}
    className={cn(
      "flex h-10 items-center space-x-1 rounded-md border bg-background p-1",
      className
    )}
    {...props}
  />
))
Menubar.displayName = MenubarPrimitive.Root.displayName

const MenubarTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      className
    )}
    {...props}
  />
))
MenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName

const MenubarSubTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <MenubarPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </MenubarPrimitive.SubTrigger>
))
MenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName

const MenubarSubContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
MenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName

const MenubarContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>
>(
  (
    { className, align = "start", alignOffset = -4, sideOffset = 8, ...props },
    ref
  ) => (
    <MenubarPrimitive.Portal>
      <MenubarPrimitive.Content
        ref={ref}
        align={align}
        alignOffset={alignOffset}
        sideOffset={sideOffset}
        className={cn(
          "z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
          className
        )}
        {...props}
      />
    </MenubarPrimitive.Portal>
  )
)
MenubarContent.displayName = MenubarPrimitive.Content.displayName

const MenubarItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
MenubarItem.displayName = MenubarPrimitive.Item.displayName

const MenubarCheckboxItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <MenubarPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.CheckboxItem>
))
MenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName

const MenubarRadioItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <MenubarPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.RadioItem>
))
MenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName

const MenubarLabel = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
MenubarLabel.displayName = MenubarPrimitive.Label.displayName

const MenubarSeparator = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
MenubarSeparator.displayName = MenubarPrimitive.Separator.displayName

const MenubarShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
MenubarShortcut.displayname = "MenubarShortcut"

export {
  Menubar,
  MenubarMenu,
  MenubarTrigger,
  MenubarContent,
  MenubarItem,
  MenubarSeparator,
  MenubarLabel,
  MenubarCheckboxItem,
  MenubarRadioGroup,
  MenubarRadioItem,
  MenubarPortal,
  MenubarSubContent,
  MenubarSubTrigger,
  MenubarGroup,
  MenubarSub,
  MenubarShortcut,
}


================================================
File: /src/components/ui/navigation-menu.tsx
================================================
import * as React from "react"
import * as NavigationMenuPrimitive from "@radix-ui/react-navigation-menu"
import { cva } from "class-variance-authority"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const NavigationMenu = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Root
    ref={ref}
    className={cn(
      "relative z-10 flex max-w-max flex-1 items-center justify-center",
      className
    )}
    {...props}
  >
    {children}
    <NavigationMenuViewport />
  </NavigationMenuPrimitive.Root>
))
NavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName

const NavigationMenuList = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.List
    ref={ref}
    className={cn(
      "group flex flex-1 list-none items-center justify-center space-x-1",
      className
    )}
    {...props}
  />
))
NavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName

const NavigationMenuItem = NavigationMenuPrimitive.Item

const navigationMenuTriggerStyle = cva(
  "group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50"
)

const NavigationMenuTrigger = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Trigger
    ref={ref}
    className={cn(navigationMenuTriggerStyle(), "group", className)}
    {...props}
  >
    {children}{" "}
    <ChevronDown
      className="relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180"
      aria-hidden="true"
    />
  </NavigationMenuPrimitive.Trigger>
))
NavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName

const NavigationMenuContent = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Content
    ref={ref}
    className={cn(
      "left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto ",
      className
    )}
    {...props}
  />
))
NavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName

const NavigationMenuLink = NavigationMenuPrimitive.Link

const NavigationMenuViewport = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>
>(({ className, ...props }, ref) => (
  <div className={cn("absolute left-0 top-full flex justify-center")}>
    <NavigationMenuPrimitive.Viewport
      className={cn(
        "origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]",
        className
      )}
      ref={ref}
      {...props}
    />
  </div>
))
NavigationMenuViewport.displayName =
  NavigationMenuPrimitive.Viewport.displayName

const NavigationMenuIndicator = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Indicator
    ref={ref}
    className={cn(
      "top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in",
      className
    )}
    {...props}
  >
    <div className="relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md" />
  </NavigationMenuPrimitive.Indicator>
))
NavigationMenuIndicator.displayName =
  NavigationMenuPrimitive.Indicator.displayName

export {
  navigationMenuTriggerStyle,
  NavigationMenu,
  NavigationMenuList,
  NavigationMenuItem,
  NavigationMenuContent,
  NavigationMenuTrigger,
  NavigationMenuLink,
  NavigationMenuIndicator,
  NavigationMenuViewport,
}


================================================
File: /src/components/ui/pagination.tsx
================================================
import * as React from "react"
import { ChevronLeft, ChevronRight, MoreHorizontal } from "lucide-react"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"
import type { ButtonProps } from "@/components/ui/button"

const Pagination = ({ className, ...props }: React.ComponentProps<"nav">) => (
  <nav
    role="navigation"
    aria-label="pagination"
    className={cn("mx-auto flex w-full justify-center", className)}
    {...props}
  />
)
Pagination.displayName = "Pagination"

const PaginationContent = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    className={cn("flex flex-row items-center gap-1", className)}
    {...props}
  />
))
PaginationContent.displayName = "PaginationContent"

const PaginationItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li ref={ref} className={cn("", className)} {...props} />
))
PaginationItem.displayName = "PaginationItem"

type PaginationLinkProps = {
  isActive?: boolean
} & Pick<ButtonProps, "size"> &
  React.ComponentProps<"a">

const PaginationLink = ({
  className,
  isActive,
  size = "icon",
  ...props
}: PaginationLinkProps) => (
  <a
    aria-current={isActive ? "page" : undefined}
    className={cn(
      buttonVariants({
        variant: isActive ? "outline" : "ghost",
        size,
      }),
      className
    )}
    {...props}
  />
)
PaginationLink.displayName = "PaginationLink"

const PaginationPrevious = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to previous page"
    size="default"
    className={cn("gap-1 pl-2.5", className)}
    {...props}
  >
    <ChevronLeft className="h-4 w-4" />
    <span>Previous</span>
  </PaginationLink>
)
PaginationPrevious.displayName = "PaginationPrevious"

const PaginationNext = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to next page"
    size="default"
    className={cn("gap-1 pr-2.5", className)}
    {...props}
  >
    <span>Next</span>
    <ChevronRight className="h-4 w-4" />
  </PaginationLink>
)
PaginationNext.displayName = "PaginationNext"

const PaginationEllipsis = ({
  className,
  ...props
}: React.ComponentProps<"span">) => (
  <span
    aria-hidden
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More pages</span>
  </span>
)
PaginationEllipsis.displayName = "PaginationEllipsis"

export {
  Pagination,
  PaginationContent,
  PaginationEllipsis,
  PaginationItem,
  PaginationLink,
  PaginationNext,
  PaginationPrevious,
}


================================================
File: /src/components/ui/popover.tsx
================================================
import * as React from "react"
import * as PopoverPrimitive from "@radix-ui/react-popover"

import { cn } from "@/lib/utils"

const Popover = PopoverPrimitive.Root

const PopoverTrigger = PopoverPrimitive.Trigger

const PopoverContent = React.forwardRef<
  React.ElementRef<typeof PopoverPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <PopoverPrimitive.Portal>
    <PopoverPrimitive.Content
      ref={ref}
      align={align}
      sideOffset={sideOffset}
      className={cn(
        "z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </PopoverPrimitive.Portal>
))
PopoverContent.displayName = PopoverPrimitive.Content.displayName

export { Popover, PopoverTrigger, PopoverContent }


================================================
File: /src/components/ui/progress.tsx
================================================
import * as React from "react"
import * as ProgressPrimitive from "@radix-ui/react-progress"

import { cn } from "@/lib/utils"

const Progress = React.forwardRef<
  React.ElementRef<typeof ProgressPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>
>(({ className, value, ...props }, ref) => (
  <ProgressPrimitive.Root
    ref={ref}
    className={cn(
      "relative h-4 w-full overflow-hidden rounded-full bg-secondary",
      className
    )}
    {...props}
  >
    <ProgressPrimitive.Indicator
      className="h-full w-full flex-1 bg-primary transition-all"
      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
    />
  </ProgressPrimitive.Root>
))
Progress.displayName = ProgressPrimitive.Root.displayName

export { Progress }


================================================
File: /src/components/ui/radio-group.tsx
================================================
import * as React from "react"
import * as RadioGroupPrimitive from "@radix-ui/react-radio-group"
import { Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const RadioGroup = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Root
      className={cn("grid gap-2", className)}
      {...props}
      ref={ref}
    />
  )
})
RadioGroup.displayName = RadioGroupPrimitive.Root.displayName

const RadioGroupItem = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Item
      ref={ref}
      className={cn(
        "aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    >
      <RadioGroupPrimitive.Indicator className="flex items-center justify-center">
        <Circle className="h-2.5 w-2.5 fill-current text-current" />
      </RadioGroupPrimitive.Indicator>
    </RadioGroupPrimitive.Item>
  )
})
RadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName

export { RadioGroup, RadioGroupItem }


================================================
File: /src/components/ui/resizable.tsx
================================================
import { GripVertical } from "lucide-react"
import * as ResizablePrimitive from "react-resizable-panels"

import { cn } from "@/lib/utils"

const ResizablePanelGroup = ({
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (
  <ResizablePrimitive.PanelGroup
    className={cn(
      "flex h-full w-full data-[panel-group-direction=vertical]:flex-col",
      className
    )}
    {...props}
  />
)

const ResizablePanel = ResizablePrimitive.Panel

const ResizableHandle = ({
  withHandle,
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {
  withHandle?: boolean
}) => (
  <ResizablePrimitive.PanelResizeHandle
    className={cn(
      "relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90",
      className
    )}
    {...props}
  >
    {withHandle && (
      <div className="z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border">
        <GripVertical className="h-2.5 w-2.5" />
      </div>
    )}
  </ResizablePrimitive.PanelResizeHandle>
)

export { ResizablePanelGroup, ResizablePanel, ResizableHandle }


================================================
File: /src/components/ui/scroll-area.tsx
================================================
import * as React from "react"
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"

import { cn } from "@/lib/utils"

const ScrollArea = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <ScrollAreaPrimitive.Root
    ref={ref}
    className={cn("relative overflow-hidden", className)}
    {...props}
  >
    <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">
      {children}
    </ScrollAreaPrimitive.Viewport>
    <ScrollBar />
    <ScrollAreaPrimitive.Corner />
  </ScrollAreaPrimitive.Root>
))
ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName

const ScrollBar = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>
>(({ className, orientation = "vertical", ...props }, ref) => (
  <ScrollAreaPrimitive.ScrollAreaScrollbar
    ref={ref}
    orientation={orientation}
    className={cn(
      "flex touch-none select-none transition-colors",
      orientation === "vertical" &&
        "h-full w-2.5 border-l border-l-transparent p-[1px]",
      orientation === "horizontal" &&
        "h-2.5 flex-col border-t border-t-transparent p-[1px]",
      className
    )}
    {...props}
  >
    <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border" />
  </ScrollAreaPrimitive.ScrollAreaScrollbar>
))
ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName

export { ScrollArea, ScrollBar }


================================================
File: /src/components/ui/select.tsx
================================================
import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { Check, ChevronDown, ChevronUp } from "lucide-react"

import { cn } from "@/lib/utils"

const Select = SelectPrimitive.Root

const SelectGroup = SelectPrimitive.Group

const SelectValue = SelectPrimitive.Value

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
      className
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDown className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
))
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName

const SelectScrollUpButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronUp className="h-4 w-4" />
  </SelectPrimitive.ScrollUpButton>
))
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName

const SelectScrollDownButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronDown className="h-4 w-4" />
  </SelectPrimitive.ScrollDownButton>
))
SelectScrollDownButton.displayName =
  SelectPrimitive.ScrollDownButton.displayName

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        position === "popper" &&
          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        className
      )}
      position={position}
      {...props}
    >
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn(
          "p-1",
          position === "popper" &&
            "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
))
SelectContent.displayName = SelectPrimitive.Content.displayName

const SelectLabel = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn("py-1.5 pl-8 pr-2 text-sm font-semibold", className)}
    {...props}
  />
))
SelectLabel.displayName = SelectPrimitive.Label.displayName

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>

    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
))
SelectItem.displayName = SelectPrimitive.Item.displayName

const SelectSeparator = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
SelectSeparator.displayName = SelectPrimitive.Separator.displayName

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
}


================================================
File: /src/components/ui/separator.tsx
================================================
import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"

import { cn } from "@/lib/utils"

const Separator = React.forwardRef<
  React.ElementRef<typeof SeparatorPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
>(
  (
    { className, orientation = "horizontal", decorative = true, ...props },
    ref
  ) => (
    <SeparatorPrimitive.Root
      ref={ref}
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "shrink-0 bg-border",
        orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]",
        className
      )}
      {...props}
    />
  )
)
Separator.displayName = SeparatorPrimitive.Root.displayName

export { Separator }


================================================
File: /src/components/ui/sheet.tsx
================================================
import * as SheetPrimitive from "@radix-ui/react-dialog"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"
import * as React from "react"

import { cn } from "@/lib/utils"

const Sheet = SheetPrimitive.Root

const SheetTrigger = SheetPrimitive.Trigger

const SheetClose = SheetPrimitive.Close

const SheetPortal = SheetPrimitive.Portal

const SheetOverlay = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
SheetOverlay.displayName = SheetPrimitive.Overlay.displayName

const sheetVariants = cva(
  "fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500",
  {
    variants: {
      side: {
        top: "inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top",
        bottom:
          "inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom",
        left: "inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm",
        right:
          "inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm",
      },
    },
    defaultVariants: {
      side: "right",
    },
  }
)

interface SheetContentProps
  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,
  VariantProps<typeof sheetVariants> { }

const SheetContent = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Content>,
  SheetContentProps
>(({ side = "right", className, children, ...props }, ref) => (
  <SheetPortal>
    <SheetOverlay />
    <SheetPrimitive.Content
      ref={ref}
      className={cn(sheetVariants({ side }), className)}
      {...props}
    >
      {children}
      <SheetPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </SheetPrimitive.Close>
    </SheetPrimitive.Content>
  </SheetPortal>
))
SheetContent.displayName = SheetPrimitive.Content.displayName

const SheetHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
SheetHeader.displayName = "SheetHeader"

const SheetFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
SheetFooter.displayName = "SheetFooter"

const SheetTitle = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold text-foreground", className)}
    {...props}
  />
))
SheetTitle.displayName = SheetPrimitive.Title.displayName

const SheetDescription = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
SheetDescription.displayName = SheetPrimitive.Description.displayName

export {
  Sheet, SheetClose,
  SheetContent, SheetDescription, SheetFooter, SheetHeader, SheetOverlay, SheetPortal, SheetTitle, SheetTrigger
}



================================================
File: /src/components/ui/sidebar.tsx
================================================
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva } from "class-variance-authority"
import type { VariantProps } from "class-variance-authority"
import { PanelLeft } from "lucide-react"

import { useIsMobile } from "@/hooks/use-mobile"
import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Separator } from "@/components/ui/separator"
import { Sheet, SheetContent } from "@/components/ui/sheet"
import { Skeleton } from "@/components/ui/skeleton"
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip"

const SIDEBAR_COOKIE_NAME = "sidebar:state"
const SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7
const SIDEBAR_WIDTH = "16rem"
const SIDEBAR_WIDTH_MOBILE = "18rem"
const SIDEBAR_WIDTH_ICON = "3rem"
const SIDEBAR_KEYBOARD_SHORTCUT = "b"

type SidebarContext = {
  state: "expanded" | "collapsed"
  open: boolean
  setOpen: (open: boolean) => void
  openMobile: boolean
  setOpenMobile: (open: boolean) => void
  isMobile: boolean
  toggleSidebar: () => void
}

const SidebarContext = React.createContext<SidebarContext | null>(null)

function useSidebar() {
  const context = React.useContext(SidebarContext)
  if (!context) {
    throw new Error("useSidebar must be used within a SidebarProvider.")
  }

  return context
}

const SidebarProvider = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    defaultOpen?: boolean
    open?: boolean
    onOpenChange?: (open: boolean) => void
  }
>(
  (
    {
      defaultOpen = true,
      open: openProp,
      onOpenChange: setOpenProp,
      className,
      style,
      children,
      ...props
    },
    ref
  ) => {
    const isMobile = useIsMobile()
    const [openMobile, setOpenMobile] = React.useState(false)

    // This is the internal state of the sidebar.
    // We use openProp and setOpenProp for control from outside the component.
    const [_open, _setOpen] = React.useState(defaultOpen)
    const open = openProp ?? _open
    const setOpen = React.useCallback(
      (value: boolean | ((value: boolean) => boolean)) => {
        const openState = typeof value === "function" ? value(open) : value
        if (setOpenProp) {
          setOpenProp(openState)
        } else {
          _setOpen(openState)
        }

        // This sets the cookie to keep the sidebar state.
        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`
      },
      [setOpenProp, open]
    )

    // Helper to toggle the sidebar.
    const toggleSidebar = React.useCallback(() => {
      return isMobile
        ? setOpenMobile((open) => !open)
        : setOpen((open) => !open)
    }, [isMobile, setOpen, setOpenMobile])

    // Adds a keyboard shortcut to toggle the sidebar.
    React.useEffect(() => {
      const handleKeyDown = (event: KeyboardEvent) => {
        if (
          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&
          (event.metaKey || event.ctrlKey)
        ) {
          event.preventDefault()
          toggleSidebar()
        }
      }

      window.addEventListener("keydown", handleKeyDown)
      return () => window.removeEventListener("keydown", handleKeyDown)
    }, [toggleSidebar])

    // We add a state so that we can do data-state="expanded" or "collapsed".
    // This makes it easier to style the sidebar with Tailwind classes.
    const state = open ? "expanded" : "collapsed"

    const contextValue = React.useMemo<SidebarContext>(
      () => ({
        state,
        open,
        setOpen,
        isMobile,
        openMobile,
        setOpenMobile,
        toggleSidebar,
      }),
      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]
    )

    return (
      <SidebarContext.Provider value={contextValue}>
        <TooltipProvider delayDuration={0}>
          <div
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH,
                "--sidebar-width-icon": SIDEBAR_WIDTH_ICON,
                ...style,
              } as React.CSSProperties
            }
            className={cn(
              "group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar",
              className
            )}
            ref={ref}
            {...props}
          >
            {children}
          </div>
        </TooltipProvider>
      </SidebarContext.Provider>
    )
  }
)
SidebarProvider.displayName = "SidebarProvider"

const Sidebar = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    side?: "left" | "right"
    variant?: "sidebar" | "floating" | "inset"
    collapsible?: "offcanvas" | "icon" | "none"
  }
>(
  (
    {
      side = "left",
      variant = "sidebar",
      collapsible = "offcanvas",
      className,
      children,
      ...props
    },
    ref
  ) => {
    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()

    if (collapsible === "none") {
      return (
        <div
          className={cn(
            "flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground",
            className
          )}
          ref={ref}
          {...props}
        >
          {children}
        </div>
      )
    }

    if (isMobile) {
      return (
        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>
          <SheetContent
            data-sidebar="sidebar"
            data-mobile="true"
            className="w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden"
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH_MOBILE,
              } as React.CSSProperties
            }
            side={side}
          >
            <div className="flex h-full w-full flex-col">{children}</div>
          </SheetContent>
        </Sheet>
      )
    }

    return (
      <div
        ref={ref}
        className="group peer hidden md:block text-sidebar-foreground"
        data-state={state}
        data-collapsible={state === "collapsed" ? collapsible : ""}
        data-variant={variant}
        data-side={side}
      >
        {/* This is what handles the sidebar gap on desktop */}
        <div
          className={cn(
            "duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear",
            "group-data-[collapsible=offcanvas]:w-0",
            "group-data-[side=right]:rotate-180",
            variant === "floating" || variant === "inset"
              ? "group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon]"
          )}
        />
        <div
          className={cn(
            "duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex",
            side === "left"
              ? "left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]"
              : "right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]",
            // Adjust the padding for floating and inset variants.
            variant === "floating" || variant === "inset"
              ? "p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l",
            className
          )}
          {...props}
        >
          <div
            data-sidebar="sidebar"
            className="flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow"
          >
            {children}
          </div>
        </div>
      </div>
    )
  }
)
Sidebar.displayName = "Sidebar"

const SidebarTrigger = React.forwardRef<
  React.ElementRef<typeof Button>,
  React.ComponentProps<typeof Button>
>(({ className, onClick, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <Button
      ref={ref}
      data-sidebar="trigger"
      variant="ghost"
      size="icon"
      className={cn("h-7 w-7", className)}
      onClick={(event) => {
        onClick?.(event)
        toggleSidebar()
      }}
      {...props}
    >
      <PanelLeft />
      <span className="sr-only">Toggle Sidebar</span>
    </Button>
  )
})
SidebarTrigger.displayName = "SidebarTrigger"

const SidebarRail = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button">
>(({ className, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <button
      ref={ref}
      data-sidebar="rail"
      aria-label="Toggle Sidebar"
      tabIndex={-1}
      onClick={toggleSidebar}
      title="Toggle Sidebar"
      className={cn(
        "absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex",
        "[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize",
        "[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize",
        "group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar",
        "[[data-side=left][data-collapsible=offcanvas]_&]:-right-2",
        "[[data-side=right][data-collapsible=offcanvas]_&]:-left-2",
        className
      )}
      {...props}
    />
  )
})
SidebarRail.displayName = "SidebarRail"

const SidebarInset = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"main">
>(({ className, ...props }, ref) => {
  return (
    <main
      ref={ref}
      className={cn(
        "relative flex min-h-svh flex-1 flex-col bg-background",
        "peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow",
        className
      )}
      {...props}
    />
  )
})
SidebarInset.displayName = "SidebarInset"

const SidebarInput = React.forwardRef<
  React.ElementRef<typeof Input>,
  React.ComponentProps<typeof Input>
>(({ className, ...props }, ref) => {
  return (
    <Input
      ref={ref}
      data-sidebar="input"
      className={cn(
        "h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring",
        className
      )}
      {...props}
    />
  )
})
SidebarInput.displayName = "SidebarInput"

const SidebarHeader = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="header"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
})
SidebarHeader.displayName = "SidebarHeader"

const SidebarFooter = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="footer"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
})
SidebarFooter.displayName = "SidebarFooter"

const SidebarSeparator = React.forwardRef<
  React.ElementRef<typeof Separator>,
  React.ComponentProps<typeof Separator>
>(({ className, ...props }, ref) => {
  return (
    <Separator
      ref={ref}
      data-sidebar="separator"
      className={cn("mx-2 w-auto bg-sidebar-border", className)}
      {...props}
    />
  )
})
SidebarSeparator.displayName = "SidebarSeparator"

const SidebarContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="content"
      className={cn(
        "flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarContent.displayName = "SidebarContent"

const SidebarGroup = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="group"
      className={cn("relative flex w-full min-w-0 flex-col p-2", className)}
      {...props}
    />
  )
})
SidebarGroup.displayName = "SidebarGroup"

const SidebarGroupLabel = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "div"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-label"
      className={cn(
        "duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        "group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarGroupLabel.displayName = "SidebarGroupLabel"

const SidebarGroupAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-action"
      className={cn(
        "absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarGroupAction.displayName = "SidebarGroupAction"

const SidebarGroupContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="group-content"
    className={cn("w-full text-sm", className)}
    {...props}
  />
))
SidebarGroupContent.displayName = "SidebarGroupContent"

const SidebarMenu = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu"
    className={cn("flex w-full min-w-0 flex-col gap-1", className)}
    {...props}
  />
))
SidebarMenu.displayName = "SidebarMenu"

const SidebarMenuItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    data-sidebar="menu-item"
    className={cn("group/menu-item relative", className)}
    {...props}
  />
))
SidebarMenuItem.displayName = "SidebarMenuItem"

const sidebarMenuButtonVariants = cva(
  "peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "hover:bg-sidebar-accent hover:text-sidebar-accent-foreground",
        outline:
          "bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]",
      },
      size: {
        default: "h-8 text-sm",
        sm: "h-7 text-xs",
        lg: "h-12 text-sm group-data-[collapsible=icon]:!p-0",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const SidebarMenuButton = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean
    isActive?: boolean
    tooltip?: string | React.ComponentProps<typeof TooltipContent>
  } & VariantProps<typeof sidebarMenuButtonVariants>
>(
  (
    {
      asChild = false,
      isActive = false,
      variant = "default",
      size = "default",
      tooltip,
      className,
      ...props
    },
    ref
  ) => {
    const Comp = asChild ? Slot : "button"
    const { isMobile, state } = useSidebar()

    const button = (
      <Comp
        ref={ref}
        data-sidebar="menu-button"
        data-size={size}
        data-active={isActive}
        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}
        {...props}
      />
    )

    if (!tooltip) {
      return button
    }

    if (typeof tooltip === "string") {
      tooltip = {
        children: tooltip,
      }
    }

    return (
      <Tooltip>
        <TooltipTrigger asChild>{button}</TooltipTrigger>
        <TooltipContent
          side="right"
          align="center"
          hidden={state !== "collapsed" || isMobile}
          {...tooltip}
        />
      </Tooltip>
    )
  }
)
SidebarMenuButton.displayName = "SidebarMenuButton"

const SidebarMenuAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean
    showOnHover?: boolean
  }
>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-action"
      className={cn(
        "absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "peer-data-[size=sm]/menu-button:top-1",
        "peer-data-[size=default]/menu-button:top-1.5",
        "peer-data-[size=lg]/menu-button:top-2.5",
        "group-data-[collapsible=icon]:hidden",
        showOnHover &&
          "group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarMenuAction.displayName = "SidebarMenuAction"

const SidebarMenuBadge = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="menu-badge"
    className={cn(
      "absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none",
      "peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground",
      "peer-data-[size=sm]/menu-button:top-1",
      "peer-data-[size=default]/menu-button:top-1.5",
      "peer-data-[size=lg]/menu-button:top-2.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
))
SidebarMenuBadge.displayName = "SidebarMenuBadge"

const SidebarMenuSkeleton = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    showIcon?: boolean
  }
>(({ className, showIcon = false, ...props }, ref) => {
  // Random width between 50 to 90%.
  const width = React.useMemo(() => {
    return `${Math.floor(Math.random() * 40) + 50}%`
  }, [])

  return (
    <div
      ref={ref}
      data-sidebar="menu-skeleton"
      className={cn("rounded-md h-8 flex gap-2 px-2 items-center", className)}
      {...props}
    >
      {showIcon && (
        <Skeleton
          className="size-4 rounded-md"
          data-sidebar="menu-skeleton-icon"
        />
      )}
      <Skeleton
        className="h-4 flex-1 max-w-[--skeleton-width]"
        data-sidebar="menu-skeleton-text"
        style={
          {
            "--skeleton-width": width,
          } as React.CSSProperties
        }
      />
    </div>
  )
})
SidebarMenuSkeleton.displayName = "SidebarMenuSkeleton"

const SidebarMenuSub = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu-sub"
    className={cn(
      "mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
))
SidebarMenuSub.displayName = "SidebarMenuSub"

const SidebarMenuSubItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ ...props }, ref) => <li ref={ref} {...props} />)
SidebarMenuSubItem.displayName = "SidebarMenuSubItem"

const SidebarMenuSubButton = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentProps<"a"> & {
    asChild?: boolean
    size?: "sm" | "md"
    isActive?: boolean
  }
>(({ asChild = false, size = "md", isActive, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-sub-button"
      data-size={size}
      data-active={isActive}
      className={cn(
        "flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground",
        "data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground",
        size === "sm" && "text-xs",
        size === "md" && "text-sm",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarMenuSubButton.displayName = "SidebarMenuSubButton"

export {
  Sidebar,
  SidebarContent,
  SidebarFooter,
  SidebarGroup,
  SidebarGroupAction,
  SidebarGroupContent,
  SidebarGroupLabel,
  SidebarHeader,
  SidebarInput,
  SidebarInset,
  SidebarMenu,
  SidebarMenuAction,
  SidebarMenuBadge,
  SidebarMenuButton,
  SidebarMenuItem,
  SidebarMenuSkeleton,
  SidebarMenuSub,
  SidebarMenuSubButton,
  SidebarMenuSubItem,
  SidebarProvider,
  SidebarRail,
  SidebarSeparator,
  SidebarTrigger,
  useSidebar,
}


================================================
File: /src/components/ui/skeleton.tsx
================================================
import { cn } from "@/lib/utils"

function Skeleton({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) {
  return (
    <div
      className={cn("animate-pulse rounded-md bg-muted", className)}
      {...props}
    />
  )
}

export { Skeleton }


================================================
File: /src/components/ui/slider.tsx
================================================
import * as React from "react"
import * as SliderPrimitive from "@radix-ui/react-slider"

import { cn } from "@/lib/utils"

const Slider = React.forwardRef<
  React.ElementRef<typeof SliderPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>
>(({ className, ...props }, ref) => (
  <SliderPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex w-full touch-none select-none items-center",
      className
    )}
    {...props}
  >
    <SliderPrimitive.Track className="relative h-2 w-full grow overflow-hidden rounded-full bg-secondary">
      <SliderPrimitive.Range className="absolute h-full bg-primary" />
    </SliderPrimitive.Track>
    <SliderPrimitive.Thumb className="block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50" />
  </SliderPrimitive.Root>
))
Slider.displayName = SliderPrimitive.Root.displayName

export { Slider }


================================================
File: /src/components/ui/sonner.tsx
================================================
import { useTheme } from "next-themes"
import { Toaster as Sonner } from "sonner"

type ToasterProps = React.ComponentProps<typeof Sonner>

const Toaster = ({ ...props }: ToasterProps) => {
  const { theme = "system" } = useTheme()

  return (
    <Sonner
      theme={theme as ToasterProps["theme"]}
      className="toaster group"
      toastOptions={{
        classNames: {
          toast:
            "group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg",
          description: "group-[.toast]:text-muted-foreground",
          actionButton:
            "group-[.toast]:bg-primary group-[.toast]:text-primary-foreground",
          cancelButton:
            "group-[.toast]:bg-muted group-[.toast]:text-muted-foreground",
        },
      }}
      {...props}
    />
  )
}

export { Toaster }


================================================
File: /src/components/ui/switch.tsx
================================================
import * as React from "react"
import * as SwitchPrimitives from "@radix-ui/react-switch"

import { cn } from "@/lib/utils"

const Switch = React.forwardRef<
  React.ElementRef<typeof SwitchPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>
>(({ className, ...props }, ref) => (
  <SwitchPrimitives.Root
    className={cn(
      "peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input",
      className
    )}
    {...props}
    ref={ref}
  >
    <SwitchPrimitives.Thumb
      className={cn(
        "pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0"
      )}
    />
  </SwitchPrimitives.Root>
))
Switch.displayName = SwitchPrimitives.Root.displayName

export { Switch }


================================================
File: /src/components/ui/table.tsx
================================================
import * as React from "react"

import { cn } from "@/lib/utils"

const Table = React.forwardRef<
  HTMLTableElement,
  React.HTMLAttributes<HTMLTableElement>
>(({ className, ...props }, ref) => (
  <div className="relative w-full overflow-auto">
    <table
      ref={ref}
      className={cn("w-full caption-bottom text-sm", className)}
      {...props}
    />
  </div>
))
Table.displayName = "Table"

const TableHeader = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <thead ref={ref} className={cn("[&_tr]:border-b", className)} {...props} />
))
TableHeader.displayName = "TableHeader"

const TableBody = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tbody
    ref={ref}
    className={cn("[&_tr:last-child]:border-0", className)}
    {...props}
  />
))
TableBody.displayName = "TableBody"

const TableFooter = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tfoot
    ref={ref}
    className={cn(
      "border-t bg-muted/50 font-medium [&>tr]:last:border-b-0",
      className
    )}
    {...props}
  />
))
TableFooter.displayName = "TableFooter"

const TableRow = React.forwardRef<
  HTMLTableRowElement,
  React.HTMLAttributes<HTMLTableRowElement>
>(({ className, ...props }, ref) => (
  <tr
    ref={ref}
    className={cn(
      "border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted",
      className
    )}
    {...props}
  />
))
TableRow.displayName = "TableRow"

const TableHead = React.forwardRef<
  HTMLTableCellElement,
  React.ThHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <th
    ref={ref}
    className={cn(
      "h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0",
      className
    )}
    {...props}
  />
))
TableHead.displayName = "TableHead"

const TableCell = React.forwardRef<
  HTMLTableCellElement,
  React.TdHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <td
    ref={ref}
    className={cn("p-4 align-middle [&:has([role=checkbox])]:pr-0", className)}
    {...props}
  />
))
TableCell.displayName = "TableCell"

const TableCaption = React.forwardRef<
  HTMLTableCaptionElement,
  React.HTMLAttributes<HTMLTableCaptionElement>
>(({ className, ...props }, ref) => (
  <caption
    ref={ref}
    className={cn("mt-4 text-sm text-muted-foreground", className)}
    {...props}
  />
))
TableCaption.displayName = "TableCaption"

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
}


================================================
File: /src/components/ui/tabs.tsx
================================================
import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "@/lib/utils"

const Tabs = TabsPrimitive.Root

const TabsList = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground",
      className
    )}
    {...props}
  />
))
TabsList.displayName = TabsPrimitive.List.displayName

const TabsTrigger = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm",
      className
    )}
    {...props}
  />
))
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName

const TabsContent = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
      className
    )}
    {...props}
  />
))
TabsContent.displayName = TabsPrimitive.Content.displayName

export { Tabs, TabsList, TabsTrigger, TabsContent }


================================================
File: /src/components/ui/textarea.tsx
================================================
import * as React from "react"

import { cn } from "@/lib/utils"

export interface TextareaProps
  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}

const Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(
  ({ className, ...props }, ref) => {
    return (
      <textarea
        className={cn(
          "flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Textarea.displayName = "Textarea"

export { Textarea }


================================================
File: /src/components/ui/toast.tsx
================================================
import * as React from "react"
import * as ToastPrimitives from "@radix-ui/react-toast"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const ToastProvider = ToastPrimitives.Provider

const ToastViewport = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Viewport>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Viewport
    ref={ref}
    className={cn(
      "fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]",
      className
    )}
    {...props}
  />
))
ToastViewport.displayName = ToastPrimitives.Viewport.displayName

const toastVariants = cva(
  "group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full",
  {
    variants: {
      variant: {
        default: "border bg-background text-foreground",
        destructive:
          "destructive group border-destructive bg-destructive text-destructive-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Toast = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &
    VariantProps<typeof toastVariants>
>(({ className, variant, ...props }, ref) => {
  return (
    <ToastPrimitives.Root
      ref={ref}
      className={cn(toastVariants({ variant }), className)}
      {...props}
    />
  )
})
Toast.displayName = ToastPrimitives.Root.displayName

const ToastAction = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Action>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Action
    ref={ref}
    className={cn(
      "inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive",
      className
    )}
    {...props}
  />
))
ToastAction.displayName = ToastPrimitives.Action.displayName

const ToastClose = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Close>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Close
    ref={ref}
    className={cn(
      "absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600",
      className
    )}
    toast-close=""
    {...props}
  >
    <X className="h-4 w-4" />
  </ToastPrimitives.Close>
))
ToastClose.displayName = ToastPrimitives.Close.displayName

const ToastTitle = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Title>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Title
    ref={ref}
    className={cn("text-sm font-semibold", className)}
    {...props}
  />
))
ToastTitle.displayName = ToastPrimitives.Title.displayName

const ToastDescription = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Description>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Description
    ref={ref}
    className={cn("text-sm opacity-90", className)}
    {...props}
  />
))
ToastDescription.displayName = ToastPrimitives.Description.displayName

type ToastProps = React.ComponentPropsWithoutRef<typeof Toast>

type ToastActionElement = React.ReactElement<typeof ToastAction>

export {
  type ToastProps,
  type ToastActionElement,
  ToastProvider,
  ToastViewport,
  Toast,
  ToastTitle,
  ToastDescription,
  ToastClose,
  ToastAction,
}


================================================
File: /src/components/ui/toaster.tsx
================================================
import { useToast } from "@/hooks/use-toast"
import {
  Toast,
  ToastClose,
  ToastDescription,
  ToastProvider,
  ToastTitle,
  ToastViewport,
} from "@/components/ui/toast"

export function Toaster() {
  const { toasts } = useToast()

  return (
    <ToastProvider>
      {toasts.map(function ({ id, title, description, action, ...props }) {
        return (
          <Toast key={id} {...props}>
            <div className="grid gap-1">
              {title && <ToastTitle>{title}</ToastTitle>}
              {description && (
                <ToastDescription>{description}</ToastDescription>
              )}
            </div>
            {action}
            <ToastClose />
          </Toast>
        )
      })}
      <ToastViewport />
    </ToastProvider>
  )
}


================================================
File: /src/components/ui/toggle-group.tsx
================================================
import * as React from "react"
import * as ToggleGroupPrimitive from "@radix-ui/react-toggle-group"
import { type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"
import { toggleVariants } from "@/components/ui/toggle"

const ToggleGroupContext = React.createContext<
  VariantProps<typeof toggleVariants>
>({
  size: "default",
  variant: "default",
})

const ToggleGroup = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, children, ...props }, ref) => (
  <ToggleGroupPrimitive.Root
    ref={ref}
    className={cn("flex items-center justify-center gap-1", className)}
    {...props}
  >
    <ToggleGroupContext.Provider value={{ variant, size }}>
      {children}
    </ToggleGroupContext.Provider>
  </ToggleGroupPrimitive.Root>
))

ToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName

const ToggleGroupItem = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &
    VariantProps<typeof toggleVariants>
>(({ className, children, variant, size, ...props }, ref) => {
  const context = React.useContext(ToggleGroupContext)

  return (
    <ToggleGroupPrimitive.Item
      ref={ref}
      className={cn(
        toggleVariants({
          variant: context.variant || variant,
          size: context.size || size,
        }),
        className
      )}
      {...props}
    >
      {children}
    </ToggleGroupPrimitive.Item>
  )
})

ToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName

export { ToggleGroup, ToggleGroupItem }


================================================
File: /src/components/ui/toggle.tsx
================================================
import * as React from "react"
import * as TogglePrimitive from "@radix-ui/react-toggle"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const toggleVariants = cva(
  "inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground",
  {
    variants: {
      variant: {
        default: "bg-transparent",
        outline:
          "border border-input bg-transparent hover:bg-accent hover:text-accent-foreground",
      },
      size: {
        default: "h-10 px-3",
        sm: "h-9 px-2.5",
        lg: "h-11 px-5",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const Toggle = React.forwardRef<
  React.ElementRef<typeof TogglePrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, ...props }, ref) => (
  <TogglePrimitive.Root
    ref={ref}
    className={cn(toggleVariants({ variant, size, className }))}
    {...props}
  />
))

Toggle.displayName = TogglePrimitive.Root.displayName

export { Toggle, toggleVariants }


================================================
File: /src/components/ui/tooltip.tsx
================================================
import * as React from "react"
import * as TooltipPrimitive from "@radix-ui/react-tooltip"

import { cn } from "@/lib/utils"

const TooltipProvider = TooltipPrimitive.Provider

const Tooltip = TooltipPrimitive.Root

const TooltipTrigger = TooltipPrimitive.Trigger

const TooltipContent = React.forwardRef<
  React.ElementRef<typeof TooltipPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <TooltipPrimitive.Content
    ref={ref}
    sideOffset={sideOffset}
    className={cn(
      "z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
TooltipContent.displayName = TooltipPrimitive.Content.displayName

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }


================================================
File: /src/components/ui/use-toast.ts
================================================
import { useToast, toast } from "@/hooks/use-toast";

export { useToast, toast };


================================================
File: /src/hooks/use-mobile.tsx
================================================
import * as React from "react"

const MOBILE_BREAKPOINT = 768

export function useIsMobile() {
  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)

  React.useEffect(() => {
    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)
    const onChange = () => {
      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    }
    mql.addEventListener("change", onChange)
    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    return () => mql.removeEventListener("change", onChange)
  }, [])

  return !!isMobile
}


================================================
File: /src/hooks/use-toast.ts
================================================
import * as React from "react"

import type {
  ToastActionElement,
  ToastProps,
} from "@/components/ui/toast"

const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 1000000

type ToasterToast = ToastProps & {
  id: string
  title?: React.ReactNode
  description?: React.ReactNode
  action?: ToastActionElement
}

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const

let count = 0

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER
  return count.toString()
}

type ActionType = typeof actionTypes

type Action =
  | {
      type: ActionType["ADD_TOAST"]
      toast: ToasterToast
    }
  | {
      type: ActionType["UPDATE_TOAST"]
      toast: Partial<ToasterToast>
    }
  | {
      type: ActionType["DISMISS_TOAST"]
      toastId?: ToasterToast["id"]
    }
  | {
      type: ActionType["REMOVE_TOAST"]
      toastId?: ToasterToast["id"]
    }

interface State {
  toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    })
  }, TOAST_REMOVE_DELAY)

  toastTimeouts.set(toastId, timeout)
}

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      }

    case "DISMISS_TOAST": {
      const { toastId } = action

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      }
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}

const listeners: Array<(state: State) => void> = []

let memoryState: State = { toasts: [] }

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => {
    listener(memoryState)
  })
}

type Toast = Omit<ToasterToast, "id">

function toast({ ...props }: Toast) {
  const id = genId()

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    })
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  })

  return {
    id: id,
    dismiss,
    update,
  }
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState)

  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [state])

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  }
}

export { useToast, toast }


================================================
File: /src/integrations/supabase/client.ts
================================================
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://tvykctusxldoizqcyzzp.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InR2eWtjdHVzeGxkb2l6cWN5enpwIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MzU1NDA1MDMsImV4cCI6MjA1MTExNjUwM30.WrF1L6jBXe6NtX5M74UMhP_-bJXYNL3bBU-iLfSl6WM";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

================================================
File: /src/integrations/supabase/types.ts
================================================
export type Json =
  | string
  | number
  | boolean
  | null
  | { [key: string]: Json | undefined }
  | Json[]

export type Database = {
  public: {
    Tables: {
      browserstack_configs: {
        Row: {
          browser: string | null
          browser_version: string | null
          created_at: string | null
          device: string | null
          device_type: Database["public"]["Enums"]["device_type"]
          id: string
          is_active: boolean | null
          is_predefined: boolean | null
          name: string
          os: string
          os_version: string
          updated_at: string | null
          user_id: string
        }
        Insert: {
          browser?: string | null
          browser_version?: string | null
          created_at?: string | null
          device?: string | null
          device_type: Database["public"]["Enums"]["device_type"]
          id?: string
          is_active?: boolean | null
          is_predefined?: boolean | null
          name: string
          os: string
          os_version: string
          updated_at?: string | null
          user_id: string
        }
        Update: {
          browser?: string | null
          browser_version?: string | null
          created_at?: string | null
          device?: string | null
          device_type?: Database["public"]["Enums"]["device_type"]
          id?: string
          is_active?: boolean | null
          is_predefined?: boolean | null
          name?: string
          os?: string
          os_version?: string
          updated_at?: string | null
          user_id?: string
        }
        Relationships: []
      }
      comparison_tests: {
        Row: {
          baseline_url: string
          created_at: string | null
          id: string
          new_url: string
          status: Database["public"]["Enums"]["test_status"] | null
          updated_at: string | null
          user_id: string
        }
        Insert: {
          baseline_url: string
          created_at?: string | null
          id?: string
          new_url: string
          status?: Database["public"]["Enums"]["test_status"] | null
          updated_at?: string | null
          user_id: string
        }
        Update: {
          baseline_url?: string
          created_at?: string | null
          id?: string
          new_url?: string
          status?: Database["public"]["Enums"]["test_status"] | null
          updated_at?: string | null
          user_id?: string
        }
        Relationships: []
      }
      test_screenshots: {
        Row: {
          baseline_screenshot_url: string | null
          created_at: string | null
          device_name: string
          diff_percentage: number | null
          id: string
          new_screenshot_url: string | null
          os_version: string
          test_id: string | null
        }
        Insert: {
          baseline_screenshot_url?: string | null
          created_at?: string | null
          device_name: string
          diff_percentage?: number | null
          id?: string
          new_screenshot_url?: string | null
          os_version: string
          test_id?: string | null
        }
        Update: {
          baseline_screenshot_url?: string | null
          created_at?: string | null
          device_name?: string
          diff_percentage?: number | null
          id?: string
          new_screenshot_url?: string | null
          os_version?: string
          test_id?: string | null
        }
        Relationships: [
          {
            foreignKeyName: "test_screenshots_test_id_fkey"
            columns: ["test_id"]
            isOneToOne: false
            referencedRelation: "comparison_tests"
            referencedColumns: ["id"]
          },
        ]
      }
    }
    Views: {
      [_ in never]: never
    }
    Functions: {
      [_ in never]: never
    }
    Enums: {
      device_type: "desktop" | "mobile"
      test_status: "pending" | "in_progress" | "completed" | "failed"
    }
    CompositeTypes: {
      [_ in never]: never
    }
  }
}

type PublicSchema = Database[Extract<keyof Database, "public">]

export type Tables<
  PublicTableNameOrOptions extends
    | keyof (PublicSchema["Tables"] & PublicSchema["Views"])
    | { schema: keyof Database },
  TableName extends PublicTableNameOrOptions extends { schema: keyof Database }
    ? keyof (Database[PublicTableNameOrOptions["schema"]]["Tables"] &
        Database[PublicTableNameOrOptions["schema"]]["Views"])
    : never = never,
> = PublicTableNameOrOptions extends { schema: keyof Database }
  ? (Database[PublicTableNameOrOptions["schema"]]["Tables"] &
      Database[PublicTableNameOrOptions["schema"]]["Views"])[TableName] extends {
      Row: infer R
    }
    ? R
    : never
  : PublicTableNameOrOptions extends keyof (PublicSchema["Tables"] &
        PublicSchema["Views"])
    ? (PublicSchema["Tables"] &
        PublicSchema["Views"])[PublicTableNameOrOptions] extends {
        Row: infer R
      }
      ? R
      : never
    : never

export type TablesInsert<
  PublicTableNameOrOptions extends
    | keyof PublicSchema["Tables"]
    | { schema: keyof Database },
  TableName extends PublicTableNameOrOptions extends { schema: keyof Database }
    ? keyof Database[PublicTableNameOrOptions["schema"]]["Tables"]
    : never = never,
> = PublicTableNameOrOptions extends { schema: keyof Database }
  ? Database[PublicTableNameOrOptions["schema"]]["Tables"][TableName] extends {
      Insert: infer I
    }
    ? I
    : never
  : PublicTableNameOrOptions extends keyof PublicSchema["Tables"]
    ? PublicSchema["Tables"][PublicTableNameOrOptions] extends {
        Insert: infer I
      }
      ? I
      : never
    : never

export type TablesUpdate<
  PublicTableNameOrOptions extends
    | keyof PublicSchema["Tables"]
    | { schema: keyof Database },
  TableName extends PublicTableNameOrOptions extends { schema: keyof Database }
    ? keyof Database[PublicTableNameOrOptions["schema"]]["Tables"]
    : never = never,
> = PublicTableNameOrOptions extends { schema: keyof Database }
  ? Database[PublicTableNameOrOptions["schema"]]["Tables"][TableName] extends {
      Update: infer U
    }
    ? U
    : never
  : PublicTableNameOrOptions extends keyof PublicSchema["Tables"]
    ? PublicSchema["Tables"][PublicTableNameOrOptions] extends {
        Update: infer U
      }
      ? U
      : never
    : never

export type Enums<
  PublicEnumNameOrOptions extends
    | keyof PublicSchema["Enums"]
    | { schema: keyof Database },
  EnumName extends PublicEnumNameOrOptions extends { schema: keyof Database }
    ? keyof Database[PublicEnumNameOrOptions["schema"]]["Enums"]
    : never = never,
> = PublicEnumNameOrOptions extends { schema: keyof Database }
  ? Database[PublicEnumNameOrOptions["schema"]]["Enums"][EnumName]
  : PublicEnumNameOrOptions extends keyof PublicSchema["Enums"]
    ? PublicSchema["Enums"][PublicEnumNameOrOptions]
    : never

export type CompositeTypes<
  PublicCompositeTypeNameOrOptions extends
    | keyof PublicSchema["CompositeTypes"]
    | { schema: keyof Database },
  CompositeTypeName extends PublicCompositeTypeNameOrOptions extends {
    schema: keyof Database
  }
    ? keyof Database[PublicCompositeTypeNameOrOptions["schema"]]["CompositeTypes"]
    : never = never,
> = PublicCompositeTypeNameOrOptions extends { schema: keyof Database }
  ? Database[PublicCompositeTypeNameOrOptions["schema"]]["CompositeTypes"][CompositeTypeName]
  : PublicCompositeTypeNameOrOptions extends keyof PublicSchema["CompositeTypes"]
    ? PublicSchema["CompositeTypes"][PublicCompositeTypeNameOrOptions]
    : never


================================================
File: /src/lib/utils.ts
================================================
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

================================================
File: /src/pages/Comparison.tsx
================================================
import { useState } from "react";
import { Layout, BarChart3, Smartphone, Settings } from "lucide-react";
import { ComparisonForm } from "@/components/comparison/ComparisonForm";
import { TestResultsTable } from "@/components/comparison/TestResultsTable";
import { ResultsDialog } from "@/components/comparison/ResultsDialog";

const Comparison = () => {
  const [showResults, setShowResults] = useState(false);
  const [selectedUrls, setSelectedUrls] = useState({
    baselineUrl: "",
    newUrl: ""
  });

  const handleTestSelect = (baselineUrl: string, newUrl: string) => {
    setSelectedUrls({ baselineUrl, newUrl });
  };

  return (
    <div className="flex min-h-screen bg-background">
      {/* Sidebar */}
      <aside className="fixed inset-y-0 left-0 w-64 border-r border-border bg-card">
        <div className="p-4">
          <div className="flex items-center gap-2 mb-8">
            <Layout className="h-6 w-6 text-foreground" />
            <h1 className="text-xl font-bold text-foreground">TestHub</h1>
          </div>
          
          <nav className="space-y-2">
            <a href="/" className="flex items-center gap-2 p-2 rounded-lg text-muted-foreground hover:bg-accent hover:text-accent-foreground">
              <BarChart3 className="h-5 w-5" />
              Dashboard
            </a>
            <a href="/comparison" className="flex items-center gap-2 p-2 rounded-lg bg-accent text-accent-foreground">
              <Layout className="h-5 w-5" />
              Comparison Module
            </a>
            <a href="/device-testing" className="flex items-center gap-2 p-2 rounded-lg text-muted-foreground hover:bg-accent hover:text-accent-foreground">
              <Smartphone className="h-5 w-5" />
              Device Testing
            </a>
            <a href="/settings" className="flex items-center gap-2 p-2 rounded-lg text-muted-foreground hover:bg-accent hover:text-accent-foreground">
              <Settings className="h-5 w-5" />
              Settings
            </a>
          </nav>
        </div>
      </aside>

      {/* Main Content */}
      <main className="flex-1 ml-64">
        <header className="sticky top-0 z-10 border-b border-border bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60 p-4">
          <h2 className="text-2xl font-semibold text-foreground">Comparison Module</h2>
        </header>

        <div className="container mx-auto p-6 max-w-7xl">
          <ComparisonForm 
            onTestCreated={() => setShowResults(true)}
            initialBaselineUrl={selectedUrls.baselineUrl}
            initialNewUrl={selectedUrls.newUrl}
          />
          <TestResultsTable onTestSelect={handleTestSelect} />
          <ResultsDialog open={showResults} onOpenChange={setShowResults} />
        </div>
      </main>
    </div>
  );
};

export default Comparison;

================================================
File: /src/pages/Index.tsx
================================================
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Collapsible, CollapsibleContent, CollapsibleTrigger } from "@/components/ui/collapsible";
import { BarChart3, Layout, Settings, Smartphone } from "lucide-react";
import { useState } from "react";
import { Link } from "react-router-dom";

const Index = () => {
  const [isOpen, setIsOpen] = useState(true);

  return (
    <div className="flex min-h-screen bg-background">
      {/* Sidebar */}
      <div className="w-64 shrink-0 border-r bg-sidebar">
        <div className="p-4">
          <div className="flex items-center gap-2 mb-8">
            <Layout className="h-6 w-6" />
            <h1 className="text-xl font-bold">TestHub</h1>
          </div>
          
          <nav className="space-y-2">
            <Link to="/" className="flex items-center gap-2 p-2 rounded-lg bg-sidebar-accent text-sidebar-accent-foreground">
              <BarChart3 className="h-5 w-5" />
              Dashboard
            </Link>
            <Link to="/comparison" className="flex items-center gap-2 p-2 rounded-lg hover:bg-sidebar-accent hover:text-sidebar-accent-foreground">
              <Layout className="h-5 w-5" />
              Comparison Module
            </Link>
            <a href="#" className="flex items-center gap-2 p-2 rounded-lg hover:bg-sidebar-accent hover:text-sidebar-accent-foreground">
              <Smartphone className="h-5 w-5" />
              Device Testing
            </a>
            <a href="#" className="flex items-center gap-2 p-2 rounded-lg hover:bg-sidebar-accent hover:text-sidebar-accent-foreground">
              <Settings className="h-5 w-5" />
              Settings
            </a>
          </nav>
        </div>
      </div>

      {/* Main Content */}
      <div className="flex-1 flex flex-col min-w-0">
        <header className="border-b p-4">
          <h2 className="text-2xl font-semibold">Dashboard</h2>
        </header>

        <ScrollArea className="flex-1">
          <div className="container mx-auto p-6 max-w-7xl">
            <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
              {/* Quick Actions Card */}
              <Card>
                <CardHeader>
                  <CardTitle>Quick Actions</CardTitle>
                  <CardDescription>Start a new test or view recent results</CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="space-y-2">
                    <Link to="/comparison" className="block w-full p-2 text-left rounded-lg hover:bg-accent">
                      New Comparison Test
                    </Link>
                    <button className="w-full p-2 text-left rounded-lg hover:bg-accent">
                      Device Responsiveness Test
                    </button>
                    <button className="w-full p-2 text-left rounded-lg hover:bg-accent">
                      View Recent Reports
                    </button>
                  </div>
                </CardContent>
              </Card>

              {/* Recent Tests Card */}
              <Card>
                <CardHeader>
                  <CardTitle>Recent Tests</CardTitle>
                  <CardDescription>Your latest test results</CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    <p className="text-sm text-muted-foreground">No recent tests found</p>
                  </div>
                </CardContent>
              </Card>

              {/* System Status Card */}
              <Card>
                <CardHeader>
                  <CardTitle>System Status</CardTitle>
                  <CardDescription>Current system performance</CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="space-y-2">
                    <div className="flex justify-between items-center">
                      <span>Browserstack API</span>
                      <span className="text-green-500">●</span>
                    </div>
                    <div className="flex justify-between items-center">
                      <span>AI Analysis</span>
                      <span className="text-green-500">●</span>
                    </div>
                    <div className="flex justify-between items-center">
                      <span>Database</span>
                      <span className="text-green-500">●</span>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </div>

            {/* Additional Dashboard Content */}
            <div className="mt-6">
              <Collapsible open={isOpen} onOpenChange={setIsOpen}>
                <CollapsibleTrigger className="w-full">
                  <Card>
                    <CardHeader>
                      <div className="flex items-center justify-between">
                        <CardTitle>Testing Overview</CardTitle>
                        <span>{isOpen ? "▼" : "▶"}</span>
                      </div>
                    </CardHeader>
                  </Card>
                </CollapsibleTrigger>
                <CollapsibleContent>
                  <Card className="mt-2">
                    <CardContent className="pt-6">
                      <p className="text-muted-foreground">
                        Welcome to TestHub! Start by creating a new comparison test or checking device responsiveness.
                        You can view all your test results and generate reports from the dashboard.
                      </p>
                    </CardContent>
                  </Card>
                </CollapsibleContent>
              </Collapsible>
            </div>
          </div>
        </ScrollArea>
      </div>
    </div>
  );
};

export default Index;

================================================
File: /src/pages/Settings.tsx
================================================
import { Layout, BarChart3, Smartphone, Settings as SettingsIcon } from "lucide-react";
import { BrowserstackConfigForm } from "@/components/settings/BrowserstackConfigForm";
import { ConfigurationsList } from "@/components/settings/ConfigurationsList";
import { PredefinedConfigs } from "@/components/settings/PredefinedConfigs";

const Settings = () => {
  return (
    <div className="flex h-screen bg-background">
      {/* Sidebar */}
      <div className="w-64 border-r bg-sidebar p-4">
        <div className="flex items-center gap-2 mb-8">
          <Layout className="h-6 w-6" />
          <h1 className="text-xl font-bold">TestHub</h1>
        </div>
        
        <nav className="space-y-2">
          <a href="/" className="flex items-center gap-2 p-2 rounded-lg hover:bg-sidebar-accent hover:text-sidebar-accent-foreground">
            <BarChart3 className="h-5 w-5" />
            Dashboard
          </a>
          <a href="/comparison" className="flex items-center gap-2 p-2 rounded-lg hover:bg-sidebar-accent hover:text-sidebar-accent-foreground">
            <Layout className="h-5 w-5" />
            Comparison Module
          </a>
          <a href="#" className="flex items-center gap-2 p-2 rounded-lg hover:bg-sidebar-accent hover:text-sidebar-accent-foreground">
            <Smartphone className="h-5 w-5" />
            Device Testing
          </a>
          <a href="/settings" className="flex items-center gap-2 p-2 rounded-lg bg-sidebar-accent text-sidebar-accent-foreground">
            <SettingsIcon className="h-5 w-5" />
            Settings
          </a>
        </nav>
      </div>

      {/* Main Content */}
      <div className="flex-1 flex flex-col overflow-hidden">
        <header className="border-b p-4 flex-shrink-0">
          <h2 className="text-2xl font-semibold">Settings</h2>
        </header>

        <div className="flex-1 overflow-y-auto p-6 space-y-6">
          <PredefinedConfigs />
          <BrowserstackConfigForm />
          <ConfigurationsList />
        </div>
      </div>
    </div>
  );
};

export default Settings;

================================================
File: /supabase/config.toml
================================================
project_id = "tvykctusxldoizqcyzzp"

================================================
File: /supabase/functions/tsconfig.json
================================================
{
  "compilerOptions": {
    "target": "ES2020",
    "module": "ESNext",
    "moduleResolution": "bundler",
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "allowJs": true,
    "checkJs": true,
    "noEmit": true,
    "strict": true,
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "resolveJsonModule": true,
    "skipLibCheck": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noImplicitReturns": true,
    "noFallthroughCasesInSwitch": true,
    "forceConsistentCasingInFileNames": true,
    "verbatimModuleSyntax": true,
    "types": ["node"]
  },
  "include": ["**/*.ts"],
  "exclude": ["node_modules", "dist"]
}

================================================
File: /supabase/functions/types.d.ts
================================================
/// <reference types="https://deno.land/x/types/index.d.ts" />

declare module "https://esm.sh/@supabase/supabase-js@2.39.3" {
  export * from "@supabase/supabase-js";
}

declare module "https://deno.land/std@0.168.0/http/server.ts" {
  export function serve(handler: (req: Request) => Promise<Response>): void;
}

declare module "@supabase/supabase-js" {
  export interface SupabaseClient {
    from: (table: string) => any;
  }

  export function createClient(url: string, key: string): SupabaseClient;
}

declare interface Request {
  method: string;
  headers: Headers;
  json(): Promise<any>;
}

declare interface Response {
  ok: boolean;
  status?: number;
  json(): Promise<any>;
  text(): Promise<string>;
}

declare interface Headers {
  get(name: string): string | null;
}

declare namespace Deno {
  interface Env {
    get(key: string): string | undefined;
  }
  export const env: Env;
}

================================================
File: /supabase/functions/_shared/cors.ts
================================================
export const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

================================================
File: /supabase/functions/browserstack-screenshots/README.md
================================================
# BrowserStack Screenshots API Integration

This module provides integration with BrowserStack's Screenshot API for automated visual testing.

## Setup

1. Copy `.env.example` to `.env`:
```bash
cp .env.example .env
```

2. Update `.env` with your BrowserStack credentials:
```env
BROWSERSTACK_USERNAME=your_username
BROWSERSTACK_ACCESS_KEY=your_access_key
```

## Testing

### Unit Tests
Run unit tests (no credentials required):
```bash
npm test
```

### Integration Tests
To run integration tests, you need valid BrowserStack credentials in your `.env` file:
```bash
npm test
```

Integration tests will be skipped if credentials are not provided.

## API Usage

### Get Available Browsers
```typescript
import { getAvailableBrowsers } from './browserstack-api';

const browsers = await getAvailableBrowsers(
  {
    username: 'your_username',
    password: 'your_access_key'
  },
  'request-id'
);
```

### Generate Screenshots
```typescript
import { generateScreenshots } from './browserstack-api';

const screenshots = await generateScreenshots(
  'https://example.com',
  [
    {
      os: 'Windows',
      os_version: '11',
      browser: 'chrome',
      browser_version: 'latest'
    }
  ],
  {
    username: 'your_username',
    password: 'your_access_key'
  },
  {
    quality: 'compressed',
    waitTime: 5,
    orientation: 'portrait'
  },
  'request-id'
);
```

## Error Handling

All errors are wrapped in `BrowserstackError` with the following properties:
- `message`: Error description
- `statusCode`: HTTP status code (if applicable)
- `requestId`: Request identifier for tracking
- `context`: Additional error context

## Rate Limiting

The API includes built-in rate limiting:
- 5 requests per second by default
- Configurable via environment variables:
  - `RATE_LIMIT_REQUESTS`
  - `RATE_LIMIT_INTERVAL` 

================================================
File: /supabase/functions/browserstack-screenshots/browser-validation.ts
================================================
interface BrowserConfig {
  os: string;
  os_version: string;
  browser?: string;
  browser_version?: string;
  device?: string;
}

interface AvailableBrowser {
  os: string;
  os_version: string;
  browser?: string;
  browser_version?: string;
  device?: string;
}

// Browser configuration validation logic
export const validateBrowserConfig = (config: BrowserConfig, availableBrowsers: AvailableBrowser[]): boolean => {
  const normalizedConfig = {
    os: config.os?.toLowerCase(),
    os_version: config.os_version,
    browser: config.browser?.toLowerCase(),
    browser_version: config.browser_version,
    device: config.device
  };

  console.log('Validating config:', JSON.stringify(normalizedConfig, null, 2));
  console.log('Available browsers:', JSON.stringify(availableBrowsers, null, 2));
  
  const osMatches = availableBrowsers.filter(b => 
    b.os?.toLowerCase() === normalizedConfig.os
  );

  if (osMatches.length === 0) {
    console.log(`No matching OS found for ${normalizedConfig.os}`);
    return false;
  }

  // For mobile devices
  if (config.device) {
    const isValid = osMatches.some(b => b.device === normalizedConfig.device);
    console.log(`Mobile device validation result for ${normalizedConfig.device}:`, isValid);
    return isValid;
  }

  // For desktop browsers
  if (!normalizedConfig.browser) {
    console.log('Missing browser information for desktop configuration');
    return false;
  }

  const browserMatches = osMatches.filter(b => 
    b.browser?.toLowerCase() === normalizedConfig.browser
  );

  if (browserMatches.length === 0) {
    console.log(`No matching browser found for ${normalizedConfig.browser}`);
    return false;
  }

  // For specific versions, check if they exist
  if (!normalizedConfig.browser_version) {
    console.log('Missing browser version');
    return false;
  }

  // Accept 'latest' as a valid version
  if (normalizedConfig.browser_version === 'latest') {
    console.log('Using latest browser version');
    return true;
  }

  // Check if the version is a valid format (major.minor)
  const versionRegex = /^\d+\.\d+$/;
  const isValidFormat = versionRegex.test(normalizedConfig.browser_version);
  if (!isValidFormat) {
    console.log(`Invalid version format: ${normalizedConfig.browser_version}`);
    return false;
  }

  // For Chrome browser, ensure version is in correct format
  if (normalizedConfig.browser === 'chrome') {
    const [major, minor] = normalizedConfig.browser_version.split('.');
    if (parseInt(major) < 1 || parseInt(minor) !== 0) {
      console.log(`Invalid Chrome version format: ${normalizedConfig.browser_version}`);
      return false;
    }
  }

  return true;
};

================================================
File: /supabase/functions/browserstack-screenshots/browserstack-api.ts
================================================
import { v4 as uuidv4 } from "https://esm.sh/uuid@9.0.0";
import { logger } from "./logger.ts";
import { handleBrowserstackResponse, validateResolution, validateWaitTime } from "./utils/api-utils.ts";
import { BrowserstackError } from "./errors/browserstack-error.ts";
import type { 
  BrowserstackCredentials, 
  ScreenshotRequest, 
  ScreenshotResponse,
  BrowsersResponse,
  Browser 
} from "./types/api-types.ts";

export async function getBrowsers(
  credentials: BrowserstackCredentials,
  requestId: string
): Promise<Browser[]> {
  logger.info({
    message: 'Fetching available browsers',
    requestId
  });

  if (!credentials?.username || !credentials?.password) {
    throw new BrowserstackError(
      'Missing Browserstack credentials',
      400,
      requestId
    );
  }

  const auth = btoa(`${credentials.username}:${credentials.password}`);
  
  try {
    logger.info({
      message: 'Making request to Browserstack API',
      requestId,
      url: 'https://www.browserstack.com/screenshots/browsers.json'
    });

    const response = await fetch('https://www.browserstack.com/screenshots/browsers.json', {
      headers: {
        'Authorization': `Basic ${auth}`,
        'Content-Type': 'application/json'
      }
    });

    if (!response.ok) {
      const errorText = await response.text();
      logger.error({
        message: 'Browserstack API returned error',
        requestId,
        status: response.status,
        statusText: response.statusText,
        errorText
      });
      throw new BrowserstackError(
        `Browserstack API error: ${response.statusText}`,
        response.status,
        requestId,
        { errorText }
      );
    }

    const responseText = await response.text();
    logger.info({
      message: 'Received response from Browserstack API',
      requestId,
      responseText
    });

    let data: BrowsersResponse;
    try {
      data = JSON.parse(responseText);
    } catch (error) {
      logger.error({
        message: 'Failed to parse Browserstack API response',
        requestId,
        error,
        responseText
      });
      throw new BrowserstackError(
        'Invalid JSON response from Browserstack API',
        500,
        requestId,
        { responseText }
      );
    }
    
    if (!data?.browsers || !Array.isArray(data.browsers)) {
      logger.error({
        message: 'Invalid response format from Browserstack API',
        requestId,
        data
      });
      throw new BrowserstackError(
        'Invalid response format from Browserstack API',
        500,
        requestId,
        { data }
      );
    }

    logger.info({
      message: 'Successfully fetched browsers',
      requestId,
      browserCount: data.browsers.length
    });

    return data.browsers;
  } catch (error) {
    logger.error({
      message: 'Failed to fetch browsers from Browserstack',
      requestId,
      error
    });
    throw error;
  }
}

export async function generateScreenshots(
  request: ScreenshotRequest,
  credentials: BrowserstackCredentials
): Promise<ScreenshotResponse> {
  const requestId = uuidv4();
  
  if (request.wait_time) {
    validateWaitTime(request.wait_time);
  }

  // First, get available browsers
  let availableBrowsers: Browser[];
  try {
    availableBrowsers = await getBrowsers(credentials, requestId);
    
    if (!availableBrowsers || !Array.isArray(availableBrowsers) || availableBrowsers.length === 0) {
      throw new BrowserstackError(
        'No browsers available from Browserstack',
        500,
        requestId
      );
    }
  } catch (error) {
    logger.error({
      message: 'Failed to get available browsers',
      requestId,
      error
    });
    throw error;
  }

  // Map browsers and handle versions
  const browsers = request.browsers.map(browser => {
    if (!browser.os || !browser.browser) {
      throw new BrowserstackError(
        `Invalid browser configuration: OS and browser are required fields`,
        400,
        requestId
      );
    }

    const matchingBrowser = availableBrowsers.find(b => 
      b.browser && browser.browser &&
      b.browser.toLowerCase() === browser.browser.toLowerCase() &&
      b.os && browser.os &&
      b.os.toLowerCase() === browser.os.toLowerCase() &&
      b.os_version === browser.os_version
    );

    if (!matchingBrowser) {
      throw new BrowserstackError(
        `No matching browser configuration found for ${browser.browser} on ${browser.os} ${browser.os_version || 'latest'}`,
        400,
        requestId
      );
    }

    return {
      ...browser,
      browser_version: browser.browser_version === 'latest' ? matchingBrowser.browser_version : browser.browser_version
    };
  });

  const payload = {
    url: request.url,
    browsers,
    quality: request.quality || 'compressed',
    wait_time: request.wait_time || 5,
    callback_url: request.callback_url
  };

  logger.info({
    message: 'Generating screenshots',
    requestId,
    payload
  });

  const auth = btoa(`${credentials.username}:${credentials.password}`);
  const response = await fetch('https://www.browserstack.com/screenshots', {
    method: 'POST',
    headers: {
      'Authorization': `Basic ${auth}`,
      'Content-Type': 'application/json'
    },
    body: JSON.stringify(payload)
  });

  return handleBrowserstackResponse<ScreenshotResponse>(response, requestId);
}

================================================
File: /supabase/functions/browserstack-screenshots/config.toml
================================================
[functions.browserstack-screenshots]
verify_jwt = false

================================================
File: /supabase/functions/browserstack-screenshots/database.ts
================================================
import { createClient } from "https://esm.sh/@supabase/supabase-js@2.39.3";

export const createSupabaseClient = () => {
  const supabaseUrl = Deno.env.get('SUPABASE_URL') ?? '';
  const supabaseKey = Deno.env.get('SUPABASE_ANON_KEY') ?? '';
  return createClient(supabaseUrl, supabaseKey);
};

================================================
File: /supabase/functions/browserstack-screenshots/index.ts
================================================
/// <reference types="deno" />

import { generateScreenshots, type ScreenshotRequest, type BrowserstackCredentials } from './browserstack-api.ts';
import { validateRequestData } from './request-validator.ts';
import { logger } from './logger.ts';

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

Deno.serve(async (req) => {
  const requestId = crypto.randomUUID();

  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { 
      headers: corsHeaders,
      status: 204
    });
  }

  try {
    // Get BrowserStack credentials from environment
    const username = Deno.env.get('BROWSERSTACK_USERNAME');
    const accessKey = Deno.env.get('BROWSERSTACK_ACCESS_KEY');

    if (!username || !accessKey) {
      logger.error({
        message: 'Missing BrowserStack credentials in environment',
        requestId,
        username: !!username,
        accessKey: !!accessKey
      });
      throw new Error('BrowserStack credentials not configured in environment variables');
    }

    const credentials: BrowserstackCredentials = {
      username,
      password: accessKey
    };

    // Parse and validate request body
    const data = await req.json();
    logger.info({
      message: 'Received request data',
      requestId,
      testId: data.testId,
      configCount: data.selected_configs?.length,
      url: data.url
    });

    const validatedData = validateRequestData(data, requestId);

    // Generate screenshots
    const screenshotRequest: ScreenshotRequest = {
      url: validatedData.url,
      browsers: validatedData.selected_configs.map(config => ({
        os: config.os,
        os_version: config.os_version,
        browser: config.browser,
        browser_version: config.browser_version,
        device: config.device
      })),
      wait_time: 5,
      quality: 'compressed'
    };

    logger.info({
      message: 'Generating screenshots',
      requestId,
      testId: validatedData.testId,
      url: validatedData.url,
      configCount: validatedData.selected_configs.length,
    });

    const response = await generateScreenshots(screenshotRequest, credentials, requestId);

    logger.info({
      message: 'Screenshots generated successfully',
      requestId,
      testId: validatedData.testId,
      jobId: response.job_id,
    });

    return new Response(
      JSON.stringify(response),
      { 
        headers: { 
          'Content-Type': 'application/json',
          ...corsHeaders 
        } 
      }
    );

  } catch (error) {
    logger.error({
      message: 'Error processing screenshot request',
      requestId,
      error: error instanceof Error ? error.message : 'Unknown error',
      stack: error instanceof Error ? error.stack : undefined,
    });

    return new Response(
      JSON.stringify({
        error: error instanceof Error ? error.message : 'Internal server error'
      }),
      { 
        status: error instanceof Error && error.message.includes('validation') ? 400 : 500,
        headers: { 
          'Content-Type': 'application/json',
          ...corsHeaders 
        }
      }
    );
  }
});

================================================
File: /supabase/functions/browserstack-screenshots/logger.ts
================================================
interface LogContext {
  message: string;
  [key: string]: unknown;
}

function formatError(error: Error): unknown {
  if (error instanceof Error) {
    return {
      name: error.name,
      message: error.message,
      stack: error.stack,
      ...(error as any),
    };
  }
  return { error };
}

class Logger {
  error(context: LogContext & { error?: unknown }): void {
    const formattedContext = {
      ...context,
      error: context.error ? formatError(context.error as Error) : undefined,
      timestamp: new Date().toISOString(),
      level: 'error'
    };
    console.error(JSON.stringify(formattedContext, null, 2));
  }

  info(context: LogContext): void {
    console.info(JSON.stringify({ 
      ...context, 
      timestamp: new Date().toISOString(),
      level: 'info'
    }, null, 2));
  }

  warn(context: LogContext): void {
    console.warn(JSON.stringify({ 
      ...context, 
      timestamp: new Date().toISOString(),
      level: 'warn'
    }, null, 2));
  }

  debug(context: LogContext): void {
    console.debug(JSON.stringify({ 
      ...context, 
      timestamp: new Date().toISOString(),
      level: 'debug'
    }, null, 2));
  }
}

export const logger = new Logger();

================================================
File: /supabase/functions/browserstack-screenshots/os-config.ts
================================================
export interface Config {
  os: string;
  os_version: string;
  browser?: string;
  browser_version?: string;
  device?: string;
}

export function normalizeOsConfig(config: Config): Config {
  const normalizedConfig = { ...config };

  // Normalize OS name
  normalizedConfig.os = normalizeOsName(config.os);

  // Normalize OS version
  normalizedConfig.os_version = normalizeOsVersion(config.os, config.os_version);

  return normalizedConfig;
}

function normalizeOsName(os: string): string {
  const osLower = os.toLowerCase();
  if (osLower === 'ios') return 'ios';
  return os.charAt(0).toUpperCase() + os.slice(1).toLowerCase();
}

function normalizeOsVersion(os: string, version: string): string {
  const osLower = os.toLowerCase();
  if (osLower === 'ios' || osLower === 'android') {
    return version.toString();
  }
  return version;
}

================================================
File: /supabase/functions/browserstack-screenshots/package.json
================================================
{
  "name": "@supabase/browserstack-screenshots-function",
  "version": "1.0.0",
  "description": "BrowserStack screenshot generation service",
  "type": "module",
  "scripts": {
    "test": "vitest run --config ./vitest.config.ts",
    "test:watch": "vitest watch --config ./vitest.config.ts",
    "test:coverage": "vitest run --coverage --config ./vitest.config.ts",
    "build": "tsc",
    "start": "node dist/index.js"
  },
  "dependencies": {
    "@hookform/resolvers": "^3.9.1",
    "@radix-ui/react-label": "^2.1.1",
    "@radix-ui/react-slot": "^1.1.1",
    "@tanstack/react-query": "^5.62.11",
    "lucide-react": "^0.469.0",
    "react-hook-form": "^7.54.2",
    "uuid": "^9.0.0",
    "zod": "^3.24.1"
  },
  "devDependencies": {
    "@types/node": "^18.15.11",
    "@types/uuid": "^9.0.0",
    "@vitest/coverage-v8": "^1.6.0",
    "autoprefixer": "^10.0.0",
    "cross-env": "^7.0.3",
    "dotenv": "^16.4.7",
    "postcss": "^8.0.0",
    "tailwindcss": "^3.0.0",
    "typescript": "^5.0.3",
    "vite": "^5.0.0",
    "vitest": "^1.6.0"
  },
  "types": "./node_modules/vitest"
}


================================================
File: /supabase/functions/browserstack-screenshots/postcss.config.js
================================================
export default {
  plugins: []
}; 

================================================
File: /supabase/functions/browserstack-screenshots/rate-limiter.ts
================================================
export interface RateLimiterOptions {
  maxRetries?: number;
  initialRetryDelay?: number;
  backoffFactor?: number;
}

export class RateLimiter {
  private tokens: number;
  private lastRefill: number;
  private readonly maxTokens: number;
  private readonly refillInterval: number;
  private readonly options: Required<RateLimiterOptions>;

  constructor(
    maxTokens: number,
    refillInterval: number,
    options: RateLimiterOptions = {}
  ) {
    this.maxTokens = maxTokens;
    this.tokens = maxTokens;
    this.lastRefill = Date.now();
    this.refillInterval = refillInterval;
    this.options = {
      maxRetries: options.maxRetries ?? 3,
      initialRetryDelay: options.initialRetryDelay ?? 1000,
      backoffFactor: options.backoffFactor ?? 2
    };
  }

  private refillTokens(): void {
    const now = Date.now();
    const timePassed = now - this.lastRefill;
    const tokensToAdd = Math.floor(timePassed / this.refillInterval) * this.maxTokens;
    
    if (tokensToAdd > 0) {
      this.tokens = Math.min(this.maxTokens, this.tokens + tokensToAdd);
      this.lastRefill = now;
    }
  }

  async acquireToken(): Promise<void> {
    let attempts = 0;
    let delay = this.options.initialRetryDelay;

    while (attempts < this.options.maxRetries) {
      this.refillTokens();

      if (this.tokens > 0) {
        this.tokens--;
        return;
      }

      attempts++;
      if (attempts < this.options.maxRetries) {
        await new Promise(resolve => setTimeout(resolve, delay));
        delay *= this.options.backoffFactor;
      }
    }

    throw new Error('Rate limit exceeded');
  }
} 

================================================
File: /supabase/functions/browserstack-screenshots/request-validator.ts
================================================
import { logger } from "./logger.ts";

interface RequestData {
  testId?: string;
  url?: string;
  selected_configs?: Array<{
    os: string;
    os_version: string;
    browser?: string;
    browser_version?: string;
    device?: string;
  }>;
}

export function validateRequestData(data: unknown, requestId: string): RequestData {
  logger.info({
    message: 'Validating request data',
    requestId,
    data
  });

  if (!data || typeof data !== 'object') {
    throw new Error('Invalid request data: must be an object');
  }

  const requestData = data as RequestData;

  if (!requestData.testId) {
    throw new Error('Missing required field: testId');
  }

  if (!requestData.url) {
    throw new Error('Missing required field: url');
  }

  try {
    new URL(requestData.url);
  } catch {
    throw new Error('Invalid URL format');
  }

  if (!Array.isArray(requestData.selected_configs) || requestData.selected_configs.length === 0) {
    throw new Error('Missing or empty selected_configs array');
  }

  // Validate each config
  requestData.selected_configs.forEach((config, index) => {
    if (!config.os) {
      throw new Error(`Missing required field: os in config at index ${index}`);
    }
    if (!config.os_version) {
      throw new Error(`Missing required field: os_version in config at index ${index}`);
    }
  });

  logger.info({
    message: 'Request data validated successfully',
    requestId,
    testId: requestData.testId,
    configCount: requestData.selected_configs.length
  });

  return requestData;
}

================================================
File: /supabase/functions/browserstack-screenshots/run-tests.mjs
================================================
import { defineConfig } from 'vitest/config';
import { startVitest } from 'vitest/node';

const config = defineConfig({
  test: {
    globals: true,
    environment: 'node',
    include: ['**/__tests__/**/*.test.ts'],
    setupFiles: ['./vitest.setup.ts'],
    pool: 'forks',
    poolOptions: {
      forks: {
        singleFork: true
      }
    }
  }
});

startVitest('test', [], config); 

================================================
File: /supabase/functions/browserstack-screenshots/tsconfig.json
================================================
{
  "compilerOptions": {
    "target": "ES2020",
    "module": "ESNext",
    "moduleResolution": "node",
    "esModuleInterop": true,
    "strict": true,
    "skipLibCheck": true,
    "isolatedModules": true,
    "typeRoots": ["./types", "./node_modules/@types"],
    "types": ["node"],
    "resolveJsonModule": true,
    "allowJs": true,
    "outDir": "dist",
    "baseUrl": ".",
    "paths": {
      "@/*": ["src/*"]
    }
  },
  "include": ["**/*.ts", "types/vitest.d.ts"],
  "exclude": ["node_modules", "dist"]
} 

================================================
File: /supabase/functions/browserstack-screenshots/types.ts
================================================
// Resolution constants as per API documentation
export const VALID_RESOLUTIONS = {
  WINDOWS: ['1024x768', '1280x1024', '1920x1080'],
  MAC: ['1024x768', '1280x960', '1280x1024', '1600x1200', '1920x1080']
} as const;

export const VALID_WAIT_TIMES = [2, 5, 10, 15, 20, 60] as const;

export type WaitTime = typeof VALID_WAIT_TIMES[number];
export type ResolutionType = 'WINDOWS' | 'MAC';
export type WindowsResolution = typeof VALID_RESOLUTIONS.WINDOWS[number];
export type MacResolution = typeof VALID_RESOLUTIONS.MAC[number];

// Default resolutions for each platform
export const DEFAULT_RESOLUTIONS: Record<ResolutionType, string> = {
  WINDOWS: '1024x768',
  MAC: '1024x768'
};

export interface BrowserConfig {
  device_type?: 'desktop' | 'mobile';
  os: string;
  os_version: string;
  browser?: string;
  browser_version?: string;
  device?: string;
}

export interface ScreenshotSettings {
  url: string;
  browsers: BrowserConfig[];
  quality?: 'original' | 'compressed';
  wait_time?: WaitTime;
  win_res?: WindowsResolution;
  mac_res?: MacResolution;
  orientation?: 'portrait' | 'landscape';
}

export interface BrowserStackResponse {
  job_id: string;
  callback_url?: string;
  win_res?: string;
  mac_res?: string;
  quality: string;
  wait_time: number;
  orientation: string;
  screenshots: Array<{
    os: string;
    os_version: string;
    browser?: string;
    browser_version?: string;
    device?: string;
    id: string;
    state: 'pending' | 'done' | 'error';
    url: string;
    thumb_url?: string;
    image_url?: string;
    created_at?: string;
  }>;
}

export interface BrowserStackRequestBody {
  url: string;
  browsers: BrowserConfig[];
  quality: 'compressed' | 'original';
  wait_time: WaitTime;
  win_res?: WindowsResolution;
  mac_res?: MacResolution;
  orientation?: 'portrait' | 'landscape';
  callback_url?: string;
  local?: boolean;
}

export interface JobStatus {
  id: string;
  state: 'queued' | 'processing' | 'done' | 'error';
  message?: string;
  screenshots: Array<{
    os: string;
    os_version: string;
    browser?: string;
    browser_version?: string;
    device?: string;
    id: string;
    state: 'queued' | 'processing' | 'done' | 'error';
    url: string;
    thumb_url?: string;
    image_url?: string;
    created_at?: string;
  }>;
}

export function getResolutionForType(type: ResolutionType): string {
  return type === 'WINDOWS' ? '1024x768' : '1024x768';
}

export function validateResolution(res: string | undefined, type: 'Windows' | 'Mac'): void {
  if (!res) return;
  
  const validResolutions = type === 'Windows' ? VALID_RESOLUTIONS.WINDOWS : VALID_RESOLUTIONS.MAC;
  
  if (!validResolutions.includes(res as any)) {
    throw new Error(
      `Invalid ${type} resolution: ${res}. Valid resolutions are: ${validResolutions.join(', ')}`
    );
  }
}

export function validateWaitTime(waitTime: number | undefined): void {
  if (!waitTime) return;
  
  if (!VALID_WAIT_TIMES.includes(waitTime as WaitTime)) {
    throw new Error(
      `Invalid wait time: ${waitTime}. Valid wait times are: ${VALID_WAIT_TIMES.join(', ')} seconds`
    );
  }
}

export type ServeFunction = (req: Request) => Promise<Response>;
export const serve: (handler: ServeFunction) => void = () => {}; 

export interface ScreenshotRequest {
  url: string;
  resolution: string;
  browsers: {
    os: string;
    os_version: string;
    browser: string;
    browser_version: string;
  }[];
  waitTime: number;
} 

================================================
File: /supabase/functions/browserstack-screenshots/vitest.config.ts
================================================
/// <reference types="vitest" />
import { defineConfig } from 'vitest/config';
import { resolve } from 'path';

export default defineConfig({
  test: {
    globals: true,
    environment: 'node',
    setupFiles: ['./vitest.setup.ts'],
    include: ['**/*.test.ts'],
    coverage: {
      provider: 'v8',
      reporter: ['text', 'json', 'html'],
      exclude: [
        'node_modules/**',
        'dist/**',
        '**/*.d.ts',
        'test/**',
        '**/__tests__/**'
      ]
    },
    testTimeout: 60000,
    hookTimeout: 60000
  },
  resolve: {
    alias: {
      '@': resolve(__dirname, './src')
    }
  }
}); 

================================================
File: /supabase/functions/browserstack-screenshots/vitest.setup.ts
================================================
import { beforeEach, vi } from 'vitest';
import { config } from 'dotenv';
import { resolve } from 'path';
import { mockFetch } from './__tests__/test-utils.js';

// Load environment variables from .env.test
const envPath = resolve(__dirname, '.env.test');
const result = config({ path: envPath });

if (result.error) {
  console.warn(`Warning: Error loading environment variables from ${envPath}`);
  console.warn(result.error);
}

// Ensure required environment variables are set
const requiredEnvVars = ['BROWSERSTACK_USERNAME', 'BROWSERSTACK_ACCESS_KEY'];
const missingEnvVars = requiredEnvVars.filter(varName => !process.env[varName]);

if (missingEnvVars.length > 0) {
  console.warn('Warning: Missing required environment variables:');
  missingEnvVars.forEach(varName => console.warn(`- ${varName}`));
}

// Mock database client
vi.mock('./database', () => ({
  default: {
    createSupabaseClient: vi.fn().mockReturnValue({})
  }
}));

// Set up global fetch mock
global.fetch = mockFetch.fn;

// Reset mocks before each test
beforeEach(() => {
  vi.resetAllMocks();
  global.fetch = mockFetch.fn;
}); 

================================================
File: /supabase/functions/browserstack-screenshots/.env.example
================================================
# BrowserStack Credentials
BROWSERSTACK_USERNAME=your_username
BROWSERSTACK_ACCESS_KEY=your_access_key

# Test Configuration
TEST_TIMEOUT=30000  # 30 seconds
RATE_LIMIT_REQUESTS=5
RATE_LIMIT_INTERVAL=1000  # 1 second 

================================================
File: /supabase/functions/browserstack-screenshots/.env.test
================================================
# BrowserStack Credentials
BROWSERSTACK_USERNAME=iakovvolfkovich_F75ojQ
BROWSERSTACK_ACCESS_KEY=HYAZ4DUHsvFrouzKZqyj

# Test Configuration
TEST_URL=https://drsisterskincare.com/products/dark-spot-vanish
TEST_TIMEOUT=120000  # 2 minutes timeout for long-running tests

# Rate Limiting Configuration
RATE_LIMIT_REQUESTS=5
RATE_LIMIT_INTERVAL=1000 

================================================
File: /supabase/functions/browserstack-screenshots/__mocks__/deno.ts
================================================
import { vi } from 'vitest';

// Mock Deno.env
export const env = {
  get: vi.fn((key: string) => {
    switch (key) {
      case 'BROWSERSTACK_USERNAME':
        return 'test_user';
      case 'BROWSERSTACK_ACCESS_KEY':
        return 'test_key';
      default:
        return undefined;
    }
  })
};

// Mock serve function from http/server.ts
export const serve = vi.fn((handler: (request: Request) => Promise<Response> | Response) => {
  return Promise.resolve();
});

// Mock corsHeaders from _shared/cors.ts
export const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': '*',
  'Access-Control-Allow-Methods': 'POST, OPTIONS',
  'Access-Control-Max-Age': '86400',
};

// Mock ConnInfo type
export type ConnInfo = {
  remoteAddr: {
    hostname: string;
    port: number;
  };
};

// Mock Handler type
export type Handler = (
  request: Request,
  connInfo: ConnInfo
) => Promise<Response> | Response;

// Re-export Response and Request from global
export const Response = globalThis.Response;
export const Request = globalThis.Request;

// Mock other Deno standard library functions if needed
export const Status = {
  OK: 200,
  BadRequest: 400,
  Unauthorized: 401,
  NotFound: 404,
  InternalServerError: 500,
} as const;

// Mock error handling
export class DenoError extends Error {
  constructor(message: string) {
    super(message);
    this.name = 'DenoError';
  }
}

// Mock HTTP status codes
export const STATUS_TEXT = {
  200: 'OK',
  400: 'Bad Request',
  401: 'Unauthorized',
  404: 'Not Found',
  500: 'Internal Server Error',
} as const; 

================================================
File: /supabase/functions/browserstack-screenshots/__mocks__/_shared/cors.ts
================================================
export const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': '*',
  'Access-Control-Allow-Methods': 'POST, OPTIONS',
  'Access-Control-Max-Age': '86400',
}; 

================================================
File: /supabase/functions/browserstack-screenshots/__tests__/browserstack-api.integration.test.ts
================================================
import { describe, it, expect, beforeEach } from 'vitest';
import { generateScreenshots, getBrowsers } from '../browserstack-api.js';
import { createValidScreenshotRequest, mockFetch, createMockResponse } from './test-utils.js';

describe('Browserstack API Integration Tests', () => {
  const validInput = createValidScreenshotRequest();
  const credentials = {
    username: process.env.BROWSERSTACK_USERNAME || '',
    password: process.env.BROWSERSTACK_ACCESS_KEY || ''
  };

  beforeEach(() => {
    mockFetch.mockReset();
  });

  it('should generate screenshots successfully', async () => {
    // Mock browsers response first
    const browsersMock = {
      browsers: [
        {
          os: 'Windows',
          os_version: '10',
          browser: 'chrome',
          browser_version: '117.0',
          device: null
        }
      ]
    };

    // Mock screenshots response
    const screenshotsMock = {
      job_id: 'test-job-id',
      state: 'done',
      callback_url: null,
      win_res: '1024x768',
      mac_res: '1024x768',
      quality: 'compressed',
      wait_time: 5,
      screenshots: [{
        id: 'screenshot-1',
        browser: 'chrome',
        browser_version: '117.0',
        os: 'Windows',
        os_version: '10',
        url: 'https://example.com',
        state: 'done',
        created_at: '2024-01-30T16:25:45.000Z'
      }]
    };

    let callCount = 0;
    mockFetch.fn.mockImplementation(async () => {
      callCount++;
      return createMockResponse(200, callCount === 1 ? browsersMock : screenshotsMock);
    });

    const result = await generateScreenshots(validInput, credentials);
    expect(result.job_id).toBeTruthy();
    expect(result.state).toBeDefined();
    expect(result.screenshots).toBeDefined();
    expect(Array.isArray(result.screenshots)).toBe(true);
  });

  it('should handle rate limiting', async () => {
    // Mock browsers response first
    const browsersMock = {
      browsers: [
        {
          os: 'Windows',
          os_version: '10',
          browser: 'chrome',
          browser_version: '117.0',
          device: null
        }
      ]
    };

    let callCount = 0;
    mockFetch.fn.mockImplementation(async () => {
      callCount++;
      if (callCount === 1) {
        return createMockResponse(200, browsersMock);
      }
      return createMockResponse(429, { message: 'Rate limit exceeded' });
    });

    await expect(
      generateScreenshots(validInput, credentials)
    ).rejects.toThrow('Rate limit exceeded');
  });

  it('should fetch available browsers', async () => {
    const mockResponse = {
      browsers: [
        {
          os: 'Windows',
          os_version: '10',
          browser: 'chrome',
          browser_version: '117.0',
          device: null
        }
      ]
    };

    mockFetch.fn.mockImplementation(async () => createMockResponse(200, mockResponse));

    const browsers = await getBrowsers(credentials);
    expect(Array.isArray(browsers)).toBe(true);
    expect(browsers.length).toBeGreaterThan(0);
    expect(browsers[0]).toHaveProperty('os');
    expect(browsers[0]).toHaveProperty('browser');
  });
}); 

================================================
File: /supabase/functions/browserstack-screenshots/__tests__/browserstack-api.test.ts
================================================
import { describe, it, expect, beforeEach, vi } from 'vitest';
import { generateScreenshots, getBrowsers } from '../browserstack-api.js';
import { createValidScreenshotRequest, createInvalidScreenshotRequest, mockFetch, createMockResponse } from './test-utils.js';
import { ResolutionType } from '../types.js';

describe('BrowserStack API', () => {
  const validInput = createValidScreenshotRequest();
  const credentials = {
    username: process.env.BROWSERSTACK_USERNAME || '',
    password: process.env.BROWSERSTACK_ACCESS_KEY || ''
  };

  beforeEach(() => {
    mockFetch.mockReset();
  });

  it('should fetch available browsers successfully', async () => {
    const mockResponse = {
      browsers: [
        {
          os: 'Windows',
          os_version: '10',
          browser: 'chrome',
          browser_version: '117.0',
          device: null
        }
      ]
    };

    mockFetch.fn.mockImplementation(async () => createMockResponse(200, mockResponse));

    const browsers = await getBrowsers(credentials);
    expect(Array.isArray(browsers), 'browsers should be an array').toBe(true);
    expect(browsers.length, 'browsers array should not be empty').toBeGreaterThan(0);
    expect(browsers[0], 'first browser should have os property').toHaveProperty('os');
    expect(browsers[0], 'first browser should have browser property').toHaveProperty('browser');
  });

  it('should generate screenshots successfully', async () => {
    // Mock browsers response first
    const browsersMock = {
      browsers: [
        {
          os: 'Windows',
          os_version: '10',
          browser: 'chrome',
          browser_version: '117.0',
          device: null
        }
      ]
    };

    // Mock screenshots response
    const screenshotsMock = {
      job_id: 'test-job-id',
      state: 'done',
      callback_url: null,
      win_res: '1024x768',
      mac_res: '1024x768',
      quality: 'compressed',
      wait_time: 5,
      screenshots: [{
        id: 'screenshot-1',
        browser: 'chrome',
        browser_version: '117.0',
        os: 'Windows',
        os_version: '10',
        url: 'https://example.com',
        state: 'done',
        created_at: '2024-01-30T16:25:45.000Z'
      }]
    };

    let callCount = 0;
    mockFetch.fn.mockImplementation(async () => {
      callCount++;
      return createMockResponse(200, callCount === 1 ? browsersMock : screenshotsMock);
    });

    const result = await generateScreenshots(validInput, credentials);
    expect(result.job_id, 'result should have a job_id').toBeTruthy();
    expect(result.state, 'result should have a state').toBeDefined();
    expect(result.screenshots, 'result should have screenshots').toBeDefined();
    expect(Array.isArray(result.screenshots), 'screenshots should be an array').toBe(true);
  });

  it('should reject invalid resolution', async () => {
    const invalidInput = createInvalidScreenshotRequest({ resolution: 'INVALID' as ResolutionType });
    await expect(
      generateScreenshots(invalidInput, credentials)
    ).rejects.toThrow(/Invalid INVALID resolution/);
  });

  it('should reject invalid wait time', async () => {
    const invalidInput = createInvalidScreenshotRequest({ wait_time: 30 as 2 | 5 | 10 | 15 | 20 | 60 });
    await expect(
      generateScreenshots(invalidInput, credentials)
    ).rejects.toThrow(/Invalid wait time/);
  });

  it('should handle rate limiting', async () => {
    // Mock browsers response first
    const browsersMock = {
      browsers: [
        {
          os: 'Windows',
          os_version: '10',
          browser: 'chrome',
          browser_version: '117.0',
          device: null
        }
      ]
    };

    let callCount = 0;
    mockFetch.fn.mockImplementation(async () => {
      callCount++;
      if (callCount === 1) {
        return createMockResponse(200, browsersMock);
      }
      return createMockResponse(429, { message: 'Rate limit exceeded' });
    });

    await expect(
      generateScreenshots(validInput, credentials)
    ).rejects.toThrow('Rate limit exceeded');
  });
}); 

================================================
File: /supabase/functions/browserstack-screenshots/__tests__/index.test.ts
================================================
import { describe, it, expect, beforeEach } from 'vitest';
import { generateScreenshots } from '../index.js';
import { createValidScreenshotRequest, mockFetch, createMockResponse } from './test-utils.js';

describe('index', () => {
  const validInput = createValidScreenshotRequest();
  const credentials = {
    username: process.env.BROWSERSTACK_USERNAME || '',
    password: process.env.BROWSERSTACK_ACCESS_KEY || ''
  };

  beforeEach(() => {
    mockFetch.mockReset();
  });

  it('should handle screenshot generation', async () => {
    // Mock browsers response first
    const browsersMock = {
      browsers: [
        {
          os: 'Windows',
          os_version: '10',
          browser: 'chrome',
          browser_version: '117.0',
          device: null
        }
      ]
    };

    // Mock screenshots response
    const screenshotsMock = {
      job_id: 'test-job-id',
      state: 'done',
      callback_url: null,
      win_res: '1024x768',
      mac_res: '1024x768',
      quality: 'compressed',
      wait_time: 5,
      screenshots: [{
        id: 'screenshot-1',
        browser: 'chrome',
        browser_version: '117.0',
        os: 'Windows',
        os_version: '10',
        url: 'https://example.com',
        state: 'done',
        created_at: '2024-01-30T16:25:45.000Z'
      }]
    };

    let callCount = 0;
    mockFetch.fn.mockImplementation(async () => {
      callCount++;
      return createMockResponse(200, callCount === 1 ? browsersMock : screenshotsMock);
    });

    const result = await generateScreenshots(validInput, credentials);
    expect(result.job_id).toBeTruthy();
    expect(result.state).toBeDefined();
    expect(result.screenshots).toBeDefined();
    expect(Array.isArray(result.screenshots)).toBe(true);
  });
}); 

================================================
File: /supabase/functions/browserstack-screenshots/__tests__/setup.ts
================================================
import { vi, beforeEach } from 'vitest';
import type { ScreenshotSettings, BrowserConfig } from '../types';
import type { RequestInfo, HeadersInit } from 'node-fetch';
import { Response } from 'node-fetch';

// Mock the database client
vi.mock('../database', () => ({
  createSupabaseClient: vi.fn().mockReturnValue({
    // Add any required mock methods here
  })
}));

// Mock the browserstack-api
type GenerateScreenshotsType = (settings: ScreenshotSettings, authHeader: HeadersInit) => Promise<{
  job_id: string;
  screenshots: Array<{
    id: string;
    state: 'done';
    url: string;
  } & BrowserConfig>;
}>;

const mockGenerateScreenshots = vi.fn((settings: ScreenshotSettings, authHeader: HeadersInit) => {
  // Validate required parameters
  if (!settings.url) {
    throw new Error('Missing required parameter: url');
  }
  if (!Array.isArray(settings.browsers) || settings.browsers.length === 0) {
    throw new Error('Missing required parameter: browsers must be a non-empty array');
  }

  return Promise.resolve({
    job_id: 'test-job-id',
    screenshots: settings.browsers.map((browser: BrowserConfig, index: number) => ({
      id: `screenshot-${index}`,
      state: 'done' as const,
      url: settings.url,
      ...browser
    }))
  });
});

vi.mock('../browserstack-api', () => ({
  generateScreenshots: mockGenerateScreenshots
}));

// Mock the os-config
type NormalizeConfigType = (config: BrowserConfig) => { os: string; os_version: string };

const mockNormalizeOsConfig = vi.fn((config: BrowserConfig) => ({
  os: config.os,
  os_version: config.os_version
}));

vi.mock('../os-config', () => ({
  normalizeOsConfig: mockNormalizeOsConfig
}));

// Mock fetch
const mockResponse = new Response(JSON.stringify({ message: 'Mocked response' }), {
  status: 200,
  headers: { 'Content-Type': 'application/json' }
});

// Use native fetch types
type FetchResponse = globalThis.Response;

const mockFetch = vi.fn<Parameters<typeof fetch>, Promise<FetchResponse>>();

global.fetch = mockFetch;

beforeEach(() => {
  mockFetch.mockReset();
}); 

================================================
File: /supabase/functions/browserstack-screenshots/__tests__/test-utils.ts
================================================
import { vi } from 'vitest';
import type { ScreenshotRequest } from '../browserstack-api.js';

export const mockCredentials = {
  username: 'test_user',
  password: 'test_key'
};

const defaultMockFetch = async (input: RequestInfo | URL, init?: RequestInit): Promise<Response> => {
  return new Response(JSON.stringify({ message: 'Default mock response' }), {
    status: 200,
    headers: { 'Content-Type': 'application/json' }
  });
};

export const mockFetch = {
  fn: vi.fn(defaultMockFetch),
  mockReset() {
    this.fn.mockReset();
    this.fn.mockImplementation(defaultMockFetch);
  },
  mockResolvedValueOnce(value: Response) {
    return this.fn.mockResolvedValueOnce(value);
  }
};

export function createMockResponse(status: number, data: unknown): Response {
  return new Response(JSON.stringify(data), {
    status,
    headers: { 'Content-Type': 'application/json' }
  });
}

export function createValidScreenshotRequest(): ScreenshotRequest {
  return {
    url: 'https://example.com',
    resolution: 'WINDOWS',
    browsers: [{
      os: 'Windows',
      os_version: '10',
      browser: 'chrome',
      browser_version: '117.0'
    }],
    wait_time: 5,
    quality: 'compressed'
  };
}

export function createInvalidScreenshotRequest(overrides: Partial<ScreenshotRequest> = {}): ScreenshotRequest {
  return {
    ...createValidScreenshotRequest(),
    ...overrides
  };
}

export function validateAuthHeader(headers: Record<string, string>): boolean {
  const authHeader = headers['Authorization'];
  if (!authHeader) return false;

  const [type, credentials] = authHeader.split(' ');
  if (type !== 'Basic') return false;

  const decoded = Buffer.from(credentials, 'base64').toString();
  const [username, password] = decoded.split(':');

  return username === mockCredentials.username && password === mockCredentials.password;
} 

================================================
File: /supabase/functions/browserstack-screenshots/__tests__/types.d.ts
================================================
declare namespace NodeJS {
  interface Global {
    fetch: import('vitest').Mock;
  }
  interface ProcessEnv {
    BROWSERSTACK_USERNAME: string;
    BROWSERSTACK_ACCESS_KEY: string;
    SUPABASE_URL: string;
    SUPABASE_SERVICE_ROLE_KEY: string;
  }
}

declare module "dotenv" {
  export function config(options?: { path?: string }): void;
}

declare module "path" {
  export function resolve(...paths: string[]): string;
} 

================================================
File: /supabase/functions/browserstack-screenshots/__tests__/types.ts
================================================
export interface ScreenshotRequest {
  url: string;
  resolution: 'WINDOWS' | 'MAC';
  browsers: Array<{
    os: string;
    os_version: string;
    browser: string;
    browser_version: string;
  }>;
  waitTime: 2 | 5 | 10 | 15 | 20 | 60;
} 

================================================
File: /supabase/functions/browserstack-screenshots/errors/browserstack-error.ts
================================================
export class BrowserstackError extends Error {
  constructor(
    message: string,
    public statusCode: number,
    public requestId: string,
    public context?: Record<string, unknown>
  ) {
    super(message);
    this.name = 'BrowserstackError';
  }
}

================================================
File: /supabase/functions/browserstack-screenshots/types/api-types.ts
================================================
export interface BrowserstackCredentials {
  username: string;
  password: string;
}

export interface Browser {
  os: string;
  os_version: string;
  browser?: string;
  browser_version?: string;
  device?: string;
}

export interface ScreenshotRequest {
  url: string;
  browsers: Browser[];
  quality?: 'compressed' | 'original';
  wait_time?: number;
  callback_url?: string;
}

export interface Screenshot {
  id: string;
  url: string;
  thumb_url: string;
  image_url: string;
  state: string;
  os: string;
  os_version: string;
  browser?: string;
  browser_version?: string;
  created_at: string;
}

export interface ScreenshotResponse {
  job_id: string;
  state: string;
  callback_url: string | null;
  quality: 'compressed' | 'original';
  wait_time: number;
  screenshots: Screenshot[];
}

export interface BrowsersResponse {
  browsers: Browser[];
}

================================================
File: /supabase/functions/browserstack-screenshots/types/deno.d.ts
================================================
declare namespace Deno {
  export interface Env {
    get(key: string): string | undefined;
    toObject(): { [key: string]: string };
  }
  export const env: Env;
}

declare module "deno" {
  export = Deno;
} 

================================================
File: /supabase/functions/browserstack-screenshots/types/global.d.ts
================================================
import type { Mock } from 'vitest';

declare global {
  var fetch: typeof globalThis.fetch;
  
  namespace NodeJS {
    interface Global {
      fetch: typeof globalThis.fetch;
    }
  }
} 

================================================
File: /supabase/functions/browserstack-screenshots/types/vitest.d.ts
================================================
/// <reference types="vitest" /> 

================================================
File: /supabase/functions/browserstack-screenshots/utils/api-utils.ts
================================================
import { logger } from "../logger.ts";
import { BrowserstackError } from "../errors/browserstack-error.ts";

export async function handleBrowserstackResponse<T>(response: Response, requestId: string): Promise<T> {
  if (!response.ok) {
    const errorMessage = `Browserstack API error: ${response.status} ${response.statusText}`;
    logger.error({
      message: errorMessage,
      requestId,
      status: response.status,
      statusText: response.statusText
    });
    throw new BrowserstackError(errorMessage, response.status, requestId);
  }

  try {
    const data = await response.json();
    return data as T;
  } catch (error) {
    logger.error({
      message: 'Failed to parse Browserstack API response',
      requestId,
      error
    });
    throw new BrowserstackError('Invalid response format', response.status, requestId);
  }
}

export function validateResolution(resolution: string | undefined, type: 'Windows' | 'Mac'): void {
  if (!resolution) return;
  
  const validResolutions = type === 'Windows' 
    ? ['1024x768', '1280x1024', '1920x1080']
    : ['1024x768', '1280x960', '1280x1024', '1600x1200', '1920x1080'];
  
  if (!validResolutions.includes(resolution)) {
    throw new Error(
      `Invalid ${type} resolution: ${resolution}. Valid resolutions are: ${validResolutions.join(', ')}`
    );
  }
}

export function validateWaitTime(waitTime: number | undefined): void {
  if (!waitTime) return;
  
  const validWaitTimes = [2, 5, 10, 15, 20, 60];
  if (!validWaitTimes.includes(waitTime)) {
    throw new Error(
      `Invalid wait time: ${waitTime}. Valid wait times are: ${validWaitTimes.join(', ')} seconds`
    );
  }
}

================================================
File: /supabase/functions/validate-browserstack-config/index.ts
================================================
import { createClient } from "https://esm.sh/@supabase/supabase-js@2.39.3";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { corsHeaders } from '../_shared/cors.ts';
import { validateBrowserConfig } from '../browserstack-screenshots/browser-validation.ts';

interface ValidationResponse {
  isValid: boolean;
  message?: string;
  suggestion?: {
    os_version?: string;
    browser_version?: string;
  };
}

class ValidationError extends Error {
  status: number;

  constructor({ message, status }: { message: string; status: number }) {
    super(message);
    this.status = status;
    this.name = 'ValidationError';
  }
}

// @ts-ignore: Deno types
serve(async (req: Request) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders });
  }

  try {
    // Get BrowserStack credentials from environment
    // @ts-ignore: Deno types
    const username = Deno.env.get('BROWSERSTACK_USERNAME');
    // @ts-ignore: Deno types
    const accessKey = Deno.env.get('BROWSERSTACK_ACCESS_KEY');

    if (!username || !accessKey) {
      console.error('Missing BrowserStack credentials');
      throw new ValidationError({
        message: 'BrowserStack credentials not configured',
        status: 500
      });
    }

    const { data } = await req.json();
    
    if (!data) {
      throw new ValidationError({
        message: 'Invalid request data',
        status: 400
      });
    }

    console.log('Validating config:', JSON.stringify(data, null, 2));

    // Get available browsers from BrowserStack
    const browsersResponse = await fetch('https://api.browserstack.com/automate/browsers.json', {
      headers: {
        'Authorization': `Basic ${btoa(`${username}:${accessKey}`)}`,
      }
    });

    if (!browsersResponse.ok) {
      console.error('Failed to fetch browsers from BrowserStack:', browsersResponse.statusText);
      throw new ValidationError({
        message: 'Failed to fetch browser configurations',
        status: 500
      });
    }

    const browsers = await browsersResponse.json();
    console.log('Available browsers:', JSON.stringify(browsers, null, 2));

    const isValid = validateBrowserConfig(data, browsers);
    console.log('Validation result:', isValid);

    const response: ValidationResponse = {
      isValid,
      message: isValid 
        ? 'Configuration is valid'
        : 'Configuration is invalid. Please check browser and version compatibility.',
    };

    if (!isValid && data.browser_version !== 'latest') {
      response.suggestion = {
        browser_version: 'latest'
      };
    }

    return new Response(
      JSON.stringify(response),
      { 
        headers: { 
          ...corsHeaders,
          'Content-Type': 'application/json'
        } 
      }
    );
  } catch (error) {
    console.error('Error in validate-browserstack-config function:', error);

    const status = error instanceof ValidationError ? error.status : 500;
    const message = error instanceof Error ? error.message : 'An unexpected error occurred';

    return new Response(
      JSON.stringify({ 
        error: message,
        isValid: false
      }),
      { 
        status,
        headers: { 
          ...corsHeaders,
          'Content-Type': 'application/json'
        } 
      }
    );
  }
});

